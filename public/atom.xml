<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This Js</title>
  
  <subtitle>小凡的秘密花园</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.thisjs.com/"/>
  <updated>2018-04-07T14:15:53.425Z</updated>
  <id>http://www.thisjs.com/</id>
  
  <author>
    <name>张树源</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用MiTM的方式进行无线抓包调试</title>
    <link href="http://www.thisjs.com/2018/04/07/using-man-in-the-middle-for-capture/"/>
    <id>http://www.thisjs.com/2018/04/07/using-man-in-the-middle-for-capture/</id>
    <published>2018-04-07T14:03:51.000Z</published>
    <updated>2018-04-07T14:15:53.425Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cdn.zhshy.me/img/20180405173639.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/20180405173639.png" alt=""></a></p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。</p><ul><li>在Windows平台上，常用的软件是 <a href="https://www.telerik.com/fiddler" target="_blank" rel="external"><u>Fiddler</u></a></li><li>而在OS X系统中，要使用的软件则是 <a href="https://www.wireshark.org/" target="_blank" rel="external"><u>Wireshark</u></a></li><li>在Android平台上，使用的则是 <a href="https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture" target="_blank" rel="external"><u>Packet Capture</u></a></li></ul><p>本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。<br><a id="more"></a></p><p>比如在Windows上调试手机设备，我们可以在Fiddler中开启<strong>允许其他设备远程连接</strong>，然后在手机设备中设置VPN为电脑IP，这样手机的数据会通过电脑进行请求，这样我们就可以在Fiddler中抓取手机中的数据包了。</p><p>这项操作其实还可以简化，那就是不需要手机进行任何设置，我们就可以直接直接获取手机上的数据包。这时候，我们就可以使用神奇的 <strong>Ettercap</strong> 了，该软件可以实现一个中间人攻击的思路，进行抓包分析。</p><p><img src="https://cdn.zhshy.me/img/mitmblogeng-1.png" alt=""></p><blockquote><p>中间人攻击是指<strong>攻击</strong>者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制</p></blockquote><p>基于此，我们便不需要通过手机端的设置或者允许，我们在这个环节中，扮演攻击者，就可以快速的开始对其抓包分析了。</p><p>以下介绍在os X系统中进行中间人攻击抓包的方式。</p><h2 id="安装工具包"><a href="#安装工具包" class="headerlink" title="安装工具包"></a>安装工具包</h2><p>我们需要的几个工具如下：</p><ul><li>nmap (<em>端口扫描器</em>)</li><li>ettercap (<em>中间人攻击工具</em>)</li><li>Wireshark (<em>包分析工具</em>)<br>使用Homebrew安装这几个包非常方便。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install nmap</div></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install ettercap</div></pre></td></tr></table></figure><p>在安装Ettercap的时候可以选择带GUI界面的，只需要在后面追加<code>--with-gtk+</code> 参数即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install wireshark --with-qt</div></pre></td></tr></table></figure><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="1-查看局域网IP信息"><a href="#1-查看局域网IP信息" class="headerlink" title="1. 查看局域网IP信息"></a>1. 查看局域网IP信息</h3><p>首先，<strong>电脑要与手机在同一个局域网中</strong>。接下来，通过IP查看局域网使用的网段。在终端中，使用以下其中一个命令，查看IP地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ipconfig getifaddr en0 # 使用无线网连接</div><div class="line">ipconfig getifaddr en1 # 使用以太网连接</div><div class="line">ipconfig getifaddr en3 # 使用其他适配器连接</div></pre></td></tr></table></figure><h3 id="2-扫描同一局域网中的网络使用情况。"><a href="#2-扫描同一局域网中的网络使用情况。" class="headerlink" title="2. 扫描同一局域网中的网络使用情况。"></a>2. 扫描同一局域网中的网络使用情况。</h3><p>接下来我们使用namp查看同一网段下，有哪些设备在连接。会得到类似以下结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ nmap -sP  192.168.199.0/24</div><div class="line"></div><div class="line">Starting Nmap 7.60 ( https://nmap.org ) at 2018-04-05 18:10 CST</div><div class="line">Nmap scan report for Hiwifi.lan (192.168.199.1)</div><div class="line">Host is up (0.0030s latency).</div><div class="line">Nmap scan report for android-5ea1fea3b816a66.lan (192.168.199.153)</div><div class="line">Host is up (0.031s latency).</div><div class="line">Nmap scan report for zMBP.lan (192.168.199.169)</div><div class="line">Host is up (0.0021s latency).</div><div class="line">Nmap scan report for RedmiNote4X-hongmish.lan (192.168.199.198)</div><div class="line">Host is up (0.035s latency).</div><div class="line">Nmap scan report for iPad.lan (192.168.199.202)</div><div class="line">Host is up (0.037s latency).</div><div class="line">Nmap scan report for iPhone-7.lan (192.168.199.234)</div><div class="line">Host is up (0.0068s latency).</div><div class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 3.07 seconds</div></pre></td></tr></table></figure><p><del>当然，如果你通过手机的链接信息中，直接获取到手机IP的话，该步骤可以省略。</del></p><p>可以看到这里有多个设备在连接，而我本次需要测试的是<code>android…….lan (192.168.199.153)</code> 这一个IP。</p><h3 id="3-开始Ettercap"><a href="#3-开始Ettercap" class="headerlink" title="3. 开始Ettercap"></a>3. 开始Ettercap</h3><p>这里使用curses图形化界面启动，参数为<code>-C</code>，如果使用GUI界面的话，参数为<code>-G</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ettercap -C</div></pre></td></tr></table></figure><p><a href="https://cdn.zhshy.me/img/etttercap-index.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/etttercap-index.png" alt=""></a></p><p>进入该界面后，依次选择<code>Sniff</code> -&gt; <code>Unified sniffing...U</code> -&gt; 输入网络类型值(<em>参考上面查询IP的参数，默认en0</em>) -&gt; <code>Hosts</code> -&gt; <code>Scan for hosts</code> -&gt; <code>Hosts list</code></p><p><a href="https://cdn.zhshy.me/img/ettercap-hosts-list.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/ettercap-hosts-list.png" alt=""></a></p><p>这里可以看到扫描出来的同网段IP，在编写该文章的时候，有些其他设备已经离线了，因此本列表中扫描到的与使用namp扫描出来数量不同。但是如果记住了对应设备的IP，依旧可以使用。</p><p>这里，<code>192.168.199.1</code> 为网关，本次中间人攻击就是要实现欺骗设备 <code>192.168.199.153</code> 与网关 <code>192.168.199.1</code>之间的通讯。</p><p>接下来，需要将这两个IP分别加入嗅探的目标中，依次进入<code>Targets</code> -&gt; <code>Select TARGET(s)</code> -&gt; 在TARGET1中输入/<code>192.168.199.153//</code>  TARGET1中输入/<code>192.168.199.1//</code></p><p><strong>备注：这里的Target格式为 <code>MAC/IPs/PORTs/</code></strong></p><p>这时，查看Current targets可以看到当前的目标列表。</p><p><a href="https://cdn.zhshy.me/img/ettercap-current-targets.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/ettercap-current-targets.png" alt=""></a></p><p>执行<code>MiTM</code> -&gt; <code>ARP poisoning...</code> -&gt; Parameters为空即可</p><p>这时，已经通过ARP欺骗的方式，成功开始了中间人攻击。可以通过<code>View</code> -&gt; <code>Statistics</code>查看该设备的数据情况。</p><p><a href="https://cdn.zhshy.me/img/ettercap-statistics-view.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/ettercap-statistics-view.png" alt=""></a></p><h3 id="4-分析数据"><a href="#4-分析数据" class="headerlink" title="4. 分析数据"></a>4. 分析数据</h3><p>现在，我们已经成功监听了设备和网关之间数据。现在需要试着分析这些数据了。那么就要使用Wireshark了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wireshark</div></pre></td></tr></table></figure><p>我们简单做一下筛选，只展示IP地址为192.168.199.153的POST请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip.addr == 192.168.199.153 &amp;amp;&amp;amp; http.request.method == &quot;POST&quot;</div></pre></td></tr></table></figure></p><p>我在手机的一个非https网站(www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。</p><p><a href="https://cdn.zhshy.me/img/wireshark-post-userinfo-data.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/wireshark-post-userinfo-data.png" alt=""></a></p><p>可以看到登录的用户名密码都是以明文的方式传输的，非常方便的进行了数据抓包调试。</p><h3 id="4-2-延伸"><a href="#4-2-延伸" class="headerlink" title="4.2 延伸"></a>4.2 延伸</h3><p>我们一直使用POST方式来获取该设备的登录信息，但是如果该设备已经登录过了，我们应该如何抓取到可以使用的信息呢？——当然是Cookie信息了。</p><p>将过滤的请求方式改为GET，在随便找到一个HTML页面之后，会发现其中带有Cookie信息。</p><p><a href="https://cdn.zhshy.me/img/wireshark-cookie-info.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/wireshark-cookie-info.png" alt=""></a></p><p>将该Cookie信息，保存下来，在任意浏览器中导入该Cookie信息，即可实现『登录』的效果。</p><p><a href="https://cdn.zhshy.me/img/wireshark-cookie-login.png" target="_blank" rel="external"><img src="https://cdn.zhshy.me/img/wireshark-cookie-login.png" alt=""></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，我们已经利用非常古老的的中间人攻击的方式，实现了不需要手机任何操作，就可以抓取手机数据包的功能。该方法在设置好之后，非常方便，可以快速切换设备，也可以多个设备同时抓包测试。</p><p>当然，我们也发现了其中的问题，那就是如果使用该方式对其他人的手机进行渗入，是不是就会导致数据泄露呢？理论上是会出现这种情况的，但是前面也提到，这是比较古老的攻击方式，只要设备上安装了任意的『XX安全卫士』『xx管家』，不要随便连接公共的WIFI，都可以保证我们的设备安全。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://youyuejiajia.wordpress.com/2016/03/20/%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84arp%E6%AC%BA%E9%AA%97%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%EF%BC%88mac%EF%BC%89/" target="_blank" rel="external">同一局域网环境下的arp欺骗和中间人攻击（mac）</a></li><li><a href="https://jingyan.baidu.com/article/c35dbcb0866b698916fcbc81.html" target="_blank" rel="external">wireshark怎么抓包 wireshark抓包详细图文教程</a></li><li><a href="https://www.youtube.com/watch?v=0a7o9FKzWOc" target="_blank" rel="external">Man In The Middle Attack! (ARP Poisoning) using ettercap to sniff login information</a></li><li><a href="http://blog.51cto.com/isnull/1738199" target="_blank" rel="external">使用ettercap实现中间人攻击</a></li><li><a href="http://www.freebuf.com/sectool/125104.html" target="_blank" rel="external">如何用Ettercap实现“中间人攻击”</a></li><li><a href="https://blog.csdn.net/xukai871105/article/details/31008635" target="_blank" rel="external">Wireshark学习笔记——如何快速抓取HTTP数据包</a></li><li><a href="http://blog.51cto.com/wxfplane/1749951" target="_blank" rel="external">Ettercap的arp攻击方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cdn.zhshy.me/img/20180405173639.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://cdn.zhshy.me/img/20180405173639.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Windows平台上，常用的软件是 &lt;a href=&quot;https://www.telerik.com/fiddler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;u&gt;Fiddler&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;而在OS X系统中，要使用的软件则是 &lt;a href=&quot;https://www.wireshark.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;u&gt;Wireshark&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Android平台上，使用的则是 &lt;a href=&quot;https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;u&gt;Packet Capture&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。&lt;br&gt;
    
    </summary>
    
    
      <category term="中间人" scheme="http://www.thisjs.com/tags/%E4%B8%AD%E9%97%B4%E4%BA%BA/"/>
    
      <category term="开发" scheme="http://www.thisjs.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="抓包" scheme="http://www.thisjs.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript判断元素中是否含有某个样式</title>
    <link href="http://www.thisjs.com/2018/03/28/use-javascript-to-judge-whether-the-element-contains-a-certain-style/"/>
    <id>http://www.thisjs.com/2018/03/28/use-javascript-to-judge-whether-the-element-contains-a-certain-style/</id>
    <published>2018-03-28T12:18:26.000Z</published>
    <updated>2018-03-28T12:33:47.401Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.zhshy.me/img/hero.png" alt="题图"></p><p>看到这个题目，立马想到的就是 <strong>element.classList.contains()</strong> 和 <strong>$(element).hasClass()</strong> 方法。</p><p>但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。</p><a id="more"></a><p><img src="https://cdn.zhshy.me/img/classlist-can-use.png" alt="classList的兼容性"></p><p style="text-align: center;font-size: 10px;"> <i>classList的兼容性</i> </p><p>假如我们有如下测试元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"LL"</span> <span class="attr">class</span>=<span class="string">"a b hello-world"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="简单正则匹配法"><a href="#简单正则匹配法" class="headerlink" title="简单正则匹配法"></a>简单正则匹配法</h2><p>最开始我们找到的方法如下，即使用正则判断单词边界的方式判断是否存在className</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span>+className+<span class="string">"\\b"</span>, <span class="string">"gi"</span>);</div><div class="line">  <span class="keyword">return</span> regExp.test(element.className);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在样式的名字为hello-world之类的带有-连接符的情况，测试hello和world都会返回true，这并不满足我们的预期。</p><h2 id="IndexOf方法"><a href="#IndexOf方法" class="headerlink" title="IndexOf方法"></a>IndexOf方法</h2><p>同理，还有简单的使用 <strong>indexOf()</strong> 方法判断，也会导致这样的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> element.className.indexOf(className) &gt; <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时候，不仅hello和world返回true，h/e/l/等单个字符都会返回true。</p><p>我们改进一下该方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="string">" "</span> + element.className + <span class="string">" "</span> ).indexOf(<span class="string">" "</span>+className+<span class="string">" "</span>) &gt; <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在根据样式名称加” “的方式，判断一个元素是否含有该样式。在大部分的测试中，已经没有了问题。</p><p>但是！！！我们遇到了这样的神奇代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab"</span> <span class="attr">class</span>=<span class="string">"hello-worldabworld"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>看上去和正常的代码没有太大区别，然而样式名称间的分隔符居然 <strong>是TAB，不是空格！</strong></p><p>那么使用空格作为分隔符检索的方式就失效了。不过我们可以在检索之前将内容格式化一下即可。将tab和多余的空格一起替换为空格即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> replacedName = element.className.replace(<span class="regexp">/\t*\s+/g</span>, <span class="string">' '</span>);</div><div class="line">  <span class="keyword">return</span> (<span class="string">" "</span> + replacedName + <span class="string">" "</span> ).indexOf(<span class="string">" "</span>+className+<span class="string">" "</span>) &gt; <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样，无论是遇到tab键，还是-连接符问题都可以很好的解决了。好方法 <strong>get√</strong></p><h2 id="优化正则匹配法"><a href="#优化正则匹配法" class="headerlink" title="优化正则匹配法"></a>优化正则匹配法</h2><p>另外，在查阅<a href="http://youmightnotneedjquery.com/" target="_blank" rel="external">YOU MIGHT NOT NEED JQUERY</a>时，遇到了如下方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + className + <span class="string">'( |$)'</span>, <span class="string">'gi'</span>).test(element.className);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该方法也是基于样式左右的空格，使用正则进行匹配，同时考虑到了样式开头如果没有空格的问题。但是依旧没有考虑到 <strong>TAB</strong> 作为分隔符的问题，我们可以将格式化的字符串作为匹配内容，也可以直接将该情况添加到正则中即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| |\\t)'</span> + className + <span class="string">'(\\t| |$)'</span>, <span class="string">'gi'</span>).test(element.className);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好啦，现在又有一个新方法<strong>get√</strong></p><p>现在，非常方便的方法我们已经拥有了2个，那么我们开始天马行空(<del>不考虑性能</del>)的部分吧。</p><h2 id="边界匹配法变种"><a href="#边界匹配法变种" class="headerlink" title="边界匹配法变种"></a>边界匹配法变种</h2><p>同样是利用了样式边界的思路。我们将className字符串进行分割，然后使用for循环，进行查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">   <span class="keyword">const</span> replacedName = element.className.replace(<span class="regexp">/\t*\s+/g</span>, <span class="string">' '</span>);</div><div class="line">   <span class="keyword">const</span> aClassName = replacedName.split(<span class="string">' '</span>)</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aClassName.length; i++) &#123;</div><div class="line">     <span class="keyword">if</span> (className === aClassName[i]) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至于为什么不用filter，includes等高阶函数，主要是为了照顾低版本浏览器，如果浏览器版本支持的话，还是用 <strong>classList.contains</strong> 吧。</p><h2 id="使用getElementsByClassName-法"><a href="#使用getElementsByClassName-法" class="headerlink" title="使用getElementsByClassName()法"></a>使用getElementsByClassName()法</h2><p>思路：根据className匹配元素数组，然后查找其中是否含有对应的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, className</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> aSameClassEle = <span class="built_in">document</span>.getElementsByClassName(className);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; aSameClassEle.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(aSameClassEle[i] === element) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好了，这样在判断一个元素是否含有某个样式的时候，就有不同的方法可以用了。如果要做兼容性的话，只需要在前面加个判断if(element.classList)，在有classList方法的浏览器中使用classList.contains()方法，其他浏览器使用这些方法中的一个即可。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/10960573/what-is-the-best-way-to-check-if-element-has-a-class" target="_blank" rel="external">What is the best way to check if element has a class?</a></p><p><a href="http://youmightnotneedjquery.com/" target="_blank" rel="external">YOU MIGHT NOT NEED JQUERY</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.zhshy.me/img/hero.png&quot; alt=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到这个题目，立马想到的就是 &lt;strong&gt;element.classList.contains()&lt;/strong&gt; 和 &lt;strong&gt;$(element).hasClass()&lt;/strong&gt; 方法。&lt;/p&gt;
&lt;p&gt;但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.thisjs.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Aria2为OneDrive增加离线下载功能</title>
    <link href="http://www.thisjs.com/2018/03/07/use-aria2-increase-offline-download-function-for-onedrive/"/>
    <id>http://www.thisjs.com/2018/03/07/use-aria2-increase-offline-download-function-for-onedrive/</id>
    <published>2018-03-07T13:22:10.000Z</published>
    <updated>2018-03-07T13:33:41.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg" alt="OneDrive"></p><p>本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。</p><a id="more"></a><h2 id="太长不看的背景介绍"><a href="#太长不看的背景介绍" class="headerlink" title="太长不看的背景介绍"></a>太长不看的背景介绍</h2><details><br>   <summary>还是点开看看吧</summary><br><br>微软推出的OneDrive拥有非常强大的功能，可以在多个终端管理自己的文件，国内访问速度非常快，下载文件可以达到满速，不会像百度云那样即使有百兆网络，也只能每秒100k左右的下载速度。如果无法愉快的使用GoogleDrive，那么OneDrive是一个非常不错的选择。<br><br>在国内的主流云盘中，都会有一个离线下载的功能，即允许用户添加下载任务，服务器会自动将资源下载到云盘中，用户过段时间就可以查看自己的文件了。<br><br>使用<code>离线下载</code>功能一般有如下两个目的<br><br>1. 将需要观看的影视资源，下载到服务器中，过段时间就可以直接在线观看 <em>(百度云)</em><br><br>2. 利用服务器的高速网络，将本来比较慢速的资源提前下载好，再取回本地 <em>(迅雷离线)</em><br><br>而本次为OneDrive搭建的离线下载功能，主要推荐的使用方法如下：<br><br>1. 将需要阅读的文档资源，离线下载到OneDrive中，随时随地查看<br>2. 将需要编辑的Office资源离线保存，使用Office Online编辑<br>3. 将喜欢的音乐离线保存，随时随地听<br>4. 将喜欢的影视作品离线保存，随时随地观看<br>5. <del>将墙外的一些影视、图像资源保存到自己的OneDrive中(需要国外服务器)</del><br><br>不推荐的使用方法：<br><br>1. 将喜欢的游戏离线保存到服务器，过段时间再下载到电脑上<br>2. 将需要安装的大型软件离线保存<br></details><h2 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h2><p>添加下载任务 =&gt; 将资源保存到服务器中 =&gt; 在服务器上将资源同步到OneDrive中 =&gt; 在OneDrive中查看资源</p><h2 id="准备材料："><a href="#准备材料：" class="headerlink" title="准备材料："></a>准备材料：</h2><ul><li>一台云服务器</li><li>OneDrive</li></ul><blockquote><p><strong>备注：</strong> 本次使用的云服务器安装的是<strong>CentOs 7.2</strong>系统</p></blockquote><h2 id="首先实现将服务器上的资源同步到OneDrive"><a href="#首先实现将服务器上的资源同步到OneDrive" class="headerlink" title="首先实现将服务器上的资源同步到OneDrive"></a>首先实现将服务器上的资源同步到OneDrive</h2><p>我们采用了<a href="https://github.com/skilion/onedrive" target="_blank" rel="external">Linux OneDrive</a>的开源项目。</p><h3 id="安装git用于Clone-GitHub上的资源"><a href="#安装git用于Clone-GitHub上的资源" class="headerlink" title="安装git用于Clone GitHub上的资源"></a>安装git用于Clone GitHub上的资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install git</div></pre></td></tr></table></figure><h3 id="开始安装onedrive"><a href="#开始安装onedrive" class="headerlink" title="开始安装onedrive"></a>开始安装onedrive</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 安装依赖</div><div class="line">sudo yum install libcurl-devel</div><div class="line">sudo yum install sqlite-devel</div><div class="line">curl -fsS https://dlang.org/install.sh | bash -s dmd</div><div class="line"></div><div class="line"># 安装OneDrive</div><div class="line">git clone https://github.com/skilion/onedrive.git</div><div class="line">cd onedrive</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure><p>如果你在make过程中遇到了<code>dmd：命令未找到</code>错误，请先激活dmd，方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 激活</div><div class="line">source ~/dlang/dmd-2.079.0/activate</div><div class="line"># 取消激活</div><div class="line">deactivate</div></pre></td></tr></table></figure><p>安装完成之后，需要配置一下需要同步的内容，因为Onedrive默认会将服务器上所有的内容都同步下来，这样非常慢。</p><p>在onedrive 目录下执行以下三行命令，创建OneDrive配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/.config/onedrive</div><div class="line">cp ./config ~/.config/onedrive/config</div><div class="line">vim ~/.config/onedrive/config</div></pre></td></tr></table></figure></p><p>配置信息可以参考如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 本地同步的位置</div><div class="line">sync_dir = &quot;/home/download/onedrive&quot;</div><div class="line"># 符合以下规则的目录或者内容，将跳过同步</div><div class="line">skip_file = &quot;影视|软件工具&quot;</div></pre></td></tr></table></figure></p><ul><li>这里使用<code>/home/download/onedrive</code>作为同步目录，是为了给Aria2留出下载目录，可以根据自己需要随便修改</li><li>skip_file可以使用|添加多个规则</li></ul><p>接下来为OneDrive执行授权，在命令行中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onedrive</div></pre></td></tr></table></figure><p>会输出一个授权地址，复制授权地址到本地浏览器中打开，授权登录之后，将授权后的<strong>全部地址</strong>拷贝过来粘贴即可</p><p>从现在开始，只要执行OneDrive即可将本地的资源与服务端的内容同步。</p><p>但是我们希望在关闭SSH终端之后，依然可以自动同步。</p><p>官方推荐的方案是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl --user enable onedrive</div><div class="line">systemctl --user start onedrive</div></pre></td></tr></table></figure><p>但是在Centos 7.2中会出现错误，因此可以使用<code>nohup</code>、<code>screen</code>等命令允许在关闭SSH终端之后，继续执行，执行以下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup onedrive -m &amp;</div></pre></td></tr></table></figure><p>现在，我们在服务器上的文件操作，都会同步到OneDrive中了。</p><p>如果需要结束后台同步，找到ID，结束即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@onedrive ~]# ps -ef|grep onedrive</div><div class="line">root      40504      1  0 12:21 ?        00:00:02 onedrive -m</div><div class="line">[root@onedrive ~]# kill 40504</div></pre></td></tr></table></figure></p><h2 id="安装Aria2实现远程下载"><a href="#安装Aria2实现远程下载" class="headerlink" title="安装Aria2实现远程下载"></a>安装Aria2实现远程下载</h2><p>首先安装Aria2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install aria2</div></pre></td></tr></table></figure><p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /home/soft/aria2c -p</div><div class="line">touch /home/soft/aria2c/aria2.session</div><div class="line">vim /home/soft/aria2c/aria2.conf</div></pre></td></tr></table></figure></p><p>配置内容参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#用户名</div><div class="line">#rpc-user=user</div><div class="line">#密码</div><div class="line">#rpc-passwd=passwd</div><div class="line">#上面的认证方式不建议使用,建议使用下面的token方式</div><div class="line">#设置加密的密钥</div><div class="line">rpc-secret=token</div><div class="line">#允许rpc</div><div class="line">enable-rpc=true</div><div class="line">#允许所有来源, web界面跨域权限需要</div><div class="line">rpc-allow-origin-all=true</div><div class="line">#允许外部访问，false的话只监听本地端口</div><div class="line">rpc-listen-all=true</div><div class="line">#RPC端口, 仅当默认端口被占用时修改</div><div class="line">rpc-listen-port=6800</div><div class="line">#最大同时下载数(任务数), 路由建议值: 3</div><div class="line">max-concurrent-downloads=3</div><div class="line">#断点续传</div><div class="line">continue=true</div><div class="line">#同服务器连接数</div><div class="line">max-connection-per-server=3</div><div class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</div><div class="line">min-split-size=10M</div><div class="line">#单文件最大线程数, 路由建议值: 5</div><div class="line">split=10</div><div class="line">#下载速度限制</div><div class="line">max-overall-download-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-download-limit=0</div><div class="line">#上传速度限制</div><div class="line">max-overall-upload-limit=0</div><div class="line">#单文件速度限制</div><div class="line">max-upload-limit=0</div><div class="line">#断开速度过慢的连接</div><div class="line">#lowest-speed-limit=0</div><div class="line">#验证用，需要1.16.1之后的release版本</div><div class="line">#referer=*</div><div class="line">#文件保存路径, 默认为当前启动位置</div><div class="line">dir=/home/download/onedrive</div><div class="line">input-file=/home/soft/aria2c/aria2.session</div><div class="line">save-session=/home/soft/aria2c/aria2.session</div><div class="line">save-session-interval=60</div><div class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</div><div class="line">#disk-cache=0</div><div class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</div><div class="line">#enable-mmap=true</div><div class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</div><div class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</div><div class="line">file-allocation=prealloc</div></pre></td></tr></table></figure><p><strong>几个关键内容：</strong></p><ul><li><code>rpc-secret</code>用于设置访问token</li><li><code>dir</code> 设置到OneDrive的目录</li></ul><p>启动Aria2服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aria2c --conf-path=/home/soft/aria2c/aria2.conf -D</div></pre></td></tr></table></figure></p><p><strong>接下来安装UI界面</strong></p><p>UI界面采用<a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="external">webui-aria2</a></p><p>进入<code>/home/wwwroot</code>目录，克隆项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/ziahamza/webui-aria2.git</div></pre></td></tr></table></figure><p><strong>使用Nginx启动界面服务</strong></p><p>安装nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 安装</div><div class="line">sudo yum install nginx</div><div class="line"></div><div class="line"># 作为服务启动</div><div class="line">sudo systemctl start nginx</div></pre></td></tr></table></figure></p><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim vim /etc/nginx/nginx.conf</div></pre></td></tr></table></figure><p>修改root目录到项目所在位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /home/wwwroot/webui-aria2;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure><p>打开对应地址，发现已经成功了</p><p><img src="http://cdn.thisjs.com/blog/linksuccess.png" alt="成功界面"></p><p>测试下载文件</p><p><img src="http://cdn.thisjs.com/blog/downafile.png" alt="下载文件"></p><p>注意设置dir为OneDrive下的目录</p><p><img src="http://cdn.thisjs.com/blog/down-upload-success.png" alt="成功转存"></p><p>过一会儿在Onedrive上，就会发现文件已经成功转存。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.micronbot.com/Linux/aria2c.html" target="_blank" rel="external">Ubuntu 14 安装aria2c与web ui将老旧笔记本改装成下载机</a></p><p><a href="https://www.zhihu.com/question/20709809/answer/15939097" target="_blank" rel="external">Linux ssh状态下如何后台运行程序？ - yegle的回答</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg&quot; alt=&quot;OneDrive&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="centos" scheme="http://www.thisjs.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离的身份认证(一)：JSON WEB TOKEN介绍</title>
    <link href="http://www.thisjs.com/2017/09/25/using-the-jwt-for-api-to-add-authentication/"/>
    <id>http://www.thisjs.com/2017/09/25/using-the-jwt-for-api-to-add-authentication/</id>
    <published>2017-09-25T00:25:59.000Z</published>
    <updated>2017-09-25T10:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/blog/software-720x380.jpg" alt="安全"></p><p>随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。</p><a id="more"></a><p>这是一篇前导文章，之后会发布一系列关于JSON WEB TOKEN的项目实践。因此，这里将自己了解的相关知识和自己的一些观点汇集于此，以供查阅。</p><h1 id="传统验证方式的不足"><a href="#传统验证方式的不足" class="headerlink" title="传统验证方式的不足"></a>传统验证方式的不足</h1><blockquote><p>当然，传统验证方式并不是一文不值的，这里只是列出其中的不足，然后使用JSON WEB TOKEN来弥补其中的缺点。</p></blockquote><ul><li><strong>服务端性能消耗</strong> 每次与用户建立会话之后，都会在服务端保存该信息，例如：PHP Session是保存在文件中，而Java Session则是保存在内存中，随着用户量的提升，会大量占用服务器的资源。</li><li><strong>限制了分布式部署</strong> 当服务器处于分布式环境下，Session共享问题便随之而出，因此需要单独的服务器资源来解决Session共享问题。</li><li><strong>与Restful API的stateless冲突</strong> Restful思想正在逐步推广，而Session则引入了新的“状态”，与Restful思想矛盾。</li><li><strong>不方便移动APP的开发</strong> 使用Session验证方式，限制了原生Android，IOS APP的数据交互。</li><li><strong>XSS</strong> Session的提交方式，是将Session信息存储在Cookie中，提交到服务器端，因此很容易被客户端注入的javascript代码，截获Cookie信息。</li><li><strong>XSRF</strong>  基于Session的验证方式，有可能会被跨站请求伪造。</li></ul><h1 id="JSON-WEB-TOKEN"><a href="#JSON-WEB-TOKEN" class="headerlink" title="JSON WEB TOKEN"></a>JSON WEB TOKEN</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>JWT包含3部分数据信息，使用”.”分割，格式示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hhhhhhh.pppppp.sssss</div></pre></td></tr></table></figure></p><p>三部分信息分别为：</p><p><code>Signature</code>: 签名</p><h3 id="Header-头信息"><a href="#Header-头信息" class="headerlink" title="Header 头信息"></a>Header 头信息</h3><p>Header中一般包含Token类型和哈希算法，例如:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"alg"</span>:<span class="string">"HS256"</span>,<span class="attr">"typ"</span>:<span class="string">"JWT"</span>&#125;</div></pre></td></tr></table></figure></p><h3 id="Payload-有效荷载"><a href="#Payload-有效荷载" class="headerlink" title="Payload 有效荷载"></a>Payload 有效荷载</h3><p>Payload中包含声明信息，例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"username"</span>: <span class="string">"admin"</span>,</div><div class="line">    <span class="string">"iat"</span>:<span class="number">1506320911</span>,  <span class="comment">// 创建时间</span></div><div class="line">    <span class="string">"exp"</span>:<span class="number">1506324511</span>  <span class="comment">// 过期时间</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong> Payload和Header中的信息是BASE64编码，不是加密，因此不要再payload中添加敏感信息</p></blockquote><h3 id="Signature-签名"><a href="#Signature-签名" class="headerlink" title="Signature 签名"></a>Signature 签名</h3><p>签名用来校验JWT的发送方属实，以及确认消息在传递途中没有被更改。<br>例如，使用HS256算法，签名将采用如下方式创建：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HS256(</div><div class="line">    base64UrlEncode(header) + <span class="string">"."</span> + </div><div class="line">    base64UrlEncode(payload), </div><div class="line">    secret)</div></pre></td></tr></table></figure></p><p>这里对于jwt的介绍只是简单介绍，详细关于JWT的信息可以参阅<a href="http://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="external">[2]</a>,<a href="https://github.com/smilingsun/blog/issues/1" target="_blank" rel="external">[3]</a>这两篇文章。</p><h2 id="JWT的优点"><a href="#JWT的优点" class="headerlink" title="JWT的优点"></a>JWT的优点</h2><ul><li><strong>可以实现跨域请求</strong> 因为JWT不依赖于Cookie，它可以添加在请求的<code>Header</code>,<code>body</code>,<code>参数</code>中，因此只要服务器允许跨域请求，那么带有授权Token的客户端，可以任意访问不同服务器下的服务，因此，非常适合SSO单点登录系统。</li><li><strong>减少服务器消耗</strong> 服务器在生成Token之后，就将Token返回给客户端，客户端保存Token用于下次请求。服务端不进行储存Token，只验证Token，减少了服务器的消耗。同时，带有Token的请求在请求不同服务时，不用考虑是与哪台服务器生成的Session问题，非常适用于云服务。</li><li><strong>通用性</strong> 因为JSON的通用性，所以JWT可以在Nodejs，JAVA，PHP等不同平台使用。</li></ul><h2 id="JWT示意图"><a href="#JWT示意图" class="headerlink" title="JWT示意图"></a>JWT示意图</h2><img src="http://www.plantuml.com/plantuml/svg/IqmkoIzIU3vbnREExLosjWel-hO_xPyMaf-TcgTWQyi5aL3GjLDuDgVtQTV2fpDNM2aydxdxwTwfN70HDEcNgtfUh6-4A7goV-6pnlKmOsnqaTMzs3_bwUnvOAkWolBoIr8LSbBJIgmKdkoV-tJj3B1aJDxJZWtFvgnvEcS3o8LFzku76eVVXKztB7koemkivlqUe6ksFzlOv1ZWIS39OFNutFfiwePdlUi0"><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><ul><li>Payload中的内容是BASE64编码，如果需要，可以在编码前，对内容进行加密</li><li>生成签名的密钥除了妥善保存之外，可以使用<strong>动态密钥</strong>，在启动服务时生成密钥，这样就不会被轻易获取</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="http://lion1ou.win/2017/01/18/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">前后端分离之JWT用户认证</a></p><p>[2] <a href="http://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="external">什么是 JWT – JSON WEB TOKEN</a></p><p>[3] <a href="https://github.com/smilingsun/blog/issues/1" target="_blank" rel="external">适用于前后端分离的下一代认证机制 —— JSON Web Token</a></p><p>[4] <a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=XDJS201616018" target="_blank" rel="external">基于JSON Web Token的无状态账户系统的设计</a></p><p>[5] <a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=SZJT201602087" target="_blank" rel="external">JWT认证技术及其在WEB中的应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/blog/software-720x380.jpg&quot; alt=&quot;安全&quot;&gt;&lt;/p&gt;
&lt;p&gt;随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jwt" scheme="http://www.thisjs.com/tags/jwt/"/>
    
      <category term="前端" scheme="http://www.thisjs.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一个前端眼中的斐波那契数列</title>
    <link href="http://www.thisjs.com/2017/09/21/my-view-of-fibonacci/"/>
    <id>http://www.thisjs.com/2017/09/21/my-view-of-fibonacci/</id>
    <published>2017-09-21T07:29:01.000Z</published>
    <updated>2017-09-21T13:54:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/blog/fibonacci.jpeg" alt="斐波那契数字游戏"></p><p>大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。</p><a id="more"></a><p>现在，成为一名前端工程师之后，再看这个问题，要考虑的情况，也变得更广泛了，可以用的方法也更多了。所以现在希望应用自己了解的知识，再计算一次斐波那契数列。</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/blog/46c741e0cab6469d7e1c54bc054947c9_b.jpg" alt="格式"></p><p>首先，斐波那契数列从第0个开始，分别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</div></pre></td></tr></table></figure></p><p>因此要根据该规则，返回第n个斐波那契数</p><h1 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h1><p>首先，先把之前的递归方法再再再实现一遍。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">0</span> ) <span class="keyword">return</span> n;</div><div class="line">    <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>递归的思路很简单，即不断调用自身方法，直到n为1或0之后，开始一层层返回数据。</p><p>使用递归计算大数字时，性能会特别低，原因有以下2点：</p><p>① 在递归过程中，每创建一个新函数，解释器都会创建一个新的函数栈帧，并且压在当前函数的栈帧上，这就形成了调用栈。因而，当递归层数过大之后，就可能造成调用栈占用内存过大或者溢出。</p><p>另外，我们在return前加入以下语句，打印一下递归的计算过程。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">`fibonacci(<span class="subst">$&#123;n<span class="number">-1</span>&#125;</span>) + fibonacci(<span class="subst">$&#123;n<span class="number">-2</span>&#125;</span>)`</span>)</div></pre></td></tr></table></figure></p><p>当，n为6时，得到的结果为<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fibonacci(<span class="number">5</span>) + fibonacci(<span class="number">4</span>)</div><div class="line">fibonacci(<span class="number">4</span>) + fibonacci(<span class="number">3</span>)</div><div class="line">fibonacci(<span class="number">3</span>) + fibonacci(<span class="number">2</span>)</div><div class="line">fibonacci(<span class="number">2</span>) + fibonacci(<span class="number">1</span>)</div><div class="line">fibonacci(<span class="number">1</span>) + fibonacci(<span class="number">0</span>)</div><div class="line">fibonacci(<span class="number">1</span>) + fibonacci(<span class="number">0</span>)</div><div class="line">fibonacci(<span class="number">2</span>) + fibonacci(<span class="number">1</span>)</div><div class="line">fibonacci(<span class="number">1</span>) + fibonacci(<span class="number">0</span>)</div><div class="line">fibonacci(<span class="number">3</span>) + fibonacci(<span class="number">2</span>)</div><div class="line">fibonacci(<span class="number">2</span>) + fibonacci(<span class="number">1</span>)</div><div class="line">fibonacci(<span class="number">1</span>) + fibonacci(<span class="number">0</span>)</div><div class="line">fibonacci(<span class="number">1</span>) + fibonacci(<span class="number">0</span>)</div></pre></td></tr></table></figure></p><p>② 分析可以发现，递归造成了大量的重复计算。</p><p>递归的以上两种缺点，我们可以使用<strong>尾调用优化</strong>和<strong>递推法</strong>来解决。</p><h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>首先，什么是尾调用。</p><blockquote><p><strong>尾调用</strong>是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。WikiPad<a href="https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8" target="_blank" rel="external">[1]</a></p></blockquote><p>用代码来说，就是B函数的返回值被A函数返回了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> B();  <span class="comment">// return 1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>什么时候会执行尾调用优化呢？</p><p>在ES6中，strict模式下，满足以下条件，尾调用优化会开启，此时引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用：<a href="http://www.cnblogs.com/xfshen/p/6001581.html" target="_blank" rel="external">[2]</a></p><ol><li><p>尾调用函数不需要访问当前栈帧中的变量</p></li><li><p>尾调用返回后，函数没有语句需要继续执行</p></li><li><p>尾调用的结果就是函数的返回值</p></li></ol><p>举例说明：</p><p>以下函数即可开启尾调用优化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> doB();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以下函数无法开启尾调用优化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doC</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    doD();  <span class="comment">// 尾调用的结果不是函数的返回值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doE</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + doF(); <span class="comment">// 尾调用返回后，函数仍然有语句要运行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们使用尾调用优化，重写函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n, current, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> next;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>, next, current + next);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们可以使用如下方法调用该函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fibonacci(<span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure></p><p>这时，在执行该函数时，由于<code>引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用</code>，就不会出现内存占用过大的情况了。</p><p>得益于ES2015的<code>默认参数</code>特性，我们可以将以上函数改写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n, current = <span class="number">0</span>, next = <span class="number">1</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> next;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>, next, current + next);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样在调用时，只需要传递一个参数即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fibonacci(<span class="number">6</span>);</div></pre></td></tr></table></figure></p><p>这时，我们在return语句之前，打印其调用过程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">`fibonacci(<span class="subst">$&#123;n&#125;</span>, <span class="subst">$&#123;next&#125;</span>, <span class="subst">$&#123;current + next&#125;</span>)`</span>);</div></pre></td></tr></table></figure></p><p>会发现调用过程大大减少<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fibonacci(6, 1, 1)</div><div class="line">fibonacci(5, 1, 2)</div><div class="line">fibonacci(4, 2, 3)</div><div class="line">fibonacci(3, 3, 5)</div><div class="line">fibonacci(2, 5, 8)</div></pre></td></tr></table></figure></p><blockquote><p><strong>注意:</strong> 在ES 2015中，只有在strict模式下，才会开启尾调用优化</p></blockquote><h1 id="递推法"><a href="#递推法" class="headerlink" title="递推法"></a>递推法</h1><p>递推法的思路非常符合计算思路，即，f(0)开始，一个个计算下去，直到加到我们需要的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> aFi = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>);</div><div class="line">    aFi[<span class="number">0</span>] = <span class="number">0</span>; aFi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>; i&lt;= n; i++)&#123;</div><div class="line">        aFi[i] = aFi[i<span class="number">-1</span>] + aFi[i<span class="number">-2</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> aFi[n];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里我们定义了一个数组来容纳<strong>所有</strong>的计算结果，但是实际上，我们仅仅需要<code>f(n-1)</code>和<code>f(n-2)</code>两个值，因此我们可以用两个变量存储这两个值来减少内存开销。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> next = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> temp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        temp = current;</div><div class="line">        current = next;</div><div class="line">        next += temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>基于此思路，我们对此使用不同的方法进行改写。</p><h2 id="变种一-ES2015-结构赋值法"><a href="#变种一-ES2015-结构赋值法" class="headerlink" title="变种一 ES2015 结构赋值法"></a>变种一 ES2015 结构赋值法</h2><p>结构赋值<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">[3]</a>允许我们将值直接从数组中提取到不同变量中。因此我们可以用结构赋值，省略temp中间变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> next = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        [current, next] = [next, current + next];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="变种二-while的–-gt-形式"><a href="#变种二-while的–-gt-形式" class="headerlink" title="变种二 while的–&gt;形式"></a>变种二 while的–&gt;形式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> next = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n --&gt; <span class="number">0</span>)&#123;</div><div class="line">        [current, next] = [next, current + next];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里的<code>--&gt;</code>并不是limit运算符，这只是两个操作符的缩写。即–和&gt;。</p><p>这里的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(n --&gt; <span class="number">0</span>)&#123;&#125;</div></pre></td></tr></table></figure></p><p>可以改写为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;n--&#125;</div></pre></td></tr></table></figure></p><p>这里解释一下为什么是这样。</p><p>n先进行–操作，n自身的值变为n-1。</p><p>然后使用n–的<strong>返回值</strong>与0进行比较大小，而<strong>n–的返回值是n</strong>。</p><p>所以，只要<code>n&gt;0</code>，那么就会执行<code>n--</code></p><h2 id="变种三-高级函数"><a href="#变种三-高级函数" class="headerlink" title="变种三 高级函数"></a>变种三 高级函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line"><span class="keyword">let</span> seed = <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> [...Array(n)].reduce(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</div><div class="line"><span class="keyword">const</span> temp = p + seed; </div><div class="line">seed = p;</div><div class="line"><span class="keyword">return</span> temp;</div><div class="line">&#125;,<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里利用Reduce高级函数<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">[5]</a>的特性，第一个参数为上一次计算的值，因此这里的pp保存F(n-1)值，而seed则保存F(n-2)的值。</p><h2 id="变种四-Generator生成器"><a href="#变种四-Generator生成器" class="headerlink" title="变种四 Generator生成器"></a>变种四 Generator生成器</h2><p><br>Generator是ES2015的新特性，得益于该特性，我们可以使用生成器方法，制作一个斐波那契数列生成器。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> next = <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> current;</div><div class="line">    <span class="keyword">yield</span> next;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        [current, next] = [next, current + next];</div><div class="line">        <span class="keyword">yield</span> next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用方法即<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fibo = fibonacci();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; <span class="number">10</span>;i ++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(fibo.next().value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>但是这一个生成器并不是可以生成指定n的函数，详细实现方法，以及可能遇到的坑可以参阅这篇文章<a href="http://www.zcfy.cc/article/473" target="_blank" rel="external">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a>。</p><h1 id="通项公式法"><a href="#通项公式法" class="headerlink" title="通项公式法"></a>通项公式法</h1><p><img src="http://o93mwnwp7.bkt.clouddn.com/blog/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg" alt="通项公式"></p><p>斐波那契的通项公式证明，可以参阅<a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="external">百度百科</a>。比照该公式，可以实现如下代码<a href="https://segmentfault.com/a/1190000007115162" target="_blank" rel="external">[8]</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> SQRT_FIVE = <span class="built_in">Math</span>.sqrt(<span class="number">5</span>);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="number">1</span>/SQRT_FIVE * (<span class="built_in">Math</span>.pow(<span class="number">0.5</span> + SQRT_FIVE/<span class="number">2</span>, n) - <span class="built_in">Math</span>.pow(<span class="number">0.5</span> - SQRT_FIVE/<span class="number">2</span>, n)));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上，便是我当前学习到的解决方案。如果你有更好的解决方案，或者对一些方法有异议，也希望可以在评论区不吝赐教。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8" target="_blank" rel="external">尾调用 - 维基百科，自由的百科全书</a></p><p>[2] <a href="http://www.cnblogs.com/xfshen/p/6001581.html" target="_blank" rel="external">《理解 ES6》阅读整理：函数（Functions）（八）Tail Call Optimization</a></p><p>[3] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">解构赋值 - JavaScript | MDN</a></p><p>[4] <a href="https://www.zhihu.com/question/65662523/answer/233405655" target="_blank" rel="external">关于–&gt;的运算顺序问题</a></p><p>[5] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">Array.prototype.reduce() - JavaScript | MDN</a></p><p>[6] <a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="external">斐波那契数列_百度百科</a></p><p>[7] <a href="http://www.zcfy.cc/article/473" target="_blank" rel="external">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a></p><p>[8] <a href="https://segmentfault.com/a/1190000007115162" target="_blank" rel="external">斐波那契数列求和的js方案以及优化</a></p><p>[9] <a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="external">尾调用优化 - 阮一峰的网络日志</a></p><p>[10] <a href="http://www.cnblogs.com/myoleole/archive/2012/12/01/2797709.html" target="_blank" rel="external">斐波那契数列算法优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/blog/fibonacci.jpeg&quot; alt=&quot;斐波那契数字游戏&quot;&gt;&lt;/p&gt;
&lt;p&gt;大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://www.thisjs.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>探索无头浏览器的应用场景</title>
    <link href="http://www.thisjs.com/2017/09/16/explore-the-headless-browser-application-scenario/"/>
    <id>http://www.thisjs.com/2017/09/16/explore-the-headless-browser-application-scenario/</id>
    <published>2017-09-16T02:27:09.000Z</published>
    <updated>2017-09-18T06:00:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/blog/automateexpenses.jpg" alt="自动化操作"></p><p><a href="https://en.wikipedia.org/wiki/Headless_browser" target="_blank" rel="external">Headless browser</a>会带给我非常亲切的感觉，因为总能让我回想起<a href="http://www.anjian.com/" target="_blank" rel="external">按键精灵</a>和<a href="https://www.autohotkey.com/" target="_blank" rel="external">AutoHotKey</a>这两款非常实用的小工具。</p><a id="more"></a><p>能有这样的感觉，大概是因为它们都操作基于用户界面，但是在运行时，可以让用户忽略用户界面吧。</p><p>无头浏览器有哪些实用的使用场景呢？</p><h1 id="1-自动化E2E测试"><a href="#1-自动化E2E测试" class="headerlink" title="1. 自动化E2E测试"></a>1. 自动化E2E测试</h1><p>常用的E2E测试工具如<code>nightwatch</code>,<code>Karma</code>，都支持无头浏览器，这样在测试时，无需打开UI界面，即可完成对应的测试内容。</p><h1 id="2-解决登录问题"><a href="#2-解决登录问题" class="headerlink" title="2. 解决登录问题"></a>2. 解决登录问题</h1><p>在使用一些网站API时，会遇到一些网站需要先登录的情况。</p><p>标准的网站，允许使用Post方法发送用户名及密码，返回对应的Token，之后的请求即可使用该Token，这时候我们可以直接使用<a href="https://www.npmjs.com/package/request" target="_blank" rel="external">Request</a>包即可。</p><p>但是遇到一些网站，并没有对外开放API接口，每次请求数据是通过登录后的Cookis进行判断。这时候我们也可以使用Request,截取<code>Set-Cookie</code> 头部信息即可。</p><p>但是，还有一些网站，在登录时候，需要添加服务器发送给客户端的安全码，这个时候如果单单使用<code>Request</code>就有些费力了。<br><img src="http://o93mwnwp7.bkt.clouddn.com/random.png" alt="识别码"></p><p>这时，使用无头浏览器可以很好的解决这个问题，这里使用Google Chrome的<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a>编写例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</div><div class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</div><div class="line">    <span class="keyword">await</span> page.goto(<span class="string">'http://youruri/api?redirect=anotheruri'</span>);  <span class="comment">// 进入对应的登录页面</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 这里测试的页面用户名input为autofocus属性</span></div><div class="line"><span class="comment">     * 不同页面可以使用选择器</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">await</span> page.type(<span class="string">'username'</span>);</div><div class="line">    <span class="keyword">await</span> page.press(<span class="string">'Tab'</span>);</div><div class="line">    <span class="keyword">await</span> page.type(<span class="string">'password'</span>);</div><div class="line">    <span class="keyword">await</span> page.press(<span class="string">'Enter'</span>);</div><div class="line">    page.on(<span class="string">'response'</span>, res =&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(res.hasOwnProperty(<span class="string">'headers'</span>))&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> res.headers)&#123;</div><div class="line">                <span class="keyword">if</span>(key === <span class="string">'set-cookie'</span>)&#123;</div><div class="line">                   <span class="comment">// 在这里进行获取Cookie信息操作</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">await</span> page.waitForNavigation();</div><div class="line">    browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>简单几步，就可以获取到对应的Cookie信息，将该Cookie信息保存起来，就可以在其他请求中使用了。</p><h1 id="3-网络爬虫"><a href="#3-网络爬虫" class="headerlink" title="3. 网络爬虫"></a>3. 网络爬虫</h1><p>在爬取一些网页时，对于普通的网页，我们可以直接使用Request, 发送GET请求，获取页面内容，然后进行分析，获取其中的数据。</p><p>但是这里有一个缺陷，即我们只能获取到网页的HTML内容，无法获取到页面XHR获取到的内容，即我们无法执行页面的JS。<br>这就导致我们无法获取那些动态加载的数据，甚至大部分单页面APP。</p><p>这时无头浏览器的作用就非常明显了，无头浏览器即没有用户界面的浏览器，浏览器功能全部存在，因此执行JS也不在话下。</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>我们使用Request，get请求知乎某用户的关注列表<a href="https://www.zhihu.com/people/zhang-shu-yuan-18/following" target="_blank" rel="external">https://www.zhihu.com/people/zhang-shu-yuan-18/following</a>,然后使用<a href="https://www.npmjs.com/package/cheerio" target="_blank" rel="external">Cheerio</a>获取关注的用户名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"></div><div class="line">request.get(<span class="string">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>, (error, res, body) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> $ = cheerio.load(body);</div><div class="line">    $(<span class="string">'.UserLink-link'</span>).each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log($(item).text());</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>会发现只有三个结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">柳佳</div><div class="line">李沫霖</div><div class="line">Jim Liu</div></pre></td></tr></table></figure></p><p>这是因为剩余的内容需要Ajax加载，这时，我们使用<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a>进行获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</div><div class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</div><div class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</div><div class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>);</div><div class="line">    <span class="keyword">let</span> pageContent =<span class="keyword">await</span> page.content();</div><div class="line">    <span class="keyword">const</span> $ = cheerio.load(pageContent);</div><div class="line">    $(<span class="string">'.UserLink-link'</span>).each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log($(item).text());</div><div class="line">    &#125;)</div><div class="line">    browser.close();</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>这时，一整页的数据全部加在进来了，打印<code>$(&#39;.UserLink-link&#39;).length</code>会发现有40条数据。</p><blockquote><p>当然，如果找到了该页面加载用户的API，直接使用该API请求数据是最方便的了</p></blockquote><h1 id="4-SSR服务端渲染"><a href="#4-SSR服务端渲染" class="headerlink" title="4. SSR服务端渲染"></a>4. SSR服务端渲染</h1><p>由于有些搜索引擎在抓取页面的时候，并不执行页面里的JS，因此会导致很多单页面APP的内容无法被搜索引擎更好的收录。</p><p>这时，可以使用无头浏览器，做服务端渲染。在判断访问来路为<code>XXX-spider</code>之后，将页面内容，在服务端使用无头浏览器执行一遍，将执行后的HTML内容，返回给搜索引擎，这样搜索引擎就可以获取到执行JS后的内容了。</p><blockquote><p>最后，这里收集了一些常用的无头浏览器</p></blockquote><ul><li><a href="http://phantomjs.org/" target="_blank" rel="external">Phantomjs</a> Webkit内核的无头浏览器，广泛应用于E2E测试</li><li><a href="https://slimerjs.org/" target="_blank" rel="external">SlimerJS</a> 类似Phantomjs，使用Gecko内核</li><li><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a> Google Chrome团队推出的，可以直接在node中使用</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions" target="_blank" rel="external">Headless Browser and scraping</a></li><li><a href="http://www.infoq.com/cn/news/2014/02/nightwatch" target="_blank" rel="external">使用Nightwatch进行端到端测试</a></li><li><a href="http://python.jobbole.com/86415/" target="_blank" rel="external">运用phantomjs无头浏览器破解四种反爬虫技术</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/blog/automateexpenses.jpg&quot; alt=&quot;自动化操作&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Headless browser&lt;/a&gt;会带给我非常亲切的感觉，因为总能让我回想起&lt;a href=&quot;http://www.anjian.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;按键精灵&lt;/a&gt;和&lt;a href=&quot;https://www.autohotkey.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoHotKey&lt;/a&gt;这两款非常实用的小工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="无头浏览器" scheme="http://www.thisjs.com/tags/%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="爬虫" scheme="http://www.thisjs.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>移动应用展示收纳效果</title>
    <link href="http://www.thisjs.com/2017/04/24/mobile-app-showcase-effect/"/>
    <id>http://www.thisjs.com/2017/04/24/mobile-app-showcase-effect/</id>
    <published>2017-04-24T08:51:55.000Z</published>
    <updated>2017-07-10T08:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/demo/phone/appshowcase.png" alt="手机展示效果" title="手机展示效果"></p><p>最近在阅读<a href="(https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)">Codrops</a>时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。</p><a id="more"></a><p>整体思路不是很复杂，即旋转整体，展示图片</p><p>主要用到的CSS3属性有</p><ul><li><a href="(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective)">perspective</a>  // 这是为了让手机旋转的时候，有3D效果</li><li><a href="(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin)">perspective-origin</a>  // 设置观察消失点</li><li>transition // 设置过渡效果</li><li>transform  // 变换</li></ul><h2 id="整个手机设备的transform效果"><a href="#整个手机设备的transform效果" class="headerlink" title="整个手机设备的transform效果"></a>整个手机设备的transform效果</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform: rotateY(50deg) rotateX(20deg) translateZ(-$dv-height/2 + $depth);</div></pre></td></tr></table></figure><h2 id="宣传图像的变换效果"><a href="#宣传图像的变换效果" class="headerlink" title="宣传图像的变换效果"></a>宣传图像的变换效果</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> $i from <span class="number">1</span> through <span class="number">5</span> &#123;</div><div class="line">.expand-view .page-#&#123;$i&#125; &#123;</div><div class="line">transform: translateZ($depth/2 + $screengap * $i);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="为图像添加鼠标滑过效果"><a href="#为图像添加鼠标滑过效果" class="headerlink" title="为图像添加鼠标滑过效果"></a>为图像添加鼠标滑过效果</h2><blockquote><p>在页面展开之后，鼠标滑过每个图层，其他图层透明度为0.1</p></blockquote><ol><li>获取鼠标滑过的图层的兄弟节点，设置他们的style</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> child !== el;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ol><li>为鼠标滑过的图层添加<code>active</code> Class，通过css :not()选择器，选择非<code>.active</code> Class的元素，设置他们的透明度</li></ol><p>这里采用的是<strong>第二种</strong>方法。</p><h2 id="最终效果预览"><a href="#最终效果预览" class="headerlink" title="最终效果预览"></a>最终效果预览</h2><script async src="//jsrun.net/YxkKp/embed/all/light/"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/demo/phone/appshowcase.png&quot; alt=&quot;手机展示效果&quot; title=&quot;手机展示效果&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在阅读&lt;a href=&quot;(https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)&quot;&gt;Codrops&lt;/a&gt;时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css3" scheme="http://www.thisjs.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>OS X中使用brew管理多个node版本</title>
    <link href="http://www.thisjs.com/2017/04/18/osx-using-the-brew-to-manage-multiple-node-version/"/>
    <id>http://www.thisjs.com/2017/04/18/osx-using-the-brew-to-manage-multiple-node-version/</id>
    <published>2017-04-18T13:58:16.000Z</published>
    <updated>2017-04-19T09:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/thisjs/nodejs_header-03e90275ca.svg" width="1050" alt="node list" align="center"></p><p>在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的<a href="https://github.com/creationix/nvm" target="_blank" rel="external"><strong>NVM</strong>(Node Version Manager)</a>可以帮助我们很好的进行版本管理。</p><p>在OS X系统中，<strong>HomeBrew</strong>也是一个很方便的Node版本切换工具。</p><p>以下是使用HomeBrew管理Node的一些操作</p><a id="more"></a><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew search node</div></pre></td></tr></table></figure><p>即可看到当前可用的版本</p><p> <img src="http://o93mwnwp7.bkt.clouddn.com/thisjs/brew%20list.png" width="680" alt="node list" align="center"></p><h2 id="安装需要版本"><a href="#安装需要版本" class="headerlink" title="安装需要版本"></a>安装需要版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node@6</div></pre></td></tr></table></figure><p>如果需要6.x.x中最新版本，可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node6-lts</div></pre></td></tr></table></figure><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><ul><li>首先取消当前版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew unlink node</div></pre></td></tr></table></figure><ul><li>切换到需要的版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew link node@6 [--force]</div></pre></td></tr></table></figure><blockquote><p>注意：在切换版本的时候，可能会需要用到 –force命令，强制执行。</p></blockquote><p>在切换版本时，可能会有一些文件需要删除，注意提示内容，执行即可</p><p><strong>例如：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm <span class="string">'/usr/local/include/node/pthread-fixes.h'</span></div></pre></td></tr></table></figure><h2 id="检查切换是否成功"><a href="#检查切换是否成功" class="headerlink" title="检查切换是否成功"></a>检查切换是否成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure><h2 id="添加Path"><a href="#添加Path" class="headerlink" title="添加Path"></a>添加Path</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">which</span> node <span class="comment"># =&gt; /usr/local/bin/node</span></div><div class="line">$ <span class="built_in">export</span> NODE_PATH=<span class="string">'/usr/local/lib/node_modules'</span> <span class="comment"># &lt;--- add this ~/.bashrc</span></div></pre></td></tr></table></figure><h2 id="删除所有Node"><a href="#删除所有Node" class="headerlink" title="删除所有Node"></a>删除所有Node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew uninstall node</div><div class="line"><span class="comment"># 或者 `brew uninstall --force node` 移除所有版本</span></div><div class="line">$ brew prune</div><div class="line">$ rm -f /usr/<span class="built_in">local</span>/bin/npm /usr/<span class="built_in">local</span>/lib/dtrace/node.d</div><div class="line">$ rm -rf ~/.npm</div></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>出现这个问题是在安装Yarn的时候遇到的。在使用<code>HomeBrew</code>安装<code>Yarn</code>的时候，需要<code>brew link node</code>，但是link之后的版本是最新的7.9。</p><p>本来新版本的Node带来了更多的特性，然而在使用<code>ng-cli</code>生成的项目中，打包的时候，<code>node-sass</code>一直出问题，因此需要工具来管理Node版本，固有此总结。</p><p>同时，Yarn也是一个很方便的包管理器，推荐在安装包时尝试一下<code>Yarn</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://github.com/yarnpkg/yarn/issues/1505" target="_blank" rel="external"><code>brew link node</code> required for Yarn install #1505</a></p><p><a href="http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x" target="_blank" rel="external">How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)</a></p><p><a href="https://apple.stackexchange.com/questions/171530/how-do-i-downgrade-node-or-install-a-specific-previous-version-using-homebrew" target="_blank" rel="external">How do I downgrade node or install a specific previous version using homebrew?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/thisjs/nodejs_header-03e90275ca.svg&quot; width=&quot;1050&quot; alt=&quot;node list&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;NVM&lt;/strong&gt;(Node Version Manager)&lt;/a&gt;可以帮助我们很好的进行版本管理。&lt;/p&gt;
&lt;p&gt;在OS X系统中，&lt;strong&gt;HomeBrew&lt;/strong&gt;也是一个很方便的Node版本切换工具。&lt;/p&gt;
&lt;p&gt;以下是使用HomeBrew管理Node的一些操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://www.thisjs.com/tags/node/"/>
    
      <category term="osx" scheme="http://www.thisjs.com/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>前端命令行工具代理设置</title>
    <link href="http://www.thisjs.com/2017/04/17/the-front-command-line-tools-proxy-settings/"/>
    <id>http://www.thisjs.com/2017/04/17/the-front-command-line-tools-proxy-settings/</id>
    <published>2017-04-17T06:39:18.000Z</published>
    <updated>2018-05-08T00:42:59.354Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png" alt="npm"></p><p>在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：</p><ul><li>使用国内镜像</li><li>设置代理</li><li>本地安装</li></ul><a id="more"></a><h1 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h1><p>使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><blockquote><p>使用淘宝镜像 <code>https://registry.npm.taobao.org</code></p></blockquote><p>安装时启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install  --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>设置全局镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry &lt; registry url &gt;</div></pre></td></tr></table></figure><blockquote><p><a href="http://npm.taobao.org/" target="_blank" rel="external">使用CNPM</a></p></blockquote><p>cnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。</p><h2 id="Gem"><a href="#Gem" class="headerlink" title="Gem"></a>Gem</h2><blockquote><p>使用<a href="http://gems.ruby-china.org/" target="_blank" rel="external">Ruby-China</a></p></blockquote><p>设置镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div></pre></td></tr></table></figure><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>设置代理需要有代理服务，保证可以访问到对应的地址</p><h2 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h2><p>设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> proxy http://server:port</div><div class="line">npm config <span class="built_in">set</span> https-proxy http://server:port</div></pre></td></tr></table></figure><p>取消代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config delete proxy</div><div class="line">npm config delete https-proxy</div></pre></td></tr></table></figure><p>查看代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config list</div></pre></td></tr></table></figure><p>如果代理不支持https，修改npm存放package的网站地址为非https地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config <span class="built_in">set</span> registry <span class="string">"http://registry.npmjs.org/"</span></div></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global http.proxy http://server:port</div><div class="line"></div><div class="line">$ git config --global https.proxy http://server:port</div></pre></td></tr></table></figure><p>删除代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global --<span class="built_in">unset</span> http.proxy</div><div class="line">git config --global --<span class="built_in">unset</span> https.proxy</div></pre></td></tr></table></figure><p>查看代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global --get http.proxy</div><div class="line">git config --global --get https.proxy</div></pre></td></tr></table></figure><h2 id="Gem-1"><a href="#Gem-1" class="headerlink" title="Gem"></a>Gem</h2><p>设置代理</p><blockquote><p>安装时加上 –http-proxy 参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install --http-proxy http://proxy:port sass</div></pre></td></tr></table></figure><h2 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h2><p>设置代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 修改 .bowerrc 文件(如无则新增):</div><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;proxy&quot;: &quot;http://proxy:port&quot;,</div><div class="line">    &quot;https-proxy&quot;: &quot;http://proxy:port&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="apm"><a href="#apm" class="headerlink" title="apm"></a>apm</h2><p>apm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置</p><p>设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apm config <span class="built_in">set</span> https-proxy https://server:port</div></pre></td></tr></table></figure><p>查看设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apm config list</div></pre></td></tr></table></figure><h2 id="设置命令行代理"><a href="#设置命令行代理" class="headerlink" title="设置命令行代理"></a>设置命令行代理</h2><blockquote><p>可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理</p></blockquote><ul><li><strong>windows</strong></li></ul><p>这种设置只对本命令行窗口启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> http_proxy=http://proxy:port</div><div class="line"></div><div class="line"><span class="comment"># 用户名密码则输入</span></div><div class="line"><span class="built_in">set</span> http_proxy_user=&lt; username &gt;</div><div class="line"><span class="built_in">set</span> http_proxy_pass=&lt; password &gt;</div></pre></td></tr></table></figure><ul><li><strong>OS X</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo networksetup -setwebproxy <span class="string">"Ethernet"</span> http://proxy port</div></pre></td></tr></table></figure><h1 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h1><h2 id="NPM-2"><a href="#NPM-2" class="headerlink" title="NPM"></a>NPM</h2><blockquote><p>对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装</p></blockquote><h2 id="Gem-2"><a href="#Gem-2" class="headerlink" title="Gem"></a>Gem</h2><ol><li>首先通过(rubygems)[<a href="https://rubygems.org/" target="_blank" rel="external">https://rubygems.org/</a>] 下载对应的包</li><li>通过本地安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install --<span class="built_in">local</span> sass.gem</div></pre></td></tr></table></figure><h1 id="关于OS-X的代理"><a href="#关于OS-X的代理" class="headerlink" title="关于OS X的代理"></a>关于OS X的代理</h1><p>OS X上有很多其他的下载需要代理，那么我们可以使用<code>Proxychains</code> 配合 <code>shadowsocks</code> 实现每个命令都可以使用代理</p><ol><li>安装工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install proxychains-ng</div></pre></td></tr></table></figure><ol><li>设置 Proxychains 安装目录下的 <code>proxychains.conf</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/etc/proxychains.conf</div></pre></td></tr></table></figure><p>在<code>[ProxyList]</code>下加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socks5  127.0.0.1 1080</div></pre></td></tr></table></figure></p><ol><li>使用 <code>proxychains4</code> 为命令代理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">proxychains4 curl https://www.twitter.com/</div><div class="line">proxychains4 git push origin master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png&quot; alt=&quot;npm&quot;&gt;&lt;/p&gt;
&lt;p&gt;在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用国内镜像&lt;/li&gt;
&lt;li&gt;设置代理&lt;/li&gt;
&lt;li&gt;本地安装&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://www.thisjs.com/tags/node/"/>
    
      <category term="git" scheme="http://www.thisjs.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>实现一个URL中的中文路径英文化工具</title>
    <link href="http://www.thisjs.com/2017/03/21/realize-the-path-of-chinese-into-english/"/>
    <id>http://www.thisjs.com/2017/03/21/realize-the-path-of-chinese-into-english/</id>
    <published>2017-03-21T02:21:15.000Z</published>
    <updated>2017-04-19T09:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500" alt="题图"></p><p>在使用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。</p><a id="more"></a><p>最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照<a href="http://www.w3cplus.com/" target="_blank" rel="external">W3CPlus</a>的命名方式</p><ul><li>对应英文翻译</li><li>所有字母小写</li><li>空格变为- </li></ul><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/en-demo.png" alt="W3C命名方式"></p><p>最初使用手动方式将文件名拷贝到<a href="http://translate.google.cn/" target="_blank" rel="external">谷歌翻译</a>，得到翻译结果之后，将翻译结果变为小写，将空格替换为”-“，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。</p><p>由于<code>Vue</code>的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用<a href="https://lodash.com/" target="_blank" rel="external">loadash</a>来进行数据处理</p><h3 id="所有字母小写"><a href="#所有字母小写" class="headerlink" title="所有字母小写"></a>所有字母小写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_.lowerCase(str)</div></pre></td></tr></table></figure><h3 id="空格变为"><a href="#空格变为" class="headerlink" title="空格变为-"></a>空格变为-</h3><p>使用正则表达式替换即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.replace(<span class="regexp">/\s+/g</span>, <span class="string">"-"</span>)</div></pre></td></tr></table></figure><p>但是这时候可能会出现一个问题，在字符串前后都有空格的时候<code>&quot; Hello World &quot;</code>，会生成<code>&quot;-hello-world-&quot;</code>,这不是我们需要的</p><p>所以在替换之前将首尾空格去掉即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_.trim(str)</div></pre></td></tr></table></figure><p>所以初版就是这样子的</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/first-result.png" alt="第一版功能"></p><h2 id="添加翻译、复制功能"><a href="#添加翻译、复制功能" class="headerlink" title="添加翻译、复制功能"></a>添加翻译、复制功能</h2><p>但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是<a href="http://fanyi.youdao.com/openapi" target="_blank" rel="external">有道翻译api</a>，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a>并不支持jsonp，所以采用<a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">vue-resource</a>。</p><img src="http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJS-sDZvVqSt55PQPMgwWQwSGdbYId95Qf62by6pgXcUzwvvDsVcqVmON5qmSgCGtjIGZFwKOgEJ5XkRdKrOycxRpsUQfN5mmSLsWccTpEbysJdw-V_UBzHD12Y5sWKtauaAHr4MO2BFpnVufJsVFGp8GsKweinRiURgd_sdFD1HLO4zOAJpTEFNvabqGXGfS0000"><p>但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供<strong>1000</strong>次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getTrans:_.debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">500</span>)</div></pre></td></tr></table></figure><p>最后使用<a href="https://clipboardjs.com/" target="_blank" rel="external">clipboardjs</a>为格式化的结果提供一个复制功能。这样就更加方便了。</p><script async src="//jsrun.net/yPkKp/embed/all/light/"></script><blockquote><p>但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500&quot; alt=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://www.thisjs.com/tags/vue/"/>
    
      <category term="lodash" scheme="http://www.thisjs.com/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>通过node搭建shadowsocks服务器</title>
    <link href="http://www.thisjs.com/2017/02/28/build-shadowsocks-server-through-the-node/"/>
    <id>http://www.thisjs.com/2017/02/28/build-shadowsocks-server-through-the-node/</id>
    <published>2017-02-28T09:14:14.000Z</published>
    <updated>2017-04-19T09:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/github/ss.png" alt="shadowsocks"></p><p>在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。</p><p>安装过程如下，服务器已经安装好node服务，并且可以使用<code>npm</code>命令</p><a id="more"></a><ol><li><p>全局安装shadowsocks模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g shadowsocks</div></pre></td></tr></table></figure></li><li><p>找到安装目录<code>C:\Users\Administrator\AppData\Roaming\npm\node_modules\shadowsocks</code>，编辑<code>config.json</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> &#123; </div><div class="line">    &quot;server&quot;:&quot;IP地址&quot;, </div><div class="line">    &quot;server_port&quot;:443, </div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, </div><div class="line">    &quot;local_port&quot;:1080, </div><div class="line">    &quot;password&quot;:&quot;密码&quot;, </div><div class="line">    &quot;timeout&quot;:600, </div><div class="line">    &quot;method&quot;:&quot;rc4-md5&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>启动服务，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/ss.png&quot; alt=&quot;shadowsocks&quot;&gt;&lt;/p&gt;
&lt;p&gt;在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。&lt;/p&gt;
&lt;p&gt;安装过程如下，服务器已经安装好node服务，并且可以使用&lt;code&gt;npm&lt;/code&gt;命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://www.thisjs.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>让vs2015忽略某个文件夹</title>
    <link href="http://www.thisjs.com/2017/02/24/let-vs-2015-ignore-a-folder/"/>
    <id>http://www.thisjs.com/2017/02/24/let-vs-2015-ignore-a-folder/</id>
    <published>2017-02-24T02:09:28.000Z</published>
    <updated>2017-04-19T09:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/thisjs/images.png" width="500" alt="Vs2015"></p><p>在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。<br>但是<code>node_modules</code>，<code>bower_components</code>的文件夹嵌套，会严重影响扫描的速度</p><a id="more"></a><p>暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/thisjs/images.png&quot; width=&quot;500&quot; alt=&quot;Vs2015&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。&lt;br&gt;但是&lt;code&gt;node_modules&lt;/code&gt;，&lt;code&gt;bower_components&lt;/code&gt;的文件夹嵌套，会严重影响扫描的速度&lt;/p&gt;
    
    </summary>
    
    
      <category term="vs2015" scheme="http://www.thisjs.com/tags/vs2015/"/>
    
      <category term="开发工具" scheme="http://www.thisjs.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>解决流式布局元素高度不统一导致布局不整齐问题</title>
    <link href="http://www.thisjs.com/2016/12/01/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy/"/>
    <id>http://www.thisjs.com/2016/12/01/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy/</id>
    <published>2016-12-01T09:47:19.000Z</published>
    <updated>2017-04-19T09:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png" alt="float"></p><a id="more"></a><p>这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long2.png" alt="float-succ"></p><p>所以一种常见的解决方案是</p><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/probwaterfull.png" alt="waterfull"></p><p>瀑布流的实现方法，网上已经有大量教程，详情参阅</p><p> <a href="http://www.jb51.net/article/34141.htm" target="_blank" rel="external">脚本之家—实现瀑布流</a></p><p> <a href="http://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/" target="_blank" rel="external">前端开发—瀑布流的实现方法</a></p><h2 id="将同一列设置为统一高度"><a href="#将同一列设置为统一高度" class="headerlink" title="将同一列设置为统一高度"></a>将同一列设置为统一高度</h2><p> 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。</p><p> <img src="http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long3.png" alt="float3"></p><p> 要实现该效果，只需如下几步</p><ol><li>获取所有元素</li><li>获取相同offsetTop值的元素，即同一行的元素</li><li>比较同一行元素的高度，取最大的height值，赋给每一个元素即可</li></ol><p>如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章</p><blockquote><p><a href="https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="external">解决无法获取ngRepeat生成元素样式的问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png&quot; alt=&quot;float&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>解决无法获取ngRepeat生成元素样式的问题</title>
    <link href="http://www.thisjs.com/2016/12/01/the-problem-of-unable-to-get-ng-repeat-generating-element-styles/"/>
    <id>http://www.thisjs.com/2016/12/01/the-problem-of-unable-to-get-ng-repeat-generating-element-styles/</id>
    <published>2016-12-01T07:44:08.000Z</published>
    <updated>2017-04-19T09:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png" alt="ng"></p><p>在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用<br><code>css()</code>、<code>getComputedStyle</code>、<code>offsetHeight</code>或者<code>clientHeight</code>都会获取到0，我们无法获取到元素的实际高度。</p><p>这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。</p><p>在Angular中，我们可以使用以下几种方法进行处理</p><a id="more"></a><h2 id="使用-watch方法来进行脏值检查"><a href="#使用-watch方法来进行脏值检查" class="headerlink" title="使用$watch方法来进行脏值检查"></a>使用$watch方法来进行脏值检查</h2><p>当元素信息发生改变之后，将最新的数据赋值给变量即可</p><p>例如：</p><p><strong>Directive</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myApp.directive(<span class="string">'heightBind'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    scope: &#123;</div><div class="line">      heightValue: <span class="string">'='</span></div><div class="line">    &#125;,</div><div class="line">    link: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $element</span>) </span>&#123;</div><div class="line">      $scope.$watch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.heightValue = $element.height();</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt; <span class="attr">div</span> <span class="attr">height-bind</span> <span class="attr">height-value</span>=<span class="string">"containerHeight"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="当然，也可以使用-apply来完成同样的事情"><a href="#当然，也可以使用-apply来完成同样的事情" class="headerlink" title="当然，也可以使用$apply来完成同样的事情"></a>当然，也可以使用<code>$apply</code>来完成同样的事情</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $scope.containerHeight = $(<span class="string">'#container'</span>).height()</div><div class="line">  $scope.$apply();</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure><h2 id="使用自带的脏值检查方法"><a href="#使用自带的脏值检查方法" class="headerlink" title="使用自带的脏值检查方法"></a>使用自带的脏值检查方法</h2><p>我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 获取元素信息</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p>参考资料 <a href="http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero" target="_blank" rel="external">http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png&quot; alt=&quot;ng&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用&lt;br&gt;&lt;code&gt;css()&lt;/code&gt;、&lt;code&gt;getComputedStyle&lt;/code&gt;、&lt;code&gt;offsetHeight&lt;/code&gt;或者&lt;code&gt;clientHeight&lt;/code&gt;都会获取到0，我们无法获取到元素的实际高度。&lt;/p&gt;
&lt;p&gt;这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。&lt;/p&gt;
&lt;p&gt;在Angular中，我们可以使用以下几种方法进行处理&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
      <category term="angular" scheme="http://www.thisjs.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular为绑定数据的变化添加动画</title>
    <link href="http://www.thisjs.com/2016/11/30/animate-angular-data-change/"/>
    <id>http://www.thisjs.com/2016/11/30/animate-angular-data-change/</id>
    <published>2016-11-30T08:07:07.000Z</published>
    <updated>2017-04-19T09:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif" alt="datachangge"></p><p>在angular中，我们可以使用ngAnimate来实现对应的效果</p><a id="more"></a><h2 id="以数据为CLASS，监听样式变化"><a href="#以数据为CLASS，监听样式变化" class="headerlink" title="以数据为CLASS，监听样式变化"></a>以数据为CLASS，监听样式变化</h2><p>在需要监听变化的数据前，加入一个以数据作为class名的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"my-example value-&#123;&#123;myValue&#125;&#125;"</span>&gt;</span>&#123;&#123;myValue&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p>这时，当数据发生变化之后，会自动添加<code>新数据-add</code>,<code>旧数据-remove</code>,<code>新数据-add-active</code>,<code>旧数据-remove-active</code>样式</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-type.png" alt="add"></p><p>这时，我们在SASS <em>(less)</em> 样式中，筛选包含<code>-add</code>的样式，为其添加变化中的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-class">.my-example</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">3px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#48a8d6</span>;</div><div class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span> linear <span class="number">0s</span>;</div><div class="line">    &amp;[class*="-add"] &#123;</div><div class="line">        <span class="selector-tag">background-color</span>: <span class="selector-id">#48a8d6</span>;</div><div class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFFF</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。</p><h2 id="使用ngAnimateSwap"><a href="#使用ngAnimateSwap" class="headerlink" title="使用ngAnimateSwap"></a>使用ngAnimateSwap</h2><p>在 <em>angular 1.5</em> 版本之后，可以使用ngAnimateSwap方法检测数据的变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-animate-swap</span>=<span class="string">"number"</span> <span class="attr">class</span>=<span class="string">"cell swap-animation"</span> <span class="attr">ng-class</span>=<span class="string">"colorClass(number)"</span>&gt;</span></div><div class="line">    &#123;&#123; number &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>详情参阅 <a href="https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap" target="_blank" rel="external">官方文档</a></p><h2 id="监听数据变化，发生变化添加样式"><a href="#监听数据变化，发生变化添加样式" class="headerlink" title="监听数据变化，发生变化添加样式"></a>监听数据变化，发生变化添加样式</h2><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">animate-on-change</span>=<span class="string">"someValue"</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>Directive</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myModule.directive(<span class="string">'animateOnChange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$timeout</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attr</span>) </span>&#123;</div><div class="line">    scope.$watch(attr.animateOnChange, <span class="function"><span class="keyword">function</span>(<span class="params">nv,ov</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (nv!=ov) &#123;</div><div class="line">        element.addClass(<span class="string">'changed'</span>);</div><div class="line">        $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          element.removeClass(<span class="string">'changed'</span>);</div><div class="line">        &#125;, <span class="number">1000</span>); <span class="comment">// Could be enhanced to take duration as a parameter</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[animate-on-change]</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-attr">[animate-on-change]</span><span class="selector-class">.changed</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">transition</span>: none;</div><div class="line">  <span class="attribute">-webkit-transition</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考资料： <a href="http://stackoverflow.com/a/25894670/4945494" target="_blank" rel="external">http://stackoverflow.com/a/25894670/4945494</a><br><a href="http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes" target="_blank" rel="external">http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif&quot; alt=&quot;datachangge&quot;&gt;&lt;/p&gt;
&lt;p&gt;在angular中，我们可以使用ngAnimate来实现对应的效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
      <category term="angular" scheme="http://www.thisjs.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>管理github上的Star</title>
    <link href="http://www.thisjs.com/2016/11/28/manage-the-star-on-the-lot/"/>
    <id>http://www.thisjs.com/2016/11/28/manage-the-star-on-the-lot/</id>
    <published>2016-11-28T02:29:51.000Z</published>
    <updated>2017-04-19T09:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png" alt="github"></p><p>Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，<br>查找自己的star就会非常的方便。</p><a id="more"></a><p>第一个不错的网站是<a href="https://astralapp.com/" target="_blank" rel="external">AStral</a>，非常漂亮的界面，可以直接浏览<br>项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。</p><p><img src="https://astralapp.com/dist/images/features-overview.png" alt="astral"></p><blockquote><p>地址 <a href="https://astralapp.com/" target="_blank" rel="external">https://astralapp.com/</a></p></blockquote><p>第二个网站是<a href="http://gitconstellation.com/" target="_blank" rel="external">gitconstellation</a>,简洁的界面，可以添加分类以及标签，管理方便</p><p><img src="http://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png" alt="gitStar"></p><blockquote><p>地址 <a href="http://gitconstellation.com/" target="_blank" rel="external">http://gitconstellation.com/</a></p></blockquote><p>第三个是一个app，<a href="http://www.ohmystarapp.com/" target="_blank" rel="external">OhMyStar</a>，但是只有苹果系统可以用。</p><p><img src="http://www.ohmystarapp.com/images/oms-app-bg.png" alt="gitStar"></p><blockquote><p>地址 <a href="http://www.ohmystarapp.com/" target="_blank" rel="external">http://www.ohmystarapp.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，&lt;br&gt;查找自己的star就会非常的方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="应用" scheme="http://www.thisjs.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="工具" scheme="http://www.thisjs.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>angular的unique过滤器</title>
    <link href="http://www.thisjs.com/2016/11/24/angular-unique-filter/"/>
    <id>http://www.thisjs.com/2016/11/24/angular-unique-filter/</id>
    <published>2016-11-24T03:41:07.000Z</published>
    <updated>2017-04-19T09:22:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg" alt="Angular"></p><p>Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，<br>只要有数据表达式的地方就能使用过滤器。<br>除去使用默认的几个过滤器，我们还可以自己定义过滤器。</p><p>其中<code>unique</code>是非常实用的一个过滤器，在<code>angular-ui</code>插件中，已经集成了<code>unique</code>方法，<br>可以在<a href="https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js" target="_blank" rel="external">angular-ui/angular-ui-OLDREPO</a><br>中看到，代码如下</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Filters out all duplicate items from an array by checking the specified key</span></div><div class="line"><span class="comment"> * @param [key] &#123;string&#125; the name of the attribute of each object to compare for uniqueness</span></div><div class="line"><span class="comment"> if the key is empty, the entire object will be compared</span></div><div class="line"><span class="comment"> if the key === false then no filtering will be performed</span></div><div class="line"><span class="comment"> * @return &#123;array&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line">angular.module(<span class="string">'ui.filters'</span>).filter(<span class="string">'unique'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">items, filterOn</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (filterOn === <span class="literal">false</span>) &#123;</div><div class="line">      <span class="keyword">return</span> items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((filterOn || angular.isUndefined(filterOn)) &amp;&amp; angular.isArray(items)) &#123;</div><div class="line">      <span class="keyword">var</span> hashCheck = &#123;&#125;, newItems = [];</div><div class="line"></div><div class="line">      <span class="keyword">var</span> extractValueToCompare = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (angular.isObject(item) &amp;&amp; angular.isString(filterOn)) &#123;</div><div class="line">          <span class="keyword">return</span> item[filterOn];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> item;</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      angular.forEach(items, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> valueToCheck, isDuplicate = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newItems.length; i++) &#123;</div><div class="line">          <span class="keyword">if</span> (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) &#123;</div><div class="line">            isDuplicate = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!isDuplicate) &#123;</div><div class="line">          newItems.push(item);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;);</div><div class="line">      items = newItems;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> items;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>同时，有一个angular插件，提供了不同的filter，<a href="https://github.com/a8m/angular-filter#unique" target="_blank" rel="external">angular-filter</a>,<br>可以直接注入该插件，实现我们需要的<code>unique</code>过滤器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg&quot; alt=&quot;Angular&quot;&gt;&lt;/p&gt;
&lt;p&gt;Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，&lt;br&gt;只要有数据表达式的地方就能使用过滤器。&lt;br&gt;除去使用默认的几个过滤器，我们还可以自己定义过滤器。&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;unique&lt;/code&gt;是非常实用的一个过滤器，在&lt;code&gt;angular-ui&lt;/code&gt;插件中，已经集成了&lt;code&gt;unique&lt;/code&gt;方法，&lt;br&gt;可以在&lt;a href=&quot;https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular-ui/angular-ui-OLDREPO&lt;/a&gt;&lt;br&gt;中看到，代码如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
      <category term="angular" scheme="http://www.thisjs.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>基于Material样式的Angle模板开发介绍</title>
    <link href="http://www.thisjs.com/2016/11/21/the-material-style-of-angle-template-development-is-introduced/"/>
    <id>http://www.thisjs.com/2016/11/21/the-material-style-of-angle-template-development-is-introduced/</id>
    <published>2016-11-21T08:48:52.000Z</published>
    <updated>2016-11-22T02:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123" target="_blank" rel="external">Angle</a>是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png" alt="Angle"></p><p>以下是使用Material版本的Angle的开发介绍</p><a id="more"></a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>正常开发需要从<code>seed</code>项目开始，本次使用的是<code>material-seed</code>进行开发。</p><h2 id="文件夹介绍"><a href="#文件夹介绍" class="headerlink" title="文件夹介绍"></a>文件夹介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">+-- app/  // 项目的打包输出目录</div><div class="line">|   +-- css/</div><div class="line">|   +-- documentation/  // 介绍文档</div><div class="line">|   +-- img/</div><div class="line">|   +-- js/</div><div class="line">|   +-- i18n/</div><div class="line">|   +-- pages/</div><div class="line">|   +-- vendor/</div><div class="line">|   +-- views/</div><div class="line">+-- master/   // 项目的开发目录</div><div class="line">|   +-- jade/ </div><div class="line">|   |   +-- pages/</div><div class="line">|   |   +-- views/</div><div class="line">|   +-- js/</div><div class="line">|   |   +-- modules/</div><div class="line">|   |   |   +-- controllers/</div><div class="line">|   |   |   +-- directives/</div><div class="line">|   |   |   +-- services/</div><div class="line">|   |   +-- custom/</div><div class="line">|   +-- sass/</div><div class="line">|   |   +-- app/</div><div class="line">|   |   +-- bootstrap/</div><div class="line">|   |   +-- themes/</div><div class="line">|   +-- gulpfile.js</div><div class="line">|   +-- package.json</div><div class="line">|   +-- bower.json</div><div class="line">+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中</div><div class="line">|   +-- *.json</div><div class="line">+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中</div><div class="line">+-- index.html   // 入口文件</div></pre></td></tr></table></figure><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>首先需要基本的环境</p><p><a href=""><img src="https://img.shields.io/npm/v/npm.svg?style=flat-square" alt="npm"></a> <a href=""><img src="https://img.shields.io/bower/v/bootstrap.svg?style=flat-square" alt="Bower"></a></p><p>进入开发目录<code>master</code>,安装项目所需依赖npm包,使用命令行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><p>使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如<code>angular-material</code>可以改为最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install</div></pre></td></tr></table></figure><h2 id="打包发布项目"><a href="#打包发布项目" class="headerlink" title="打包发布项目"></a>打包发布项目</h2><p>如果使用less编写的样式，那么可以在<code>master</code>目录下直接运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure><p>如果使用sass编写样式，需要在后面加入参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp --usesass</div></pre></td></tr></table></figure></p><p>这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。</p><p><strong>Note:</strong></p><blockquote><p>在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成</p></blockquote><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>项目使用<code>ui-router</code>插件配置路由，修改添加路由的需要在<code>master/js/modules/routes/routes.config.js</code>文件中配置</p><h3 id="添加新的state"><a href="#添加新的state" class="headerlink" title="添加新的state"></a>添加新的state</h3><p>在已存在的state下追加即可，格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'app.someroute'</span>, &#123;</div><div class="line">    url: <span class="string">'/some_url'</span>,</div><div class="line">    templateUrl: <span class="string">'path_to_template.html'</span>,</div><div class="line">    controller: <span class="string">'someController'</span>,</div><div class="line">    resolve: angular.extend(</div><div class="line">    helper.resolveFor(), &#123;</div><div class="line">    <span class="comment">// YOUR RESOLVES GO HERE</span></div><div class="line">    &#125;</div><div class="line">    )</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>其中<code>resolve</code>是用于加载页面所需要的第三方vendor，配置文件参见</p><h2 id="Module-与-Controller"><a href="#Module-与-Controller" class="headerlink" title="Module 与 Controller"></a>Module 与 Controller</h2><p>每个页面模块的js文件是存放于同一个文件夹中的，可以参考，<code>master/js/modules/material/</code>。</p><p>因此创建一个新的模块可以在<code>custom</code>或者<code>modules</code>文件夹中添加自己的文件夹，然后添加<code>moduleName.config.js</code>和<code>moduleName.controller.js</code>文件<br>格式可参考<code>master/js/modules/material/</code>文件夹中的文件</p><p>以下是一个简单的module例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    angular</div><div class="line">        .module(<span class="string">'app.moduleName'</span>, [</div><div class="line">            <span class="string">'ngMaterial'</span></div><div class="line">        ]);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>以下是controller的简单例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    angular</div><div class="line">        .module(<span class="string">'app.moduleName'</span>)</div><div class="line">        .controller(<span class="string">'moduleNameController'</span>, moduleNameController);</div><div class="line"></div><div class="line">    moduleNameController.$inject = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">moduleNameController</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>之后，将该module添加到<code>/master/js/app.module.js</code>文件中</p><h2 id="表现页面Jade-pug"><a href="#表现页面Jade-pug" class="headerlink" title="表现页面Jade (pug)"></a>表现页面Jade <em>(pug)</em></h2><p>该项目页面使用<a href="http://naltatis.github.io/jade-syntax-docs/" target="_blank" rel="external">jade</a>预编译语言编写，位于<code>/master/jade/</code>文件夹中。</p><p>在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。</p><p>如果已经开启了gulp watch，那么此时，在<code>/app/views/</code>就可以看到对应的html文件</p><h2 id="样式-Sass或Less"><a href="#样式-Sass或Less" class="headerlink" title="样式 Sass或Less"></a>样式 Sass或Less</h2><p>sass和less的开发目录位于<code>/master/sass/</code>或<code>/master/less/</code>目录下。</p><p>在其中的<code>app</code>目录下创建自己项目的文件夹,在其中添加<code>**ss</code>文件。</p><p>然后在<code>master/sass/app.scss</code> <em>(或less)</em> 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。</p><h2 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h2><p>如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。</p><p>这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/angle-view.png" alt="Hello world"></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>发布项目，正常项目发布仅仅需要以下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|</div><div class="line">|--app</div><div class="line">|--vendor</div><div class="line">|--index.html</div></pre></td></tr></table></figure><p>如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="将链接加入左侧栏"><a href="#将链接加入左侧栏" class="headerlink" title="将链接加入左侧栏"></a>将链接加入左侧栏</h2><p>修改<code>/server/sidebar-menu.json</code>文件即可</p><p>以下是创建一个一级目录的简单例子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"Welcome"</span>,</div><div class="line">    <span class="attr">"sref"</span>: <span class="string">"app.welcome"</span>,</div><div class="line">    <span class="attr">"icon"</span>: <span class="string">"icon-tag"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="修改加载动画"><a href="#修改加载动画" class="headerlink" title="修改加载动画"></a>修改加载动画</h2><p>需要修改加载动画的样式，查阅<code>/master/js/modules/preloader/preloader.directive.js</code>文件，并且修改其中指定的css样式以及文件即可。</p><p>如果需要临时屏蔽加载动画，注释掉index.jade文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div(data-preloader)</div></pre></td></tr></table></figure></p><h2 id="使用LazyLoad为页面加载第三方依赖"><a href="#使用LazyLoad为页面加载第三方依赖" class="headerlink" title="使用LazyLoad为页面加载第三方依赖"></a>使用LazyLoad为页面加载第三方依赖</h2><p>以下以实现一个加载动画效果为例。</p><p>可能用到的插件有 <em>（可以按照自己的需求删减添加）</em></p><ul><li><code>whirl</code> </li><li><code>spinkit</code></li><li><code>loaders.css</code></li></ul><p><strong>首先，在<code>master</code>文件夹中使用bower安装以上包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install whirl spinkit loaders.css</div></pre></td></tr></table></figure><p>安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到<code>vendor</code>目录中。<br>修改<code>/master/vendor.json</code>文件，在其后面添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"bower_components/loaders.css/loaders.css",</div><div class="line">"bower_components/spinkit/css/spinkit.css",</div><div class="line"><span class="string">"bower_components/whirl/dist/whirl.css"</span></div></pre></td></tr></table></figure><p>这样，gulp就会将对应的文件添加到vendor目录中</p><p><strong>在lazyload/lazyload.constants.js</strong>中配置第三方包</p><p>在scripts中添加以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//spinner用到的库</span></div><div class="line"><span class="string">'loaders.css'</span>:          [<span class="string">'vendor/loaders.css/loaders.css'</span>],</div><div class="line"><span class="string">'spinkit'</span>:              [<span class="string">'vendor/spinkit/css/spinkit.css'</span>],</div><div class="line"><span class="string">'whirl'</span>:                [<span class="string">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'spinner'</span>:          [<span class="string">'vendor/loaders.css/loaders.css'</span>,</div><div class="line">                     <span class="string">'vendor/spinkit/css/spinkit.css'</span>,</div><div class="line">                     <span class="string">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p><p><strong>在路由配置中为页面添加对应的引用</strong></p><p>在<code>/master/js/modules/routes/routes.config.js</code> 文件中为对应的路由添加引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'app.moduleName'</span>, &#123;</div><div class="line">    resolve: helper.resolveFor(<span class="string">'loaders.css'</span>，<span class="string">'spinkit'</span>,<span class="string">'whirl'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>如果是第二种写法，则使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'app.moduleName'</span>, &#123;</div><div class="line">    resolve: helper.resolveFor(<span class="string">'spinner'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>这时，在对应的页面加载的时候，可以看到资源已经被加载进来</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/angleReslove.png" alt="spinner"></p><p><strong>使用插件为我们提供的功能</strong></p><p>在jade文件中，添加测试效果，即可看到对应的加载动画<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.row</div><div class="line">  .col-md-4</div><div class="line">    .panel.panel-default</div><div class="line">      .panel-heading</div><div class="line">        h5 Folding Cube</div><div class="line">      .panel-body.loader-demo.loader-demo-sk</div><div class="line">        .sk-folding-cube</div><div class="line">          .sk-cube1.sk-cube</div><div class="line">          .sk-cube2.sk-cube</div><div class="line">          .sk-cube4.sk-cube</div><div class="line">          .sk-cube3.sk-cube</div></pre></td></tr></table></figure></p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/angle-spinner.gif" alt="spinner"></p><p>更多效果可以参阅<br> <a href="http://jh3y.github.io/whirl/" target="_blank" rel="external">whirl</a><br> <a href="http://tobiasahlin.com/spinkit/" target="_blank" rel="external">spinkit</a><br> <a href="https://connoratherton.com/loaders" target="_blank" rel="external">loaders.css</a></p><p>或者官方Demo中的<code>/app/spinners</code>页面</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angle&lt;/a&gt;是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png&quot; alt=&quot;Angle&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是使用Material版本的Angle的开发介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
      <category term="angular" scheme="http://www.thisjs.com/tags/angular/"/>
    
      <category term="material" scheme="http://www.thisjs.com/tags/material/"/>
    
  </entry>
  
  <entry>
    <title>css3实现科技感的呼吸灯效果</title>
    <link href="http://www.thisjs.com/2016/11/18/css3-breathing-lamp-effect/"/>
    <id>http://www.thisjs.com/2016/11/18/css3-breathing-lamp-effect/</id>
    <published>2016-11-18T08:16:19.000Z</published>
    <updated>2016-11-18T08:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。</p><p>使用CSS3的<code>animation</code>方法可以实现很多迷人的网页动画特效。</p><p>使用CSS3 配合<code>box-shadow</code>即可实现类似的效果</p><p><img src="http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif" alt="呼吸灯"></p><a id="more"></a><p>样式代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-class">.breathe-div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2b92d4</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">150px</span> auto;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.3);</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">-webkit-animation-timing-function</span>: ease-in-out;</div><div class="line">    <span class="attribute">-webkit-animation-name</span>: breathe;</div><div class="line">    <span class="attribute">-webkit-animation-duration</span>: <span class="number">1500ms</span>;</div><div class="line">    <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</div><div class="line">    <span class="attribute">-webkit-animation-direction</span>: alternate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> breathe &#123;</div><div class="line">    0% &#123;</div><div class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</div><div class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 147, 223, 0.4), <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(0, 147, 223, 0.1) inset;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(59, 235, 235, 0.7);</div><div class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">30px</span> <span class="number">#0093df</span>, <span class="number">0</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#0093df</span> inset;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>HTML 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breathe-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。&lt;/p&gt;
&lt;p&gt;使用CSS3的&lt;code&gt;animation&lt;/code&gt;方法可以实现很多迷人的网页动画特效。&lt;/p&gt;
&lt;p&gt;使用CSS3 配合&lt;code&gt;box-shadow&lt;/code&gt;即可实现类似的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif&quot; alt=&quot;呼吸灯&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="http://www.thisjs.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>goJs的一些使用技巧及问题解决方案</title>
    <link href="http://www.thisjs.com/2016/10/27/some-of-gojs-tips-and-solutions/"/>
    <id>http://www.thisjs.com/2016/10/27/some-of-gojs-tips-and-solutions/</id>
    <published>2016-10-27T04:01:26.000Z</published>
    <updated>2016-10-28T02:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gojs.net/" target="_blank" rel="external">go.js</a>是一个非常强大的图表库，使用gojs可以制作不同的图标效果<br><img src="http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png" alt="gojsIntro"></p><p>最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，<a href="https://forum.nwoods.com/c/gojs" target="_blank" rel="external">官方社区</a>会非常快速的帮助解答遇到的每个问题</p><p>以下是我在开发中遇到的一些小问题，以及对应的解决方案</p><a id="more"></a><h1 id="在绘制流程图的过程中，连接线会自动选择最优的路径"><a href="#在绘制流程图的过程中，连接线会自动选择最优的路径" class="headerlink" title="在绘制流程图的过程中，连接线会自动选择最优的路径"></a>在绘制流程图的过程中，连接线会自动选择最优的路径</h1><p><img src="https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png" alt="连接线问题"><br><img src="https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png" alt="连接线问题2"></p><p>这个问题的解决方案是</p><ul><li>为每一个连接点设置不同<code>Link.toPortId</code>，就像官方的例子中一样</li><li>设置<code>GraphLinksModel.html.linkFromPortIdProperty</code> 和 <code>GraphLinksModel.html.linkToPortIdProperty</code>属性</li><li><p>设置<code>diagram.model</code>的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myDiagram.model.linkFromPortIdProperty = <span class="string">"fromPort"</span>; </div><div class="line">    myDiagram.model.linkToPortIdProperty = <span class="string">"toPort"</span>;</div></pre></td></tr></table></figure></li><li><p>或者直接在初始化load(){}中的json数据中加入代码即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">model.linkFromPortIdProperty = <span class="string">"fromPort"</span>; </div><div class="line">model.linkToPortIdProperty = <span class="string">"toPort"</span>;</div></pre></td></tr></table></figure></li></ul><h1 id="根据节点数据进行函数处理"><a href="#根据节点数据进行函数处理" class="headerlink" title="根据节点数据进行函数处理"></a>根据节点数据进行函数处理</h1><p><strong>假如我需要这样一个功能：</strong></p><blockquote><p>如果流程图的连接线没有文字，那么隐藏连接线上的文本panel</p></blockquote><p>这个问题可以根据<code>go.Binding</code>暴露对外接口的方式来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> go.Binding(<span class="string">"visible"</span>, <span class="string">"text"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t !== <span class="string">""</span> &#125;)</div></pre></td></tr></table></figure><h1 id="设置图像的初始化缩放比例"><a href="#设置图像的初始化缩放比例" class="headerlink" title="设置图像的初始化缩放比例"></a>设置图像的初始化缩放比例</h1><p> 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，</p><ul><li>可以在创建Diagram的时候进行设置<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myDiagram =</div><div class="line">     $(go.Diagram, <span class="string">"myDiagramDiv"</span>,  </div><div class="line">       &#123;</div><div class="line">           scale : <span class="number">1.3</span></div><div class="line">       &#125;);</div></pre></td></tr></table></figure></li></ul><ul><li>同时可以使用<code>commandHandler</code>设置缩放比，实现放大缩小按钮</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myDiagram.commandHandler.increaseZoom();</div><div class="line">myDiagram.commandHandler.decreaseZoom();</div></pre></td></tr></table></figure><h1 id="画布无限拖动"><a href="#画布无限拖动" class="headerlink" title="画布无限拖动"></a>画布无限拖动</h1><blockquote><p>如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">myDiagram.scrollMode = go.Diagram.InfiniteScroll;</div></pre></td></tr></table></figure><blockquote><p>同时我们可以通过设置画布属性，来为画布设置多余的留白空间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollMargin: <span class="keyword">new</span> go.Margin(<span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>),  <span class="comment">//设置界面留白空间，允许用户拖动范围</span></div></pre></td></tr></table></figure><h1 id="连接线的绕行路线问题"><a href="#连接线的绕行路线问题" class="headerlink" title="连接线的绕行路线问题"></a>连接线的绕行路线问题</h1><p> go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。</p><p> <img src="http://o93mwnwp7.bkt.clouddn.com/github/linkrout.png" alt="绕开节点"></p><p> 这个只需在初始化连接线的时候，修改routing属性即可</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(go.Link, </div><div class="line">       &#123;</div><div class="line">           routing: go.Link.AvoidsNodes <span class="comment">// 绕行节点</span></div><div class="line">       &#125;,</div></pre></td></tr></table></figure><p> 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性<code>avoidable</code>即可</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avoidable:<span class="literal">false</span></div></pre></td></tr></table></figure><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p> <a href="http://gojs.net/latest/samples/scrollModes.html" target="_blank" rel="external">http://gojs.net/latest/samples/scrollModes.html</a></p><p> <a href="http://gojs.net/latest/intro/index.html" target="_blank" rel="external">http://gojs.net/latest/intro/index.html</a></p><p> <a href="https://forum.nwoods.com/c/gojs" target="_blank" rel="external">https://forum.nwoods.com/c/gojs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gojs.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go.js&lt;/a&gt;是一个非常强大的图表库，使用gojs可以制作不同的图标效果&lt;br&gt;&lt;img src=&quot;http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png&quot; alt=&quot;gojsIntro&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，&lt;a href=&quot;https://forum.nwoods.com/c/gojs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方社区&lt;/a&gt;会非常快速的帮助解答遇到的每个问题&lt;/p&gt;
&lt;p&gt;以下是我在开发中遇到的一些小问题，以及对应的解决方案&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.thisjs.com/tags/javascript/"/>
    
      <category term="gojs" scheme="http://www.thisjs.com/tags/gojs/"/>
    
  </entry>
  
</feed>
