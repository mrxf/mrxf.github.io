{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1459333411000},{"_id":"themes/yilia/_config.yml","hash":"7e0dc6a84b3818f2795585de7e74ee6db4a7fb38","modified":1492495991000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1459333411000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1459333411000},{"_id":"source/_posts/JavaScript-determine-the-direction-of-the-mouse-into-the-container.md","hash":"f67883e95855cea6714108e682151e888427755d","modified":1477540262869},{"_id":"source/_posts/Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes.md","hash":"79a58672bf93bda779186b6117df165b062694a6","modified":1477540339319},{"_id":"source/_posts/JavaScript-right-mouse-button-to-prevent-copy.md","hash":"c9062cec3301a46b0913631bf912fadbf9b78ac9","modified":1467383064505},{"_id":"source/_posts/a-simple-class-of-php-to-connect-to-the-database.md","hash":"d5b0bbc86bba38a1a416f98e01483b36b1998cad","modified":1477540402631},{"_id":"source/_posts/after-the-empty-navicat-mysql-table-id-since-increased-from-1-again.md","hash":"4c41fcf118403334834cce7df721e67718c15b66","modified":1467364051354},{"_id":"source/_posts/angular-unique-filter.md","hash":"978bfc93b7ef20bba8ed777fe677b64933278839","modified":1479961061591},{"_id":"source/_posts/animate-angular-data-change.md","hash":"1c48a5ae5818ee33a91b33870db7ae37a0456698","modified":1480577900621},{"_id":"source/_posts/build-shadowsocks-server-through-the-node.md","hash":"bb209842c838c51a4eacd3a639866cf54bb21699","modified":1488337480735},{"_id":"source/_posts/difference-between-overloading-rewriting-and-hiding-in-c.md","hash":"7ea477cd3f3eb7de6d9e7b005d5c7f24554deb29","modified":1480581311277},{"_id":"source/_posts/css3-breathing-lamp-effect.md","hash":"c4398871d5bc5c536274e3de6be1d66fc3d712e7","modified":1479457556936},{"_id":"source/_posts/go-js-update-remote-image-resources.md","hash":"a032da484d0cae0421d586a0b7ea61117dad2728","modified":1477545400536},{"_id":"source/_posts/gets-the-current-php-complete-url-of-the-page.md","hash":"65bfe1fb64d37e3555b937038210522d52e4cd4f","modified":1477540458994},{"_id":"source/_posts/implementation-elements-in-the-parent-element-in-the-method.md","hash":"a7352f13a9d016f6c738e1929c03f96c995d80cb","modified":1477540509793},{"_id":"source/_posts/jquery-pop-up-Div-window-center-display.md","hash":"16e307e0cba52e21663a678dc202020c93bd5f11","modified":1477540299770},{"_id":"source/_posts/js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture.md","hash":"8d049e4d87f5d592d5fb70427f481e4cb4d87697","modified":1477540372309},{"_id":"source/_posts/jsp-generates-a-color-stripe-verification-code.md","hash":"898ce640cf1afbce8833e24cc0f9b91aa9ccd656","modified":1477540313922},{"_id":"source/_posts/let-vs-2015-ignore-a-folder.md","hash":"3f41ef460033ca8ca0d2352d3a53eb68c4f7f0ec","modified":1487904509569},{"_id":"source/_posts/manage-the-star-on-the-lot.md","hash":"58256b3417acb8acdd7a093e59236d3cf66f8193","modified":1480300984334},{"_id":"source/_posts/mongo-on-x-86-system-startup-errors.md","hash":"9b85b20fcddc08f1381d83444adb5f6d05a01612","modified":1467729468028},{"_id":"source/_posts/optimization-of-an-insert-query-insert-more-rows.md","hash":"cad7e2e02fbbcd5a7f9e3004366ac628643498e8","modified":1477540611026},{"_id":"source/_posts/php-implementation-simple-method-of-paging.md","hash":"092bdcedfc466d912ba257386473a57b95a1aa42","modified":1477540444377},{"_id":"source/_posts/php-timestamp-conversion-problem-eight-hours.md","hash":"3b534148a330b70e31532abe8fe398c5cf151e2b","modified":1477540423368},{"_id":"source/_posts/realize-the-path-of-chinese-into-english.md","hash":"bb7e8f8a544af8dbf809d60b63f8369bed9bd684","modified":1491976173464},{"_id":"source/_posts/solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes.md","hash":"30f9dda1eecb8bdcc087bf4b18c7a1604452c380","modified":1467729249334},{"_id":"source/_posts/solve-the-problem-of-mixed-site-of-cross-domain.md","hash":"8934c06e949c139de770299dbbe21ccad9736ebf","modified":1467375524399},{"_id":"source/_posts/some-of-gojs-tips-and-solutions.md","hash":"3caf137c1fde0bbad84437f416b173da59999b84","modified":1477622320463},{"_id":"source/_posts/starter-ubuntu-12-add-program.md","hash":"5adba434ebf367d0862313d25d902451c2c2fef9","modified":1467729207566},{"_id":"source/_posts/taobao-provide-ip-database-api.md","hash":"4f5c7432c1a2ce338ae7f1fce7470c87401be6ac","modified":1467361892737},{"_id":"source/_posts/the-firefox-chinese-language-pack-installed-ubuntu.md","hash":"f8ecb28bb35154fc51afb5f08c34cdb7e02aa9c2","modified":1467729221293},{"_id":"source/_posts/the-front-command-line-tools-proxy-settings.md","hash":"ffc55bbb3a170ed7bbbbc32151a62ca93fd1ac86","modified":1492413953857},{"_id":"source/_posts/the-material-style-of-angle-template-development-is-introduced.md","hash":"b191326474834c3bc7499996ef4b272571b13e16","modified":1479782158415},{"_id":"source/_posts/the-problem-of-unable-to-get-ng-repeat-generating-element-styles.md","hash":"2664030ad03016caaad8060a316725aa1bf6cd40","modified":1481090567087},{"_id":"source/_posts/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy.md","hash":"1ce87468e5a68553e8c89d005ab0d710059550cc","modified":1480587222537},{"_id":"source/_posts/u-buntu-increase-in-virtual-box-disk-capacity.md","hash":"3117dfdd33de75522fc77df5417057768b01e72f","modified":1467729234453},{"_id":"source/_posts/use-of-cmd-solve-port-being-used.md","hash":"2a24922a155bce67d43bade5fd38a67cb780b1e8","modified":1467361880429},{"_id":"source/_posts/use-prefix-free-solve-the-problem-of-css-prefix.md","hash":"8dc09c2c7ae2facccba29850fa664b3286552df5","modified":1477540567030},{"_id":"source/_posts/use-the-lazyload-optimizing-web-images-load.md","hash":"0b83b702d009a18c3e5847b102ca33478c2170d3","modified":1477540552431},{"_id":"source/_posts/use-the-string-of-the-split-method-of-array-to-heavy.md","hash":"35b34a09550bc38f624ef81c465c4dff548fae9c","modified":1477540590976},{"_id":"source/_posts/using-j-querys-promise-to-solve-delay-data-processing-model.md","hash":"f2c27a3588f4d38b187c48b725209859478046bb","modified":1490065081474},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1459333411000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1459333411000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1459333411000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1459333411000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1459333411000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1459333411000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1459333411000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1459333411000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1459333411000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459333411000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1459333411000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459333411000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1459333411000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459333411000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"74c5f9888abf3ea6c9f1021f936980ac32005f46","modified":1467354822804},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"98c9ff9d4405cff22ef40f81d800c7ca69b5b0f7","modified":1467354514313},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1459333411000},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1459333411000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1459333411000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1459333411000},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1459333411000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1459333411000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1459333411000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1459333411000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1459333411000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1459333411000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1459333411000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1459333411000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1459333411000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1459333411000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1459333411000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1459333411000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1459333411000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1459333411000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1459333411000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1459333411000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1459333411000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1459333411000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1459333411000},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1459333411000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1459333411000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1459333411000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1459333411000},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1459333411000},{"_id":"themes/yilia/source/js/MathJax.js","hash":"b860b98142b33d65eedc20c8b7e5324e2e343f8a","modified":1467354669453},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1459333411000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"6ff8fd59d8c10d36f0f1d5b7b30566c8e89350cb","modified":1492486097869},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"bbba871b1ca75dffc4a03a4c72d50133ef05bd61","modified":1467471209137},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1459333411000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1459333411000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1459333411000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1459333411000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1459333411000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1459333411000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1459333411000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459333411000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1459333411000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1459333411000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"javaScript判断鼠标进入容器的方向","date":"2015-09-28T15:39:43.000Z","_content":"\n在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。\n\n也搜索到了一些解决方案，比如\n\n>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左\n\n<!--more-->\n\n![圆形直径](http://images.cnitblog.com/i/599390/201404/161747198221329.jpg)\n\n最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。\n\n```html\n<div id=\"box\"></div>\n\n<script type=\"text/javascript\">\n\tvar oBox = document.getElementById('box');\n\toBox.addEventListener('mouseenter',function(event) {\n\t\tevent = event || window.event;\n\t\tvar iX = event.offsetX,\n\t\t\tiY = event.offsetY,\n\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走\n\t\t\taDirections = ['上','右','下','左'],\n\t\t\tiMinIndex = 0;\n\n\t\t\t// console.table([aDirections,aDistance]);\n\t\t\t\t\n\t\t\tfor (var i = 0; i < aDistance.length; i++) {\n\t\t\t\tiMinIndex = aDistance[iMinIndex] > aDistance[i] ? i : iMinIndex;\n\t\t\t}\n\n\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];\n\n\t});\n</script>\n```\n![进入方向](http://o93mwnwp7.bkt.clouddn.com/github/mouseenter.png)","source":"_posts/JavaScript-determine-the-direction-of-the-mouse-into-the-container.md","raw":"---\ntitle: javaScript判断鼠标进入容器的方向\ndate: 2015-09-28 23:39:43\ntags: javascript\n---\n\n在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。\n\n也搜索到了一些解决方案，比如\n\n>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左\n\n<!--more-->\n\n![圆形直径](http://images.cnitblog.com/i/599390/201404/161747198221329.jpg)\n\n最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。\n\n```html\n<div id=\"box\"></div>\n\n<script type=\"text/javascript\">\n\tvar oBox = document.getElementById('box');\n\toBox.addEventListener('mouseenter',function(event) {\n\t\tevent = event || window.event;\n\t\tvar iX = event.offsetX,\n\t\t\tiY = event.offsetY,\n\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走\n\t\t\taDirections = ['上','右','下','左'],\n\t\t\tiMinIndex = 0;\n\n\t\t\t// console.table([aDirections,aDistance]);\n\t\t\t\t\n\t\t\tfor (var i = 0; i < aDistance.length; i++) {\n\t\t\t\tiMinIndex = aDistance[iMinIndex] > aDistance[i] ? i : iMinIndex;\n\t\t\t}\n\n\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];\n\n\t});\n</script>\n```\n![进入方向](http://o93mwnwp7.bkt.clouddn.com/github/mouseenter.png)","slug":"JavaScript-determine-the-direction-of-the-mouse-into-the-container","published":1,"updated":"2016-10-27T03:51:02.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb1y00007sv1zkte0xsx","content":"<p>在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。</p>\n<p>也搜索到了一些解决方案，比如</p>\n<blockquote>\n<p>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"http://images.cnitblog.com/i/599390/201404/161747198221329.jpg\" alt=\"圆形直径\"></p>\n<p>最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">\tvar oBox = document.getElementById('box');</div><div class=\"line\">\toBox.addEventListener('mouseenter',function(event) &#123;</div><div class=\"line\">\t\tevent = event || window.event;</div><div class=\"line\">\t\tvar iX = event.offsetX,</div><div class=\"line\">\t\t\tiY = event.offsetY,</div><div class=\"line\">\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走</div><div class=\"line\">\t\t\taDirections = ['上','右','下','左'],</div><div class=\"line\">\t\t\tiMinIndex = 0;</div><div class=\"line\"></div><div class=\"line\">\t\t\t// console.table([aDirections,aDistance]);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\tfor (var i = 0; i <span class=\"tag\">&lt; <span class=\"attr\">aDistance.length</span>; <span class=\"attr\">i</span>++) &#123;</span></div><div class=\"line\">\t\t\t\t<span class=\"attr\">iMinIndex</span> = <span class=\"string\">aDistance[iMinIndex]</span> &gt; aDistance[i] ? i : iMinIndex;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];</div><div class=\"line\"></div><div class=\"line\">\t&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/mouseenter.png\" alt=\"进入方向\"></p>\n","excerpt":"<p>在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。</p>\n<p>也搜索到了一些解决方案，比如</p>\n<blockquote>\n<p>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左</p>\n</blockquote>","more":"<p><img src=\"http://images.cnitblog.com/i/599390/201404/161747198221329.jpg\" alt=\"圆形直径\"></p>\n<p>最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">\tvar oBox = document.getElementById('box');</div><div class=\"line\">\toBox.addEventListener('mouseenter',function(event) &#123;</div><div class=\"line\">\t\tevent = event || window.event;</div><div class=\"line\">\t\tvar iX = event.offsetX,</div><div class=\"line\">\t\t\tiY = event.offsetY,</div><div class=\"line\">\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走</div><div class=\"line\">\t\t\taDirections = ['上','右','下','左'],</div><div class=\"line\">\t\t\tiMinIndex = 0;</div><div class=\"line\"></div><div class=\"line\">\t\t\t// console.table([aDirections,aDistance]);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\tfor (var i = 0; i <span class=\"tag\">&lt; <span class=\"attr\">aDistance.length</span>; <span class=\"attr\">i</span>++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">iMinIndex</span> = <span class=\"string\">aDistance[iMinIndex]</span> &gt;</span> aDistance[i] ? i : iMinIndex;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];</div><div class=\"line\"></div><div class=\"line\">\t&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/mouseenter.png\" alt=\"进入方向\"></p>"},{"title":"js获取表单提交的数据并修改其他表单笔记","date":"2014-05-29T08:08:15.000Z","_content":"首先在提交按钮上面加入一个点击事件\n`onclick=\"fun(); `\n这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。\n接下来是fun()的事件\n\n<!--more-->\n\n```js\nfunction fun(){  \n    var jine=parseInt(document.getElementById(\"ckje\").value);  \n    var lixi=jine*3.25/100;  \n    var benxi=lixi+jine;  \n    document.getElementById(\"lixi\").value=lixi;  \n    document.getElementById(\"benxi\").value=benxi;  \n}  \n\n```\n\n这样就实现了简单的计算，并且将计算结果输出到了页面上。","source":"_posts/Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes.md","raw":"---\ntitle: js获取表单提交的数据并修改其他表单笔记\ndate: 2014-05-29 16:08:15\ntags: javascript\n---\n首先在提交按钮上面加入一个点击事件\n`onclick=\"fun(); `\n这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。\n接下来是fun()的事件\n\n<!--more-->\n\n```js\nfunction fun(){  \n    var jine=parseInt(document.getElementById(\"ckje\").value);  \n    var lixi=jine*3.25/100;  \n    var benxi=lixi+jine;  \n    document.getElementById(\"lixi\").value=lixi;  \n    document.getElementById(\"benxi\").value=benxi;  \n}  \n\n```\n\n这样就实现了简单的计算，并且将计算结果输出到了页面上。","slug":"Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes","published":1,"updated":"2016-10-27T03:52:19.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2400017sv1p06g6jxa","content":"<p>首先在提交按钮上面加入一个点击事件<br><code>onclick=&quot;fun();</code><br>这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。<br>接下来是fun()的事件</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> jine=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ckje\"</span>).value);  </div><div class=\"line\">    <span class=\"keyword\">var</span> lixi=jine*<span class=\"number\">3.25</span>/<span class=\"number\">100</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> benxi=lixi+jine;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"lixi\"</span>).value=lixi;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"benxi\"</span>).value=benxi;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就实现了简单的计算，并且将计算结果输出到了页面上。</p>\n","excerpt":"<p>首先在提交按钮上面加入一个点击事件<br><code>onclick=&quot;fun();</code><br>这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。<br>接下来是fun()的事件</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> jine=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ckje\"</span>).value);  </div><div class=\"line\">    <span class=\"keyword\">var</span> lixi=jine*<span class=\"number\">3.25</span>/<span class=\"number\">100</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> benxi=lixi+jine;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"lixi\"</span>).value=lixi;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"benxi\"</span>).value=benxi;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就实现了简单的计算，并且将计算结果输出到了页面上。</p>"},{"title":"javascript禁止鼠标右键防止拷贝","date":"2014-06-28T12:03:17.000Z","_content":"在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法\n\n* 禁止鼠标左右键代码/禁止网页选中/禁止另存为\n```\n<body oncontextmenu=\"return false\" onselectstart=\"return false\">\n<noscript><iframe src=\"/*.html>\";</iframe></noscript>\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n<!--more-->\n\n* 禁止鼠标左右键\n```\n<SCRIPT language=javascript>\n<!--\nif (window.Event)\ndocument.captureEvents(Event.MOUSEUP);\nfunction nocontextmenu(){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\nfunction norightclick(e){\nif (window.Event){\nif (e.which == 2 || e.which == 3)\nreturn false;\n}\nelse\nif (event.button == 2 || event.button == 3){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\n}\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</SCRIPT>\n```\n* 禁止选中代码\n\n```\n<SCRIPT language=JavaScript>\ndocument.oncontextmenu=new Function(\"event.returnValue=false;\");\ndocument.onselectstart=new Function(\"event.returnValue=false;\");\n</SCRIPT>\n```\n* 禁止另存为\n\n```\n <noscript>\n <iframe src=\"/*.htm\"></iframe>\n</noscript>\n\n```\n* 防拷贝/复制代码\n`<body leftmargin=0 topmargin=0 >`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\nomitformtagsomitformtags=omitformtags.join(\"|\")\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\nfunction reEnable(){\nreturn true\n}\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁止网页另存为\n`<noscript><iframe src=\"/*.html>\";</iframe></noscript>`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\n\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\n\nomitformtagsomitformtags=omitformtags.join(\"|\")\n\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\n\nfunction reEnable(){\nreturn true\n}\n\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁用右键\n```\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n* 真正的鼠标右键屏蔽\n```\n<script language=\"JavaScript\">\n<!--\n\nif (window.Event)\n document.captureEvents(Event.MOUSEUP);\n\nfunction nocontextmenu()\n{\nevent.cancelBubble = true\nevent.returnValue = false;\n\nreturn false;\n}\n\nfunction norightclick(e)\n{\nif (window.Event)\n{\n if (e.which == 2 || e.which == 3)\n return false;\n}\nelse\n if (event.button == 2 || event.button == 3)\n {\n event.cancelBubble = true\n event.returnValue = false;\n return false;\n }\n\n}\n\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</script>\n```\n\n","source":"_posts/JavaScript-right-mouse-button-to-prevent-copy.md","raw":"---\ntitle: javascript禁止鼠标右键防止拷贝\ndate: 2014-06-28 20:03:17\ntags: javascript\n---\n在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法\n\n* 禁止鼠标左右键代码/禁止网页选中/禁止另存为\n```\n<body oncontextmenu=\"return false\" onselectstart=\"return false\">\n<noscript><iframe src=\"/*.html>\";</iframe></noscript>\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n<!--more-->\n\n* 禁止鼠标左右键\n```\n<SCRIPT language=javascript>\n<!--\nif (window.Event)\ndocument.captureEvents(Event.MOUSEUP);\nfunction nocontextmenu(){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\nfunction norightclick(e){\nif (window.Event){\nif (e.which == 2 || e.which == 3)\nreturn false;\n}\nelse\nif (event.button == 2 || event.button == 3){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\n}\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</SCRIPT>\n```\n* 禁止选中代码\n\n```\n<SCRIPT language=JavaScript>\ndocument.oncontextmenu=new Function(\"event.returnValue=false;\");\ndocument.onselectstart=new Function(\"event.returnValue=false;\");\n</SCRIPT>\n```\n* 禁止另存为\n\n```\n <noscript>\n <iframe src=\"/*.htm\"></iframe>\n</noscript>\n\n```\n* 防拷贝/复制代码\n`<body leftmargin=0 topmargin=0 >`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\nomitformtagsomitformtags=omitformtags.join(\"|\")\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\nfunction reEnable(){\nreturn true\n}\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁止网页另存为\n`<noscript><iframe src=\"/*.html>\";</iframe></noscript>`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\n\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\n\nomitformtagsomitformtags=omitformtags.join(\"|\")\n\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\n\nfunction reEnable(){\nreturn true\n}\n\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁用右键\n```\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n* 真正的鼠标右键屏蔽\n```\n<script language=\"JavaScript\">\n<!--\n\nif (window.Event)\n document.captureEvents(Event.MOUSEUP);\n\nfunction nocontextmenu()\n{\nevent.cancelBubble = true\nevent.returnValue = false;\n\nreturn false;\n}\n\nfunction norightclick(e)\n{\nif (window.Event)\n{\n if (e.which == 2 || e.which == 3)\n return false;\n}\nelse\n if (event.button == 2 || event.button == 3)\n {\n event.cancelBubble = true\n event.returnValue = false;\n return false;\n }\n\n}\n\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</script>\n```\n\n","slug":"JavaScript-right-mouse-button-to-prevent-copy","published":1,"updated":"2016-07-01T14:24:24.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2e00037sv1ecr5uh45","content":"<p>在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法</p>\n<ul>\n<li>禁止鼠标左右键代码/禁止网页选中/禁止另存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;</div><div class=\"line\">&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function stop()&#123;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu=stop;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>禁止鼠标左右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;SCRIPT language=javascript&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">if (window.Event)</div><div class=\"line\">document.captureEvents(Event.MOUSEUP);</div><div class=\"line\">function nocontextmenu()&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">function norightclick(e)&#123;</div><div class=\"line\">if (window.Event)&#123;</div><div class=\"line\">if (e.which == 2 || e.which == 3)</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">if (event.button == 2 || event.button == 3)&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</div><div class=\"line\">document.onmousedown = norightclick; // for all others</div><div class=\"line\">//--&gt;</div><div class=\"line\">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁止选中代码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;SCRIPT language=JavaScript&gt;</div><div class=\"line\">document.oncontextmenu=new Function(&quot;event.returnValue=false;&quot;);</div><div class=\"line\">document.onselectstart=new Function(&quot;event.returnValue=false;&quot;);</div><div class=\"line\">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>禁止另存为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;noscript&gt;</div><div class=\"line\"> &lt;iframe src=&quot;/*.htm&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;/noscript&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>防拷贝/复制代码<br><code>&lt;body leftmargin=0 topmargin=0 &gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</div><div class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</div><div class=\"line\">function disableselect(e)&#123;</div><div class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</div><div class=\"line\">return false</div><div class=\"line\">&#125;</div><div class=\"line\">function reEnable()&#123;</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</div><div class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</div><div class=\"line\">else&#123;</div><div class=\"line\">document.onmousedown=disableselect</div><div class=\"line\">document.onmouseup=reEnable</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁止网页另存为<br><code>&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</div><div class=\"line\"></div><div class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</div><div class=\"line\"></div><div class=\"line\">function disableselect(e)&#123;</div><div class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</div><div class=\"line\">return false</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function reEnable()&#123;</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</div><div class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</div><div class=\"line\">else&#123;</div><div class=\"line\">document.onmousedown=disableselect</div><div class=\"line\">document.onmouseup=reEnable</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁用右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function stop()&#123;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu=stop;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>真正的鼠标右键屏蔽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\"></div><div class=\"line\">if (window.Event)</div><div class=\"line\"> document.captureEvents(Event.MOUSEUP);</div><div class=\"line\"></div><div class=\"line\">function nocontextmenu()</div><div class=\"line\">&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\"></div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function norightclick(e)</div><div class=\"line\">&#123;</div><div class=\"line\">if (window.Event)</div><div class=\"line\">&#123;</div><div class=\"line\"> if (e.which == 2 || e.which == 3)</div><div class=\"line\"> return false;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\"> if (event.button == 2 || event.button == 3)</div><div class=\"line\"> &#123;</div><div class=\"line\"> event.cancelBubble = true</div><div class=\"line\"> event.returnValue = false;</div><div class=\"line\"> return false;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</div><div class=\"line\">document.onmousedown = norightclick; // for all others</div><div class=\"line\">//--&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"<p>在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法</p>\n<ul>\n<li>禁止鼠标左右键代码/禁止网页选中/禁止另存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;</div><div class=\"line\">&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function stop()&#123;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu=stop;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>禁止鼠标左右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;SCRIPT language=javascript&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">if (window.Event)</div><div class=\"line\">document.captureEvents(Event.MOUSEUP);</div><div class=\"line\">function nocontextmenu()&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">function norightclick(e)&#123;</div><div class=\"line\">if (window.Event)&#123;</div><div class=\"line\">if (e.which == 2 || e.which == 3)</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">if (event.button == 2 || event.button == 3)&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</div><div class=\"line\">document.onmousedown = norightclick; // for all others</div><div class=\"line\">//--&gt;</div><div class=\"line\">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁止选中代码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;SCRIPT language=JavaScript&gt;</div><div class=\"line\">document.oncontextmenu=new Function(&quot;event.returnValue=false;&quot;);</div><div class=\"line\">document.onselectstart=new Function(&quot;event.returnValue=false;&quot;);</div><div class=\"line\">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>禁止另存为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;noscript&gt;</div><div class=\"line\"> &lt;iframe src=&quot;/*.htm&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;/noscript&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>防拷贝/复制代码<br><code>&lt;body leftmargin=0 topmargin=0 &gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</div><div class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</div><div class=\"line\">function disableselect(e)&#123;</div><div class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</div><div class=\"line\">return false</div><div class=\"line\">&#125;</div><div class=\"line\">function reEnable()&#123;</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</div><div class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</div><div class=\"line\">else&#123;</div><div class=\"line\">document.onmousedown=disableselect</div><div class=\"line\">document.onmouseup=reEnable</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁止网页另存为<br><code>&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</div><div class=\"line\"></div><div class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</div><div class=\"line\"></div><div class=\"line\">function disableselect(e)&#123;</div><div class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</div><div class=\"line\">return false</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function reEnable()&#123;</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</div><div class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</div><div class=\"line\">else&#123;</div><div class=\"line\">document.onmousedown=disableselect</div><div class=\"line\">document.onmouseup=reEnable</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>禁用右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function stop()&#123;</div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\">document.oncontextmenu=stop;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>真正的鼠标右键屏蔽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\"></div><div class=\"line\">if (window.Event)</div><div class=\"line\"> document.captureEvents(Event.MOUSEUP);</div><div class=\"line\"></div><div class=\"line\">function nocontextmenu()</div><div class=\"line\">&#123;</div><div class=\"line\">event.cancelBubble = true</div><div class=\"line\">event.returnValue = false;</div><div class=\"line\"></div><div class=\"line\">return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function norightclick(e)</div><div class=\"line\">&#123;</div><div class=\"line\">if (window.Event)</div><div class=\"line\">&#123;</div><div class=\"line\"> if (e.which == 2 || e.which == 3)</div><div class=\"line\"> return false;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\"> if (event.button == 2 || event.button == 3)</div><div class=\"line\"> &#123;</div><div class=\"line\"> event.cancelBubble = true</div><div class=\"line\"> event.returnValue = false;</div><div class=\"line\"> return false;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</div><div class=\"line\">document.onmousedown = norightclick; // for all others</div><div class=\"line\">//--&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"php连接数据库的一个简单类","date":"2014-06-02T11:08:24.000Z","_content":"以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可\n\n<!--more-->\n\n```php\n<?php\nclass ConnectionMySQL{\n    //主机\n    private $host=\"localhost\";\n    //数据库的username\n    private $name=\"root\";\n    //数据库的password\n    private $pass=\"11111111\";\n    //数据库名称\n    private $table=\"table\";\n    //编码形式\n    private $ut=\"utf8\";\n\n\n    //构造函数\n    function __construct(){\n        $this->ut=$ut;\n        $this->connect();\n\n    }\n\n    //数据库的链接\n    function connect(){\n        $link=mysql_connect($this->host,$this->name,$this->pass) or die ($this->error());\n        mysql_select_db($this->table,$link) or die(\"没该数据库：\".$this->table);\n        mysql_query(\"SET NAMES 'utf8'\");\n\t\tmysql_query(\"set character_set_client=utf8\");\n\t\tmysql_query(\"set character_set_results=utf8\");\n           //中文乱码问题\n    }\n\n    function query($sql, $type = '') {\n        if(!($query = mysql_query($sql))) $query=null;\n        return $query;\n    }\n\n    function show($message = '', $sql = '') {\n        if(!$sql) echo $message;\n        else echo $message.'<br>'.$sql;\n    }\n\n    function affected_rows() {\n        return mysql_affected_rows();\n    }\n\n    function result($query, $row) {\n        return mysql_result($query, $row);\n    }\n\n    function num_rows($query) {\n        return @mysql_num_rows($query);\n    }\n\tfunction table_rows($table){\n\t\t$query=mysql_query(\"select * from $table\") or die(mysql_error());\n\t\treturn mysql_num_rows($query);\n\t\t}\n\n    function num_fields($query) {\n        return mysql_num_fields($query);\n    }\n\n    function free_result($query) {\n        return mysql_free_result($query);\n    }\n\n    function insert_id() {\n        return mysql_insert_id();\n    }\n\n    function fetch_row($query) {\n        return mysql_fetch_row($query);\n    }\n\n    function version() {\n        return mysql_get_server_info();\n    }\n\n    function close() {\n        return mysql_close();\n    }\n\n    //向$table表中插入值\n    function fn_insert($table,$name,$value){\n        $this->query(\"insert into $table ($name) values ($value)\");\n    }\n    //根据$id值删除表$table中的一条记录\n    function fn_delete($table,$id,$value){\n        $this->query(\"delete from $table where $id=$value\");\n        echo \"id为\". $id.\" 的记录被成功删除!\";\n    }\n    //根据$id值查询表中的记录\n    function fn_select($table,$id){\n        $fileinfo=$this->query(\"select * from $table where id=$id\");\n        return $fileinfo;\n    }\n\t\n}\n\n\n?>\n\n```","source":"_posts/a-simple-class-of-php-to-connect-to-the-database.md","raw":"---\ntitle: php连接数据库的一个简单类\ndate: 2014-06-02 19:08:24\ntags: php\n---\n以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可\n\n<!--more-->\n\n```php\n<?php\nclass ConnectionMySQL{\n    //主机\n    private $host=\"localhost\";\n    //数据库的username\n    private $name=\"root\";\n    //数据库的password\n    private $pass=\"11111111\";\n    //数据库名称\n    private $table=\"table\";\n    //编码形式\n    private $ut=\"utf8\";\n\n\n    //构造函数\n    function __construct(){\n        $this->ut=$ut;\n        $this->connect();\n\n    }\n\n    //数据库的链接\n    function connect(){\n        $link=mysql_connect($this->host,$this->name,$this->pass) or die ($this->error());\n        mysql_select_db($this->table,$link) or die(\"没该数据库：\".$this->table);\n        mysql_query(\"SET NAMES 'utf8'\");\n\t\tmysql_query(\"set character_set_client=utf8\");\n\t\tmysql_query(\"set character_set_results=utf8\");\n           //中文乱码问题\n    }\n\n    function query($sql, $type = '') {\n        if(!($query = mysql_query($sql))) $query=null;\n        return $query;\n    }\n\n    function show($message = '', $sql = '') {\n        if(!$sql) echo $message;\n        else echo $message.'<br>'.$sql;\n    }\n\n    function affected_rows() {\n        return mysql_affected_rows();\n    }\n\n    function result($query, $row) {\n        return mysql_result($query, $row);\n    }\n\n    function num_rows($query) {\n        return @mysql_num_rows($query);\n    }\n\tfunction table_rows($table){\n\t\t$query=mysql_query(\"select * from $table\") or die(mysql_error());\n\t\treturn mysql_num_rows($query);\n\t\t}\n\n    function num_fields($query) {\n        return mysql_num_fields($query);\n    }\n\n    function free_result($query) {\n        return mysql_free_result($query);\n    }\n\n    function insert_id() {\n        return mysql_insert_id();\n    }\n\n    function fetch_row($query) {\n        return mysql_fetch_row($query);\n    }\n\n    function version() {\n        return mysql_get_server_info();\n    }\n\n    function close() {\n        return mysql_close();\n    }\n\n    //向$table表中插入值\n    function fn_insert($table,$name,$value){\n        $this->query(\"insert into $table ($name) values ($value)\");\n    }\n    //根据$id值删除表$table中的一条记录\n    function fn_delete($table,$id,$value){\n        $this->query(\"delete from $table where $id=$value\");\n        echo \"id为\". $id.\" 的记录被成功删除!\";\n    }\n    //根据$id值查询表中的记录\n    function fn_select($table,$id){\n        $fileinfo=$this->query(\"select * from $table where id=$id\");\n        return $fileinfo;\n    }\n\t\n}\n\n\n?>\n\n```","slug":"a-simple-class-of-php-to-connect-to-the-database","published":1,"updated":"2016-10-27T03:53:22.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2f00047sv1jww8zji9","content":"<p>以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionMySQL</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//主机</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $host=<span class=\"string\">\"localhost\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库的username</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $name=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库的password</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $pass=<span class=\"string\">\"11111111\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $table=<span class=\"string\">\"table\"</span>;</div><div class=\"line\">    <span class=\"comment\">//编码形式</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $ut=<span class=\"string\">\"utf8\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ut=$ut;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;connect();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//数据库的链接</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        $link=mysql_connect(<span class=\"keyword\">$this</span>-&gt;host,<span class=\"keyword\">$this</span>-&gt;name,<span class=\"keyword\">$this</span>-&gt;pass) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span> (<span class=\"keyword\">$this</span>-&gt;error());</div><div class=\"line\">        mysql_select_db(<span class=\"keyword\">$this</span>-&gt;table,$link) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"没该数据库：\"</span>.<span class=\"keyword\">$this</span>-&gt;table);</div><div class=\"line\">        mysql_query(<span class=\"string\">\"SET NAMES 'utf8'\"</span>);</div><div class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_client=utf8\"</span>);</div><div class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_results=utf8\"</span>);</div><div class=\"line\">           <span class=\"comment\">//中文乱码问题</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql, $type = <span class=\"string\">''</span>)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!($query = mysql_query($sql))) $query=<span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> $query;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">($message = <span class=\"string\">''</span>, $sql = <span class=\"string\">''</span>)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!$sql) <span class=\"keyword\">echo</span> $message;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> $message.<span class=\"string\">'&lt;br&gt;'</span>.$sql;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">affected_rows</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_affected_rows();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span><span class=\"params\">($query, $row)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_result($query, $row);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_rows</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> @mysql_num_rows($query);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_rows</span><span class=\"params\">($table)</span></span>&#123;</div><div class=\"line\">\t\t$query=mysql_query(<span class=\"string\">\"select * from $table\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(mysql_error());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_num_rows($query);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_fields</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_num_fields($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">free_result</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_free_result($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_id</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_insert_id();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch_row</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_fetch_row($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">version</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_get_server_info();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//向$table表中插入值</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_insert</span><span class=\"params\">($table,$name,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"insert into $table ($name) values ($value)\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据$id值删除表$table中的一条记录</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_delete</span><span class=\"params\">($table,$id,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"delete from $table where $id=$value\"</span>);</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"id为\"</span>. $id.<span class=\"string\">\" 的记录被成功删除!\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据$id值查询表中的记录</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_select</span><span class=\"params\">($table,$id)</span></span>&#123;</div><div class=\"line\">        $fileinfo=<span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"select * from $table where id=$id\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> $fileinfo;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p>以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionMySQL</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//主机</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $host=<span class=\"string\">\"localhost\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库的username</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $name=<span class=\"string\">\"root\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库的password</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $pass=<span class=\"string\">\"11111111\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $table=<span class=\"string\">\"table\"</span>;</div><div class=\"line\">    <span class=\"comment\">//编码形式</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $ut=<span class=\"string\">\"utf8\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ut=$ut;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;connect();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//数据库的链接</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        $link=mysql_connect(<span class=\"keyword\">$this</span>-&gt;host,<span class=\"keyword\">$this</span>-&gt;name,<span class=\"keyword\">$this</span>-&gt;pass) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span> (<span class=\"keyword\">$this</span>-&gt;error());</div><div class=\"line\">        mysql_select_db(<span class=\"keyword\">$this</span>-&gt;table,$link) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"没该数据库：\"</span>.<span class=\"keyword\">$this</span>-&gt;table);</div><div class=\"line\">        mysql_query(<span class=\"string\">\"SET NAMES 'utf8'\"</span>);</div><div class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_client=utf8\"</span>);</div><div class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_results=utf8\"</span>);</div><div class=\"line\">           <span class=\"comment\">//中文乱码问题</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql, $type = <span class=\"string\">''</span>)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!($query = mysql_query($sql))) $query=<span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> $query;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">($message = <span class=\"string\">''</span>, $sql = <span class=\"string\">''</span>)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!$sql) <span class=\"keyword\">echo</span> $message;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> $message.<span class=\"string\">'&lt;br&gt;'</span>.$sql;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">affected_rows</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_affected_rows();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span><span class=\"params\">($query, $row)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_result($query, $row);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_rows</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> @mysql_num_rows($query);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_rows</span><span class=\"params\">($table)</span></span>&#123;</div><div class=\"line\">\t\t$query=mysql_query(<span class=\"string\">\"select * from $table\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(mysql_error());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_num_rows($query);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_fields</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_num_fields($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">free_result</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_free_result($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_id</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_insert_id();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch_row</span><span class=\"params\">($query)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_fetch_row($query);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">version</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_get_server_info();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mysql_close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//向$table表中插入值</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_insert</span><span class=\"params\">($table,$name,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"insert into $table ($name) values ($value)\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据$id值删除表$table中的一条记录</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_delete</span><span class=\"params\">($table,$id,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"delete from $table where $id=$value\"</span>);</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"id为\"</span>. $id.<span class=\"string\">\" 的记录被成功删除!\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//根据$id值查询表中的记录</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_select</span><span class=\"params\">($table,$id)</span></span>&#123;</div><div class=\"line\">        $fileinfo=<span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"select * from $table where id=$id\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> $fileinfo;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Navicat清空Mysql表后让id自增再从1开始","date":"2014-05-31T04:02:44.000Z","_content":"在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用`alter table table_name AUTO_INCREMENT=n`(n为起始值)命令来重置自增字段的起始数字，\n\n<!--more-->\n\n当然，可以直接使用`truncate table table_name`清空表 id就会从1开始.","source":"_posts/after-the-empty-navicat-mysql-table-id-since-increased-from-1-again.md","raw":"---\ntitle: Navicat清空Mysql表后让id自增再从1开始\ndate: 2014-05-31 12:02:44\ntags: MySql\n---\n在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用`alter table table_name AUTO_INCREMENT=n`(n为起始值)命令来重置自增字段的起始数字，\n\n<!--more-->\n\n当然，可以直接使用`truncate table table_name`清空表 id就会从1开始.","slug":"after-the-empty-navicat-mysql-table-id-since-increased-from-1-again","published":1,"updated":"2016-07-01T09:07:31.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2f00057sv1swaohzue","content":"<p>在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用<code>alter table table_name AUTO_INCREMENT=n</code>(n为起始值)命令来重置自增字段的起始数字，</p>\n<a id=\"more\"></a>\n<p>当然，可以直接使用<code>truncate table table_name</code>清空表 id就会从1开始.</p>\n","excerpt":"<p>在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用<code>alter table table_name AUTO_INCREMENT=n</code>(n为起始值)命令来重置自增字段的起始数字，</p>","more":"<p>当然，可以直接使用<code>truncate table table_name</code>清空表 id就会从1开始.</p>"},{"title":"angular的unique过滤器","date":"2016-11-24T03:41:07.000Z","_content":"\n![Angular](http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg)\n\nAngular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，\n只要有数据表达式的地方就能使用过滤器。\n除去使用默认的几个过滤器，我们还可以自己定义过滤器。\n\n其中`unique`是非常实用的一个过滤器，在`angular-ui`插件中，已经集成了`unique`方法，\n可以在[angular-ui/angular-ui-OLDREPO](https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js)\n中看到，代码如下\n\n<!--more-->\n\n```js\n/**\n * Filters out all duplicate items from an array by checking the specified key\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\n if the key is empty, the entire object will be compared\n if the key === false then no filtering will be performed\n * @return {array}\n */\nangular.module('ui.filters').filter('unique', function () {\n\n  return function (items, filterOn) {\n\n    if (filterOn === false) {\n      return items;\n    }\n\n    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n      var hashCheck = {}, newItems = [];\n\n      var extractValueToCompare = function (item) {\n        if (angular.isObject(item) && angular.isString(filterOn)) {\n          return item[filterOn];\n        } else {\n          return item;\n        }\n      };\n\n      angular.forEach(items, function (item) {\n        var valueToCheck, isDuplicate = false;\n\n        for (var i = 0; i < newItems.length; i++) {\n          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\n            isDuplicate = true;\n            break;\n          }\n        }\n        if (!isDuplicate) {\n          newItems.push(item);\n        }\n\n      });\n      items = newItems;\n    }\n    return items;\n  };\n});\n```\n\n同时，有一个angular插件，提供了不同的filter，[angular-filter](https://github.com/a8m/angular-filter#unique),\n可以直接注入该插件，实现我们需要的`unique`过滤器","source":"_posts/angular-unique-filter.md","raw":"---\ntitle: angular的unique过滤器\ndate: 2016-11-24 11:41:07\ntags: [javascript,angular]\n---\n\n![Angular](http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg)\n\nAngular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，\n只要有数据表达式的地方就能使用过滤器。\n除去使用默认的几个过滤器，我们还可以自己定义过滤器。\n\n其中`unique`是非常实用的一个过滤器，在`angular-ui`插件中，已经集成了`unique`方法，\n可以在[angular-ui/angular-ui-OLDREPO](https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js)\n中看到，代码如下\n\n<!--more-->\n\n```js\n/**\n * Filters out all duplicate items from an array by checking the specified key\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\n if the key is empty, the entire object will be compared\n if the key === false then no filtering will be performed\n * @return {array}\n */\nangular.module('ui.filters').filter('unique', function () {\n\n  return function (items, filterOn) {\n\n    if (filterOn === false) {\n      return items;\n    }\n\n    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n      var hashCheck = {}, newItems = [];\n\n      var extractValueToCompare = function (item) {\n        if (angular.isObject(item) && angular.isString(filterOn)) {\n          return item[filterOn];\n        } else {\n          return item;\n        }\n      };\n\n      angular.forEach(items, function (item) {\n        var valueToCheck, isDuplicate = false;\n\n        for (var i = 0; i < newItems.length; i++) {\n          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\n            isDuplicate = true;\n            break;\n          }\n        }\n        if (!isDuplicate) {\n          newItems.push(item);\n        }\n\n      });\n      items = newItems;\n    }\n    return items;\n  };\n});\n```\n\n同时，有一个angular插件，提供了不同的filter，[angular-filter](https://github.com/a8m/angular-filter#unique),\n可以直接注入该插件，实现我们需要的`unique`过滤器","slug":"angular-unique-filter","published":1,"updated":"2016-11-24T04:17:41.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2f00087sv1jgp9rzxn","content":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg\" alt=\"Angular\"></p>\n<p>Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，<br>只要有数据表达式的地方就能使用过滤器。<br>除去使用默认的几个过滤器，我们还可以自己定义过滤器。</p>\n<p>其中<code>unique</code>是非常实用的一个过滤器，在<code>angular-ui</code>插件中，已经集成了<code>unique</code>方法，<br>可以在<a href=\"https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js\" target=\"_blank\" rel=\"external\">angular-ui/angular-ui-OLDREPO</a><br>中看到，代码如下</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Filters out all duplicate items from an array by checking the specified key</div><div class=\"line\"> * @param [key] &#123;string&#125; the name of the attribute of each object to compare for uniqueness</div><div class=\"line\"> if the key is empty, the entire object will be compared</div><div class=\"line\"> if the key === false then no filtering will be performed</div><div class=\"line\"> * @return &#123;array&#125;</div><div class=\"line\"> */</div><div class=\"line\">angular.module(<span class=\"string\">'ui.filters'</span>).filter(<span class=\"string\">'unique'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items, filterOn</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (filterOn === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((filterOn || angular.isUndefined(filterOn)) &amp;&amp; angular.isArray(items)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> hashCheck = &#123;&#125;, newItems = [];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> extractValueToCompare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (angular.isObject(item) &amp;&amp; angular.isString(filterOn)) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> item[filterOn];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> item;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      angular.forEach(items, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> valueToCheck, isDuplicate = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newItems.length; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) &#123;</div><div class=\"line\">            isDuplicate = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isDuplicate) &#123;</div><div class=\"line\">          newItems.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\">      items = newItems;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> items;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>同时，有一个angular插件，提供了不同的filter，<a href=\"https://github.com/a8m/angular-filter#unique\" target=\"_blank\" rel=\"external\">angular-filter</a>,<br>可以直接注入该插件，实现我们需要的<code>unique</code>过滤器</p>\n","excerpt":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ngFilter.jpg\" alt=\"Angular\"></p>\n<p>Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，<br>只要有数据表达式的地方就能使用过滤器。<br>除去使用默认的几个过滤器，我们还可以自己定义过滤器。</p>\n<p>其中<code>unique</code>是非常实用的一个过滤器，在<code>angular-ui</code>插件中，已经集成了<code>unique</code>方法，<br>可以在<a href=\"https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js\">angular-ui/angular-ui-OLDREPO</a><br>中看到，代码如下</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Filters out all duplicate items from an array by checking the specified key</div><div class=\"line\"> * @param [key] &#123;string&#125; the name of the attribute of each object to compare for uniqueness</div><div class=\"line\"> if the key is empty, the entire object will be compared</div><div class=\"line\"> if the key === false then no filtering will be performed</div><div class=\"line\"> * @return &#123;array&#125;</div><div class=\"line\"> */</span></div><div class=\"line\">angular.module(<span class=\"string\">'ui.filters'</span>).filter(<span class=\"string\">'unique'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items, filterOn</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (filterOn === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((filterOn || angular.isUndefined(filterOn)) &amp;&amp; angular.isArray(items)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> hashCheck = &#123;&#125;, newItems = [];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> extractValueToCompare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (angular.isObject(item) &amp;&amp; angular.isString(filterOn)) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> item[filterOn];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> item;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">      angular.forEach(items, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> valueToCheck, isDuplicate = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newItems.length; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) &#123;</div><div class=\"line\">            isDuplicate = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isDuplicate) &#123;</div><div class=\"line\">          newItems.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\">      items = newItems;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> items;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>同时，有一个angular插件，提供了不同的filter，<a href=\"https://github.com/a8m/angular-filter#unique\">angular-filter</a>,<br>可以直接注入该插件，实现我们需要的<code>unique</code>过滤器</p>"},{"title":"angular为绑定数据的变化添加动画","date":"2016-11-30T08:07:07.000Z","_content":"\n在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子\n\n![datachangge](http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif)\n\n在angular中，我们可以使用ngAnimate来实现对应的效果\n\n<!--more-->\n\n## 以数据为CLASS，监听样式变化\n\n在需要监听变化的数据前，加入一个以数据作为class名的样式\n\n```html\n<span class=\"my-example value-{{myValue}}\">{{myValue}}</span>\n```\n\n这时，当数据发生变化之后，会自动添加`新数据-add`,`旧数据-remove`,`新数据-add-active`,`旧数据-remove-active`样式\n\n![add](http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-type.png)\n\n这时，我们在SASS *(less)* 样式中，筛选包含`-add`的样式，为其添加变化中的效果\n\n```css\nspan.my-example{\n    display: inline-block;\n    padding: 0 3px;\n    background-color: #FFFFFF;\n    color: #48a8d6;\n    transition: background-color 0.5s linear 0s;\n    &[class*=\"-add\"] {\n        background-color: #48a8d6;\n        color: #FFFFFFF;\n    }\n}\n```\n\n这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。\n\n## 使用ngAnimateSwap\n\n在 *angular 1.5* 版本之后，可以使用ngAnimateSwap方法检测数据的变化\n\n```html\n<div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n    {{ number }}\n  </div>\n```\n详情参阅 [官方文档](https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap)\n\n## 监听数据变化，发生变化添加样式\n\n**HTML**\n\n```html\n<span animate-on-change=\"someValue\">{{someValue}}</span>\n```\n**Directive**\n\n```js\nmyModule.directive('animateOnChange', function($timeout) {\n  return function(scope, element, attr) {\n    scope.$watch(attr.animateOnChange, function(nv,ov) {\n      if (nv!=ov) {\n        element.addClass('changed');\n        $timeout(function() {\n          element.removeClass('changed');\n        }, 1000); // Could be enhanced to take duration as a parameter\n      }\n    });\n  };\n});\n```\n\n**CSS**\n\n```css\n[animate-on-change] {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n[animate-on-change].changed {\n  background-color: red;\n  transition: none;\n  -webkit-transition: none;\n}\n```\n\n\n> 参考资料： http://stackoverflow.com/a/25894670/4945494 \n> http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes","source":"_posts/animate-angular-data-change.md","raw":"---\ntitle: angular为绑定数据的变化添加动画\ndate: 2016-11-30 16:07:07\ntags: [angular,javascript]\n---\n\n在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子\n\n![datachangge](http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif)\n\n在angular中，我们可以使用ngAnimate来实现对应的效果\n\n<!--more-->\n\n## 以数据为CLASS，监听样式变化\n\n在需要监听变化的数据前，加入一个以数据作为class名的样式\n\n```html\n<span class=\"my-example value-{{myValue}}\">{{myValue}}</span>\n```\n\n这时，当数据发生变化之后，会自动添加`新数据-add`,`旧数据-remove`,`新数据-add-active`,`旧数据-remove-active`样式\n\n![add](http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-type.png)\n\n这时，我们在SASS *(less)* 样式中，筛选包含`-add`的样式，为其添加变化中的效果\n\n```css\nspan.my-example{\n    display: inline-block;\n    padding: 0 3px;\n    background-color: #FFFFFF;\n    color: #48a8d6;\n    transition: background-color 0.5s linear 0s;\n    &[class*=\"-add\"] {\n        background-color: #48a8d6;\n        color: #FFFFFFF;\n    }\n}\n```\n\n这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。\n\n## 使用ngAnimateSwap\n\n在 *angular 1.5* 版本之后，可以使用ngAnimateSwap方法检测数据的变化\n\n```html\n<div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n    {{ number }}\n  </div>\n```\n详情参阅 [官方文档](https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap)\n\n## 监听数据变化，发生变化添加样式\n\n**HTML**\n\n```html\n<span animate-on-change=\"someValue\">{{someValue}}</span>\n```\n**Directive**\n\n```js\nmyModule.directive('animateOnChange', function($timeout) {\n  return function(scope, element, attr) {\n    scope.$watch(attr.animateOnChange, function(nv,ov) {\n      if (nv!=ov) {\n        element.addClass('changed');\n        $timeout(function() {\n          element.removeClass('changed');\n        }, 1000); // Could be enhanced to take duration as a parameter\n      }\n    });\n  };\n});\n```\n\n**CSS**\n\n```css\n[animate-on-change] {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n[animate-on-change].changed {\n  background-color: red;\n  transition: none;\n  -webkit-transition: none;\n}\n```\n\n\n> 参考资料： http://stackoverflow.com/a/25894670/4945494 \n> http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes","slug":"animate-angular-data-change","published":1,"updated":"2016-12-01T07:38:20.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2f00097sv1jbc35yxq","content":"<p>在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif\" alt=\"datachangge\"></p>\n<p>在angular中，我们可以使用ngAnimate来实现对应的效果</p>\n<a id=\"more\"></a>\n<h2 id=\"以数据为CLASS，监听样式变化\"><a href=\"#以数据为CLASS，监听样式变化\" class=\"headerlink\" title=\"以数据为CLASS，监听样式变化\"></a>以数据为CLASS，监听样式变化</h2><p>在需要监听变化的数据前，加入一个以数据作为class名的样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-example value-&#123;&#123;myValue&#125;&#125;\"</span>&gt;</span>&#123;&#123;myValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时，当数据发生变化之后，会自动添加<code>新数据-add</code>,<code>旧数据-remove</code>,<code>新数据-add-active</code>,<code>旧数据-remove-active</code>样式</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-type.png\" alt=\"add\"></p>\n<p>这时，我们在SASS <em>(less)</em> 样式中，筛选包含<code>-add</code>的样式，为其添加变化中的效果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">span.my-example&#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 0 3px;</div><div class=\"line\">    background-color: #FFFFFF;</div><div class=\"line\">    color: #48a8d6;</div><div class=\"line\">    transition: background-color 0.5s linear 0s;</div><div class=\"line\">    &amp;[class*=\"-add\"] &#123;</div><div class=\"line\">        background-color: #48a8d6;</div><div class=\"line\">        color: #FFFFFFF;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。</p>\n<h2 id=\"使用ngAnimateSwap\"><a href=\"#使用ngAnimateSwap\" class=\"headerlink\" title=\"使用ngAnimateSwap\"></a>使用ngAnimateSwap</h2><p>在 <em>angular 1.5</em> 版本之后，可以使用ngAnimateSwap方法检测数据的变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-animate-swap</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cell swap-animation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"colorClass(number)\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; number &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>详情参阅 <a href=\"https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"监听数据变化，发生变化添加样式\"><a href=\"#监听数据变化，发生变化添加样式\" class=\"headerlink\" title=\"监听数据变化，发生变化添加样式\"></a>监听数据变化，发生变化添加样式</h2><p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">animate-on-change</span>=<span class=\"string\">\"someValue\"</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.directive(<span class=\"string\">'animateOnChange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attr</span>) </span>&#123;</div><div class=\"line\">    scope.$watch(attr.animateOnChange, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nv,ov</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (nv!=ov) &#123;</div><div class=\"line\">        element.addClass(<span class=\"string\">'changed'</span>);</div><div class=\"line\">        $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          element.removeClass(<span class=\"string\">'changed'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// Could be enhanced to take duration as a parameter</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span><span class=\"selector-class\">.changed</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: none;</div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料： <a href=\"http://stackoverflow.com/a/25894670/4945494\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/a/25894670/4945494</a><br><a href=\"http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes</a></p>\n</blockquote>\n","excerpt":"<p>在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-3GIF.gif\" alt=\"datachangge\"></p>\n<p>在angular中，我们可以使用ngAnimate来实现对应的效果</p>","more":"<h2 id=\"以数据为CLASS，监听样式变化\"><a href=\"#以数据为CLASS，监听样式变化\" class=\"headerlink\" title=\"以数据为CLASS，监听样式变化\"></a>以数据为CLASS，监听样式变化</h2><p>在需要监听变化的数据前，加入一个以数据作为class名的样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-example value-&#123;&#123;myValue&#125;&#125;\"</span>&gt;</span>&#123;&#123;myValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时，当数据发生变化之后，会自动添加<code>新数据-add</code>,<code>旧数据-remove</code>,<code>新数据-add-active</code>,<code>旧数据-remove-active</code>样式</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ng-bind-type.png\" alt=\"add\"></p>\n<p>这时，我们在SASS <em>(less)</em> 样式中，筛选包含<code>-add</code>的样式，为其添加变化中的效果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">span.my-example&#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 0 3px;</div><div class=\"line\">    background-color: #FFFFFF;</div><div class=\"line\">    color: #48a8d6;</div><div class=\"line\">    transition: background-color 0.5s linear 0s;</div><div class=\"line\">    &amp;[class*=\"-add\"] &#123;</div><div class=\"line\">        background-color: #48a8d6;</div><div class=\"line\">        color: #FFFFFFF;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。</p>\n<h2 id=\"使用ngAnimateSwap\"><a href=\"#使用ngAnimateSwap\" class=\"headerlink\" title=\"使用ngAnimateSwap\"></a>使用ngAnimateSwap</h2><p>在 <em>angular 1.5</em> 版本之后，可以使用ngAnimateSwap方法检测数据的变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-animate-swap</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cell swap-animation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"colorClass(number)\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; number &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>详情参阅 <a href=\"https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap\">官方文档</a></p>\n<h2 id=\"监听数据变化，发生变化添加样式\"><a href=\"#监听数据变化，发生变化添加样式\" class=\"headerlink\" title=\"监听数据变化，发生变化添加样式\"></a>监听数据变化，发生变化添加样式</h2><p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">animate-on-change</span>=<span class=\"string\">\"someValue\"</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.directive(<span class=\"string\">'animateOnChange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attr</span>) </span>&#123;</div><div class=\"line\">    scope.$watch(attr.animateOnChange, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nv,ov</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (nv!=ov) &#123;</div><div class=\"line\">        element.addClass(<span class=\"string\">'changed'</span>);</div><div class=\"line\">        $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          element.removeClass(<span class=\"string\">'changed'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// Could be enhanced to take duration as a parameter</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span><span class=\"selector-class\">.changed</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: none;</div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料： <a href=\"http://stackoverflow.com/a/25894670/4945494\">http://stackoverflow.com/a/25894670/4945494</a><br><a href=\"http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes\">http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes</a></p>\n</blockquote>"},{"title":"通过node搭建shadowsocks服务器","date":"2017-02-28T09:14:14.000Z","_content":"\n![shadowsocks](http://o93mwnwp7.bkt.clouddn.com/github/ss.png)\n\n在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。\n\n安装过程如下，服务器已经安装好node服务，并且可以使用`npm`命令\n\n<!--more-->\n\n1. 全局安装shadowsocks模块\n```\nnpm install -g shadowsocks\n```\n2. 找到安装目录`C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks\n`，编辑`config.json`文件\n```\n { \n    \"server\":\"IP地址\", \n    \"server_port\":443, \n    \"local_address\":\"127.0.0.1\", \n    \"local_port\":1080, \n    \"password\":\"密码\", \n    \"timeout\":600, \n    \"method\":\"rc4-md5\"\n}\n```\n2. 启动服务，执行命令\n```\nssserver\n```\n","source":"_posts/build-shadowsocks-server-through-the-node.md","raw":"---\ntitle: 通过node搭建shadowsocks服务器\ndate: 2017-02-28 17:14:14\ntags: 'node'\n---\n\n![shadowsocks](http://o93mwnwp7.bkt.clouddn.com/github/ss.png)\n\n在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。\n\n安装过程如下，服务器已经安装好node服务，并且可以使用`npm`命令\n\n<!--more-->\n\n1. 全局安装shadowsocks模块\n```\nnpm install -g shadowsocks\n```\n2. 找到安装目录`C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks\n`，编辑`config.json`文件\n```\n { \n    \"server\":\"IP地址\", \n    \"server_port\":443, \n    \"local_address\":\"127.0.0.1\", \n    \"local_port\":1080, \n    \"password\":\"密码\", \n    \"timeout\":600, \n    \"method\":\"rc4-md5\"\n}\n```\n2. 启动服务，执行命令\n```\nssserver\n```\n","slug":"build-shadowsocks-server-through-the-node","published":1,"updated":"2017-03-01T03:04:40.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000c7sv1ktyaqoec","content":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ss.png\" alt=\"shadowsocks\"></p>\n<p>在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。</p>\n<p>安装过程如下，服务器已经安装好node服务，并且可以使用<code>npm</code>命令</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>全局安装shadowsocks模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>找到安装目录<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks</code>，编辑<code>config.json</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123; </div><div class=\"line\">    &quot;server&quot;:&quot;IP地址&quot;, </div><div class=\"line\">    &quot;server_port&quot;:443, </div><div class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, </div><div class=\"line\">    &quot;local_port&quot;:1080, </div><div class=\"line\">    &quot;password&quot;:&quot;密码&quot;, </div><div class=\"line\">    &quot;timeout&quot;:600, </div><div class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ss.png\" alt=\"shadowsocks\"></p>\n<p>在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。</p>\n<p>安装过程如下，服务器已经安装好node服务，并且可以使用<code>npm</code>命令</p>","more":"<ol>\n<li><p>全局安装shadowsocks模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>找到安装目录<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks</code>，编辑<code>config.json</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123; </div><div class=\"line\">    &quot;server&quot;:&quot;IP地址&quot;, </div><div class=\"line\">    &quot;server_port&quot;:443, </div><div class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, </div><div class=\"line\">    &quot;local_port&quot;:1080, </div><div class=\"line\">    &quot;password&quot;:&quot;密码&quot;, </div><div class=\"line\">    &quot;timeout&quot;:600, </div><div class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"C#重载、C#重写和C#隐藏的区别","date":"2014-05-26T03:22:07.000Z","_content":"C#重载、C#重写和C#隐藏的定义\n\nC#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。\n\nC#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的\n\n<!--more-->\n\n例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.\n\nC#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。\n\nC#重载时，根据参数选择调用的方法；\n\nC#重写时，访问父类子类皆调用子类的重写方法；\n\nC#隐藏时，访问父类则调用父类的方法，子类子类的方法。\n\nC#隐藏(new)示例：\n\n```C#\nusing System;    \n   class A    \n   {    \n         public void F()      \n         {    \n            Console.WriteLine(\"A.F\");      \n         }    \n   }    \n   class B: A    \n   {    \n         new public void F()      \n         {      \n            Console.WriteLine(\"B.F\");      \n         }    \n   }    \n   class Test    \n   {    \n         static void Main(string[] args)  \n         {    \n               B b = new B();    \n               b.F();    \n               A a = b;      \n               a.F();    \n         }    \n   }   \n```\n 输出为 \n ```cmd\nB.F \nA.F \n```\n\nC#重写virtual(虚方法)示例  \n\n```C#\nusing System;    \n class A    \n {    \n       public virtual void F()      \n       {    \n          Console.WriteLine(\"A.F\");      \n       }    \n }    \n class B: A    \n {    \n       public override void F()      \n       {      \n          Console.WriteLine(\"B.F\");      \n       }    \n }    \n class Test    \n {    \n       static void Main()      \n       {    \n             B b = new B();    \n             b.F();    \n             A a = b;      \n             a.F();    \n       }    \n }  \n```\n输出为 \n```cmd\nB.F \nB.F\n```\n补充：重写override一般用于接口实现和继承类的方法改写，要注意\n\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n3. 覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n4. 被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\n[原文地址](http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/)","source":"_posts/difference-between-overloading-rewriting-and-hiding-in-c.md","raw":"---\ntitle: 'C#重载、C#重写和C#隐藏的区别'\ndate: 2014-05-26 11:22:07\ntags: C#\n---\nC#重载、C#重写和C#隐藏的定义\n\nC#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。\n\nC#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的\n\n<!--more-->\n\n例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.\n\nC#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。\n\nC#重载时，根据参数选择调用的方法；\n\nC#重写时，访问父类子类皆调用子类的重写方法；\n\nC#隐藏时，访问父类则调用父类的方法，子类子类的方法。\n\nC#隐藏(new)示例：\n\n```C#\nusing System;    \n   class A    \n   {    \n         public void F()      \n         {    \n            Console.WriteLine(\"A.F\");      \n         }    \n   }    \n   class B: A    \n   {    \n         new public void F()      \n         {      \n            Console.WriteLine(\"B.F\");      \n         }    \n   }    \n   class Test    \n   {    \n         static void Main(string[] args)  \n         {    \n               B b = new B();    \n               b.F();    \n               A a = b;      \n               a.F();    \n         }    \n   }   \n```\n 输出为 \n ```cmd\nB.F \nA.F \n```\n\nC#重写virtual(虚方法)示例  \n\n```C#\nusing System;    \n class A    \n {    \n       public virtual void F()      \n       {    \n          Console.WriteLine(\"A.F\");      \n       }    \n }    \n class B: A    \n {    \n       public override void F()      \n       {      \n          Console.WriteLine(\"B.F\");      \n       }    \n }    \n class Test    \n {    \n       static void Main()      \n       {    \n             B b = new B();    \n             b.F();    \n             A a = b;      \n             a.F();    \n       }    \n }  \n```\n输出为 \n```cmd\nB.F \nB.F\n```\n补充：重写override一般用于接口实现和继承类的方法改写，要注意\n\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n3. 覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n4. 被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\n[原文地址](http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/)","slug":"difference-between-overloading-rewriting-and-hiding-in-c","published":1,"updated":"2016-12-01T08:35:11.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000d7sv1g07jp2y1","content":"<p>C#重载、C#重写和C#隐藏的定义</p>\n<p>C#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。</p>\n<p>C#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的</p>\n<a id=\"more\"></a>\n<p>例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.</p>\n<p>C#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。</p>\n<p>C#重载时，根据参数选择调用的方法；</p>\n<p>C#重写时，访问父类子类皆调用子类的重写方法；</p>\n<p>C#隐藏时，访问父类则调用父类的方法，子类子类的方法。</p>\n<p>C#隐藏(new)示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;    </div><div class=\"line\">   class A    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         public void F()      </div><div class=\"line\">         &#123;    </div><div class=\"line\">            Console.WriteLine(&quot;A.F&quot;);      </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;    </div><div class=\"line\">   class B: A    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         new public void F()      </div><div class=\"line\">         &#123;      </div><div class=\"line\">            Console.WriteLine(&quot;B.F&quot;);      </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;    </div><div class=\"line\">   class Test    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         static void Main(string[] args)  </div><div class=\"line\">         &#123;    </div><div class=\"line\">               B b = new B();    </div><div class=\"line\">               b.F();    </div><div class=\"line\">               A a = b;      </div><div class=\"line\">               a.F();    </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p> 输出为<br> <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B.F </div><div class=\"line\">A.F</div></pre></td></tr></table></figure></p>\n<p>C#重写virtual(虚方法)示例  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;    </div><div class=\"line\"> class A    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       public virtual void F()      </div><div class=\"line\">       &#123;    </div><div class=\"line\">          Console.WriteLine(&quot;A.F&quot;);      </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;    </div><div class=\"line\"> class B: A    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       public override void F()      </div><div class=\"line\">       &#123;      </div><div class=\"line\">          Console.WriteLine(&quot;B.F&quot;);      </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;    </div><div class=\"line\"> class Test    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       static void Main()      </div><div class=\"line\">       &#123;    </div><div class=\"line\">             B b = new B();    </div><div class=\"line\">             b.F();    </div><div class=\"line\">             A a = b;      </div><div class=\"line\">             a.F();    </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>输出为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B.F </div><div class=\"line\">B.F</div></pre></td></tr></table></figure></p>\n<p>补充：重写override一般用于接口实现和继承类的方法改写，要注意</p>\n<ol>\n<li>覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；</li>\n<li>覆盖的方法的返回值必须和被覆盖的方法的返回一致；</li>\n<li>覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；</li>\n<li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li>\n</ol>\n<p><a href=\"http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n","excerpt":"<p>C#重载、C#重写和C#隐藏的定义</p>\n<p>C#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。</p>\n<p>C#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的</p>","more":"<p>例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.</p>\n<p>C#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。</p>\n<p>C#重载时，根据参数选择调用的方法；</p>\n<p>C#重写时，访问父类子类皆调用子类的重写方法；</p>\n<p>C#隐藏时，访问父类则调用父类的方法，子类子类的方法。</p>\n<p>C#隐藏(new)示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;    </div><div class=\"line\">   class A    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         public void F()      </div><div class=\"line\">         &#123;    </div><div class=\"line\">            Console.WriteLine(&quot;A.F&quot;);      </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;    </div><div class=\"line\">   class B: A    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         new public void F()      </div><div class=\"line\">         &#123;      </div><div class=\"line\">            Console.WriteLine(&quot;B.F&quot;);      </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;    </div><div class=\"line\">   class Test    </div><div class=\"line\">   &#123;    </div><div class=\"line\">         static void Main(string[] args)  </div><div class=\"line\">         &#123;    </div><div class=\"line\">               B b = new B();    </div><div class=\"line\">               b.F();    </div><div class=\"line\">               A a = b;      </div><div class=\"line\">               a.F();    </div><div class=\"line\">         &#125;    </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p> 输出为<br> <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B.F </div><div class=\"line\">A.F</div></pre></td></tr></table></figure></p>\n<p>C#重写virtual(虚方法)示例  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;    </div><div class=\"line\"> class A    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       public virtual void F()      </div><div class=\"line\">       &#123;    </div><div class=\"line\">          Console.WriteLine(&quot;A.F&quot;);      </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;    </div><div class=\"line\"> class B: A    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       public override void F()      </div><div class=\"line\">       &#123;      </div><div class=\"line\">          Console.WriteLine(&quot;B.F&quot;);      </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;    </div><div class=\"line\"> class Test    </div><div class=\"line\"> &#123;    </div><div class=\"line\">       static void Main()      </div><div class=\"line\">       &#123;    </div><div class=\"line\">             B b = new B();    </div><div class=\"line\">             b.F();    </div><div class=\"line\">             A a = b;      </div><div class=\"line\">             a.F();    </div><div class=\"line\">       &#125;    </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>输出为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B.F </div><div class=\"line\">B.F</div></pre></td></tr></table></figure></p>\n<p>补充：重写override一般用于接口实现和继承类的方法改写，要注意</p>\n<ol>\n<li>覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；</li>\n<li>覆盖的方法的返回值必须和被覆盖的方法的返回一致；</li>\n<li>覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；</li>\n<li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li>\n</ol>\n<p><a href=\"http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/\">原文地址</a></p>"},{"title":"css3实现科技感的呼吸灯效果","date":"2016-11-18T08:16:19.000Z","_content":"\n呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。\n\n使用CSS3的`animation`方法可以实现很多迷人的网页动画特效。\n\n使用CSS3 配合`box-shadow`即可实现类似的效果\n\n![呼吸灯](http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif)\n\n<!--more-->\n\n样式代码如下\n\n```css\n .breathe-div {\n    width: 100px;\n    height: 100px;\n    border: 1px solid #2b92d4;\n    border-radius: 50%;\n    text-align: center;\n    cursor: pointer;\n    margin:150px auto;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n    overflow: hidden;\n    -webkit-animation-timing-function: ease-in-out;\n    -webkit-animation-name: breathe;\n    -webkit-animation-duration: 1500ms;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-direction: alternate;\n}\n\n@-webkit-keyframes breathe {\n    0% {\n        opacity: .4;\n        box-shadow: 0 1px 2px rgba(0, 147, 223, 0.4), 0 1px 1px rgba(0, 147, 223, 0.1) inset;\n    }\n\n    100% {\n        opacity: 1;\n        border: 1px solid rgba(59, 235, 235, 0.7);\n        box-shadow: 0 1px 30px #0093df, 0 1px 20px #0093df inset;\n    }\n}\n```\n\nHTML 代码\n\n```html\n<div class=\"breathe-div\"></div>\n```","source":"_posts/css3-breathing-lamp-effect.md","raw":"---\ntitle: css3实现科技感的呼吸灯效果\ndate: 2016-11-18 16:16:19\ntags: CSS3\n---\n\n呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。\n\n使用CSS3的`animation`方法可以实现很多迷人的网页动画特效。\n\n使用CSS3 配合`box-shadow`即可实现类似的效果\n\n![呼吸灯](http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif)\n\n<!--more-->\n\n样式代码如下\n\n```css\n .breathe-div {\n    width: 100px;\n    height: 100px;\n    border: 1px solid #2b92d4;\n    border-radius: 50%;\n    text-align: center;\n    cursor: pointer;\n    margin:150px auto;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n    overflow: hidden;\n    -webkit-animation-timing-function: ease-in-out;\n    -webkit-animation-name: breathe;\n    -webkit-animation-duration: 1500ms;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-direction: alternate;\n}\n\n@-webkit-keyframes breathe {\n    0% {\n        opacity: .4;\n        box-shadow: 0 1px 2px rgba(0, 147, 223, 0.4), 0 1px 1px rgba(0, 147, 223, 0.1) inset;\n    }\n\n    100% {\n        opacity: 1;\n        border: 1px solid rgba(59, 235, 235, 0.7);\n        box-shadow: 0 1px 30px #0093df, 0 1px 20px #0093df inset;\n    }\n}\n```\n\nHTML 代码\n\n```html\n<div class=\"breathe-div\"></div>\n```","slug":"css3-breathing-lamp-effect","published":1,"updated":"2016-11-18T08:25:56.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000g7sv15za1ebas","content":"<p>呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。</p>\n<p>使用CSS3的<code>animation</code>方法可以实现很多迷人的网页动画特效。</p>\n<p>使用CSS3 配合<code>box-shadow</code>即可实现类似的效果</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif\" alt=\"呼吸灯\"></p>\n<a id=\"more\"></a>\n<p>样式代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-class\">.breathe-div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#2b92d4</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span> auto;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-timing-function</span>: ease-in-out;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-name</span>: breathe;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-duration</span>: <span class=\"number\">1500ms</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-iteration-count</span>: infinite;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-direction</span>: alternate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> breathe &#123;</div><div class=\"line\">    0% &#123;</div><div class=\"line\">        <span class=\"attribute\">opacity</span>: .<span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 147, 223, 0.4), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(0, 147, 223, 0.1) inset;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    100% &#123;</div><div class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgba</span>(59, 235, 235, 0.7);</div><div class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">30px</span> <span class=\"number\">#0093df</span>, <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">20px</span> <span class=\"number\">#0093df</span> inset;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>HTML 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breathe-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p>呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。</p>\n<p>使用CSS3的<code>animation</code>方法可以实现很多迷人的网页动画特效。</p>\n<p>使用CSS3 配合<code>box-shadow</code>即可实现类似的效果</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/GIF.gif\" alt=\"呼吸灯\"></p>","more":"<p>样式代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-class\">.breathe-div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#2b92d4</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span> auto;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-timing-function</span>: ease-in-out;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-name</span>: breathe;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-duration</span>: <span class=\"number\">1500ms</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-iteration-count</span>: infinite;</div><div class=\"line\">    <span class=\"attribute\">-webkit-animation-direction</span>: alternate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> breathe &#123;</div><div class=\"line\">    0% &#123;</div><div class=\"line\">        <span class=\"attribute\">opacity</span>: .<span class=\"number\">4</span>;</div><div class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 147, 223, 0.4), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(0, 147, 223, 0.1) inset;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    100% &#123;</div><div class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgba</span>(59, 235, 235, 0.7);</div><div class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">30px</span> <span class=\"number\">#0093df</span>, <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">20px</span> <span class=\"number\">#0093df</span> inset;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>HTML 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breathe-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"go.js更新远程图片资源","date":"2016-10-27T03:28:44.000Z","_content":"[go.js](http://gojs.net/)允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题\n，需要动态更新当前选中node节点上引用的外部图片资源内容。\n\n我们知道，go.js在更新model时，需要使用Transactions API\n\n<!--more-->\n\n```javascript\n diagram.startTransaction(\"a trans\");\n    // 更新代码\n   \n diagram.commitTransaction(\"a trans\");\n```\n\n首先，获取当前选中节点的方法是\n\n```js\n var selnode = myDiagram.selection.first();\n ```\n\n 之后要进行对应的变化\n\n ```js\n  myDiagram.startTransaction(\"reload node svg\");\n   // 更新图片地址\n  myDiagram.model.setDataProperty(selnode.data, \"source\", \"newSourceUrl\");\n  // 完成 transaction\n  myDiagram.commitTransaction(\"reload node svg\");\n```\n\n**这里要注意两个地方**\n\n`setDataProperty`是作用在`myDiagram.model`上面的方法\n\n`setDataProperty`的第一个参数是`selnode.data`，因为我们变化的是data的数据内容，\n如果只填写`selnode`则会报错\n\n> *GraphLinksModel.setDataProperty is modifying a GraphObject, \"Node#21738(Picture)\" go.js:17\nIs that really your intent?*\n\n\n### 参考资源\n\nhttp://gojs.net/latest/intro/transactions.html\n\nhttps://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2","source":"_posts/go-js-update-remote-image-resources.md","raw":"---\ntitle: go.js更新远程图片资源\ndate: 2016-10-27 11:28:44\ntags: [gojs,javascript]\n---\n[go.js](http://gojs.net/)允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题\n，需要动态更新当前选中node节点上引用的外部图片资源内容。\n\n我们知道，go.js在更新model时，需要使用Transactions API\n\n<!--more-->\n\n```javascript\n diagram.startTransaction(\"a trans\");\n    // 更新代码\n   \n diagram.commitTransaction(\"a trans\");\n```\n\n首先，获取当前选中节点的方法是\n\n```js\n var selnode = myDiagram.selection.first();\n ```\n\n 之后要进行对应的变化\n\n ```js\n  myDiagram.startTransaction(\"reload node svg\");\n   // 更新图片地址\n  myDiagram.model.setDataProperty(selnode.data, \"source\", \"newSourceUrl\");\n  // 完成 transaction\n  myDiagram.commitTransaction(\"reload node svg\");\n```\n\n**这里要注意两个地方**\n\n`setDataProperty`是作用在`myDiagram.model`上面的方法\n\n`setDataProperty`的第一个参数是`selnode.data`，因为我们变化的是data的数据内容，\n如果只填写`selnode`则会报错\n\n> *GraphLinksModel.setDataProperty is modifying a GraphObject, \"Node#21738(Picture)\" go.js:17\nIs that really your intent?*\n\n\n### 参考资源\n\nhttp://gojs.net/latest/intro/transactions.html\n\nhttps://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2","slug":"go-js-update-remote-image-resources","published":1,"updated":"2016-10-27T05:16:40.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000h7sv1nc1uwq2l","content":"<p><a href=\"http://gojs.net/\" target=\"_blank\" rel=\"external\">go.js</a>允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题<br>，需要动态更新当前选中node节点上引用的外部图片资源内容。</p>\n<p>我们知道，go.js在更新model时，需要使用Transactions API</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">diagram.startTransaction(<span class=\"string\">\"a trans\"</span>);</div><div class=\"line\">   <span class=\"comment\">// 更新代码</span></div><div class=\"line\">  </div><div class=\"line\">diagram.commitTransaction(<span class=\"string\">\"a trans\"</span>);</div></pre></td></tr></table></figure>\n<p>首先，获取当前选中节点的方法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selnode = myDiagram.selection.first();</div></pre></td></tr></table></figure>\n<p> 之后要进行对应的变化</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.startTransaction(<span class=\"string\">\"reload node svg\"</span>);</div><div class=\"line\"> <span class=\"comment\">// 更新图片地址</span></div><div class=\"line\">myDiagram.model.setDataProperty(selnode.data, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"newSourceUrl\"</span>);</div><div class=\"line\"><span class=\"comment\">// 完成 transaction</span></div><div class=\"line\">myDiagram.commitTransaction(<span class=\"string\">\"reload node svg\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>这里要注意两个地方</strong></p>\n<p><code>setDataProperty</code>是作用在<code>myDiagram.model</code>上面的方法</p>\n<p><code>setDataProperty</code>的第一个参数是<code>selnode.data</code>，因为我们变化的是data的数据内容，<br>如果只填写<code>selnode</code>则会报错</p>\n<blockquote>\n<p><em>GraphLinksModel.setDataProperty is modifying a GraphObject, “Node#21738(Picture)” go.js:17<br>Is that really your intent?</em></p>\n</blockquote>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><p><a href=\"http://gojs.net/latest/intro/transactions.html\" target=\"_blank\" rel=\"external\">http://gojs.net/latest/intro/transactions.html</a></p>\n<p><a href=\"https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2\" target=\"_blank\" rel=\"external\">https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2</a></p>\n","excerpt":"<p><a href=\"http://gojs.net/\">go.js</a>允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题<br>，需要动态更新当前选中node节点上引用的外部图片资源内容。</p>\n<p>我们知道，go.js在更新model时，需要使用Transactions API</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">diagram.startTransaction(<span class=\"string\">\"a trans\"</span>);</div><div class=\"line\">   <span class=\"comment\">// 更新代码</span></div><div class=\"line\">  </div><div class=\"line\">diagram.commitTransaction(<span class=\"string\">\"a trans\"</span>);</div></pre></td></tr></table></figure>\n<p>首先，获取当前选中节点的方法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selnode = myDiagram.selection.first();</div></pre></td></tr></table></figure>\n<p> 之后要进行对应的变化</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.startTransaction(<span class=\"string\">\"reload node svg\"</span>);</div><div class=\"line\"> <span class=\"comment\">// 更新图片地址</span></div><div class=\"line\">myDiagram.model.setDataProperty(selnode.data, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"newSourceUrl\"</span>);</div><div class=\"line\"><span class=\"comment\">// 完成 transaction</span></div><div class=\"line\">myDiagram.commitTransaction(<span class=\"string\">\"reload node svg\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>这里要注意两个地方</strong></p>\n<p><code>setDataProperty</code>是作用在<code>myDiagram.model</code>上面的方法</p>\n<p><code>setDataProperty</code>的第一个参数是<code>selnode.data</code>，因为我们变化的是data的数据内容，<br>如果只填写<code>selnode</code>则会报错</p>\n<blockquote>\n<p><em>GraphLinksModel.setDataProperty is modifying a GraphObject, “Node#21738(Picture)” go.js:17<br>Is that really your intent?</em></p>\n</blockquote>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><p><a href=\"http://gojs.net/latest/intro/transactions.html\">http://gojs.net/latest/intro/transactions.html</a></p>\n<p><a href=\"https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2\">https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2</a></p>"},{"title":"PHP中获取当前页面的完整URL","date":"2014-04-29T09:30:55.000Z","_content":"除了在javascript中使用`location.href`获取当前浏览地址之外\n还可以使用PHP直接获取网页的地址\n\n<!--more-->\n\n```php\n/获取域名或主机地址   \necho $_SERVER['HTTP_HOST'].\"<br>\"; #localhost  \n  \n//获取网页地址   \necho $_SERVER['PHP_SELF'].\"<br>\"; #/blog/testurl.php  \n  \n//获取网址参数   \necho $_SERVER[\"QUERY_STRING\"].\"<br>\"; #id=5  \n  \n//获取用户代理   \necho $_SERVER['HTTP_REFERER'].\"<br>\";   \n  \n//获取完整的url  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'];  \n#http://localhost/blog/testurl.php?id=5  \n  \n//包含端口号的完整url  \necho 'http://'.$_SERVER['SERVER_NAME'].':'.$_SERVER[\"SERVER_PORT\"].$_SERVER[\"REQUEST_URI\"];   \n#http://localhost:80/blog/testurl.php?id=5  \n  \n//只取路径  \n$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER[\"REQUEST_URI\"];   \necho dirname($url);  \n#http://localhost/blog  \n```","source":"_posts/gets-the-current-php-complete-url-of-the-page.md","raw":"---\ntitle: PHP中获取当前页面的完整URL\ndate: 2014-04-29 17:30:55\ntags: [PHP]\n---\n除了在javascript中使用`location.href`获取当前浏览地址之外\n还可以使用PHP直接获取网页的地址\n\n<!--more-->\n\n```php\n/获取域名或主机地址   \necho $_SERVER['HTTP_HOST'].\"<br>\"; #localhost  \n  \n//获取网页地址   \necho $_SERVER['PHP_SELF'].\"<br>\"; #/blog/testurl.php  \n  \n//获取网址参数   \necho $_SERVER[\"QUERY_STRING\"].\"<br>\"; #id=5  \n  \n//获取用户代理   \necho $_SERVER['HTTP_REFERER'].\"<br>\";   \n  \n//获取完整的url  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'];  \n#http://localhost/blog/testurl.php?id=5  \n  \n//包含端口号的完整url  \necho 'http://'.$_SERVER['SERVER_NAME'].':'.$_SERVER[\"SERVER_PORT\"].$_SERVER[\"REQUEST_URI\"];   \n#http://localhost:80/blog/testurl.php?id=5  \n  \n//只取路径  \n$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER[\"REQUEST_URI\"];   \necho dirname($url);  \n#http://localhost/blog  \n```","slug":"gets-the-current-php-complete-url-of-the-page","published":1,"updated":"2016-10-27T03:54:18.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000j7sv1iu5pb5oo","content":"<p>除了在javascript中使用<code>location.href</code>获取当前浏览地址之外<br>还可以使用PHP直接获取网页的地址</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">/获取域名或主机地址   </div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#localhost  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取网页地址   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#/blog/testurl.php  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取网址参数   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">\"QUERY_STRING\"</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取用户代理   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_REFERER'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>;   </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取完整的url  </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'REQUEST_URI'</span>];  </div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">'?'</span>.$_SERVER[<span class=\"string\">'QUERY_STRING'</span>];  </div><div class=\"line\"><span class=\"comment\">#http://localhost/blog/testurl.php?id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//包含端口号的完整url  </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].<span class=\"string\">':'</span>.$_SERVER[<span class=\"string\">\"SERVER_PORT\"</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </div><div class=\"line\"><span class=\"comment\">#http://localhost:80/blog/testurl.php?id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//只取路径  </span></div><div class=\"line\">$url=<span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </div><div class=\"line\"><span class=\"keyword\">echo</span> dirname($url);  </div><div class=\"line\"><span class=\"comment\">#http://localhost/blog</span></div></pre></td></tr></table></figure>","excerpt":"<p>除了在javascript中使用<code>location.href</code>获取当前浏览地址之外<br>还可以使用PHP直接获取网页的地址</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">/获取域名或主机地址   </div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#localhost  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取网页地址   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#/blog/testurl.php  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取网址参数   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">\"QUERY_STRING\"</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取用户代理   </span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_REFERER'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>;   </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//获取完整的url  </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'REQUEST_URI'</span>];  </div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">'?'</span>.$_SERVER[<span class=\"string\">'QUERY_STRING'</span>];  </div><div class=\"line\"><span class=\"comment\">#http://localhost/blog/testurl.php?id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//包含端口号的完整url  </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].<span class=\"string\">':'</span>.$_SERVER[<span class=\"string\">\"SERVER_PORT\"</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </div><div class=\"line\"><span class=\"comment\">#http://localhost:80/blog/testurl.php?id=5  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//只取路径  </span></div><div class=\"line\">$url=<span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </div><div class=\"line\"><span class=\"keyword\">echo</span> dirname($url);  </div><div class=\"line\"><span class=\"comment\">#http://localhost/blog</span></div></pre></td></tr></table></figure>"},{"title":"实现元素在父元素中居中的方法","date":"2016-02-02T09:47:10.000Z","_content":"在网页制作中，常常会遇到需要将一个元素水平，垂直居中。  \n最常见的##水平##居中自然是行级元素`text-align:center`,块级元素在父级元素`text-align:center`之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。\n\n<!--more-->\n\n* 第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的`line-height=`元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。\n\n* 第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，`vertical-align: middle;`，设置图片的`vertical-align: middle;`即可\n\n* 第三：对于块级元素的居中，可以使用一下3种方法\n1. 父级元素设置`position:relative`,设置子元素\n    ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    transform:translate(-50%,-50%);\n    ```\n    这个思路也很简单，就是之前常用的\n     ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    margin-top:-图片宽度/2;\n    margin-left:-图片宽度/2;\n    ```\n    使用CSS3的变换，位移图片的一半\n    \n2. 使用弹性盒模型实现居中，父级元素定义为`display:-webkit-box`，设置子元素\n    ```css\n    -webkit-box-pack:center;\n\t-webkit-box-align:center;\n    ```\n    这种的使用范围比较窄\n    \n3. 设置父级元素`position:relative`，设置子元素\n    ```css\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:auto;\n    ```\n    \n**每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择**","source":"_posts/implementation-elements-in-the-parent-element-in-the-method.md","raw":"---\ntitle: 实现元素在父元素中居中的方法\ndate: 2016-02-02 17:47:10\ntags: css\n---\n在网页制作中，常常会遇到需要将一个元素水平，垂直居中。  \n最常见的##水平##居中自然是行级元素`text-align:center`,块级元素在父级元素`text-align:center`之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。\n\n<!--more-->\n\n* 第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的`line-height=`元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。\n\n* 第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，`vertical-align: middle;`，设置图片的`vertical-align: middle;`即可\n\n* 第三：对于块级元素的居中，可以使用一下3种方法\n1. 父级元素设置`position:relative`,设置子元素\n    ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    transform:translate(-50%,-50%);\n    ```\n    这个思路也很简单，就是之前常用的\n     ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    margin-top:-图片宽度/2;\n    margin-left:-图片宽度/2;\n    ```\n    使用CSS3的变换，位移图片的一半\n    \n2. 使用弹性盒模型实现居中，父级元素定义为`display:-webkit-box`，设置子元素\n    ```css\n    -webkit-box-pack:center;\n\t-webkit-box-align:center;\n    ```\n    这种的使用范围比较窄\n    \n3. 设置父级元素`position:relative`，设置子元素\n    ```css\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:auto;\n    ```\n    \n**每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择**","slug":"implementation-elements-in-the-parent-element-in-the-method","published":1,"updated":"2016-10-27T03:55:09.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb2v000l7sv1tkza2rfg","content":"<p>在网页制作中，常常会遇到需要将一个元素水平，垂直居中。<br>最常见的##水平##居中自然是行级元素<code>text-align:center</code>,块级元素在父级元素<code>text-align:center</code>之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的<code>line-height=</code>元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。</p>\n</li>\n<li><p>第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，<code>vertical-align: middle;</code>，设置图片的<code>vertical-align: middle;</code>即可</p>\n</li>\n<li><p>第三：对于块级元素的居中，可以使用一下3种方法</p>\n</li>\n</ul>\n<ol>\n<li><p>父级元素设置<code>position:relative</code>,设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</div><div class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</div><div class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</div><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</div></pre></td></tr></table></figure>\n<p> 这个思路也很简单，就是之前常用的</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">position:absolute;</div><div class=\"line\">left:50%;</div><div class=\"line\">top:50%;</div><div class=\"line\">margin-top:-图片宽度/2;</div><div class=\"line\">margin-left:-图片宽度/2;</div></pre></td></tr></table></figure>\n<p> 使用CSS3的变换，位移图片的一半</p>\n</li>\n<li><p>使用弹性盒模型实现居中，父级元素定义为<code>display:-webkit-box</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</div><div class=\"line\"><span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</div></pre></td></tr></table></figure>\n<p> 这种的使用范围比较窄</p>\n</li>\n<li><p>设置父级元素<code>position:relative</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</div><div class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择</strong></p>\n","excerpt":"<p>在网页制作中，常常会遇到需要将一个元素水平，垂直居中。<br>最常见的##水平##居中自然是行级元素<code>text-align:center</code>,块级元素在父级元素<code>text-align:center</code>之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。</p>","more":"<ul>\n<li><p>第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的<code>line-height=</code>元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。</p>\n</li>\n<li><p>第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，<code>vertical-align: middle;</code>，设置图片的<code>vertical-align: middle;</code>即可</p>\n</li>\n<li><p>第三：对于块级元素的居中，可以使用一下3种方法</p>\n</li>\n</ul>\n<ol>\n<li><p>父级元素设置<code>position:relative</code>,设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</div><div class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</div><div class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</div><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</div></pre></td></tr></table></figure>\n<p> 这个思路也很简单，就是之前常用的</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">position:absolute;</div><div class=\"line\">left:50%;</div><div class=\"line\">top:50%;</div><div class=\"line\">margin-top:-图片宽度/2;</div><div class=\"line\">margin-left:-图片宽度/2;</div></pre></td></tr></table></figure>\n<p> 使用CSS3的变换，位移图片的一半</p>\n</li>\n<li><p>使用弹性盒模型实现居中，父级元素定义为<code>display:-webkit-box</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</div><div class=\"line\"><span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</div></pre></td></tr></table></figure>\n<p> 这种的使用范围比较窄</p>\n</li>\n<li><p>设置父级元素<code>position:relative</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</div><div class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</div><div class=\"line\"><span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择</strong></p>"},{"title":"jQuery弹出Div窗口居中显示、滚动跟随、关闭按钮以及几秒后自动消失","date":"2014-06-18T05:23:02.000Z","_content":"要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。\n\n<!--more-->\n\n```html\n <DIV id=\"closeLayer\"  onClick=\"closeMe()\"><IMG src=\"jiuye/close.gif\" width=\"15\" height=\"13\"></DIV>  \n  <div id =\"jiuye\"><img src=\"jiuye/jiuye1.jpg\" id=\"jiuyeImage\" style=\"cursor:hand\"/></div>  \n  <style type=\"text/css\">  \n  #jiuye{  \n      position:absolute;  \n      left:16px;  \n      top:129px;  \n      width:600px;  \n      height:540px;  \n      z-index:1;  \n        \n  }  \n  #closeLayer{  \n      position:absolute;      \n      left:580px;     \n      top:143px;      \n      width:24px;     \n      height:19px;  \n      z-index:2;  \n  }  \n  </style>  \n<script src=\"jiuye/jquery-1.7.0.js\" type=\"text/javascript\"></script>  \n<script type=\"text/javascript\">  \n    \nfunction closeMe(){  \n    document.getElementById(\"closeLayer\").style.display=\"none\";  \n    document.getElementById(\"jiuye\").style.display=\"none\";  \n    $(window).unbind();  \n}  \n  // 居中  \nfunction center() {  \n    var obj=$(\"#jiuye\");  \n    var closeObj=$(\"#closeLayer\");  \n    var screenWidth = $(window).width(), screenHeight = $(window).height(); //当前浏览器窗口的 宽高  \n    var scrolltop = $(document).scrollTop();//获取当前窗口距离页面顶部高度  \n    var objLeft = (screenWidth - obj.width())/2 ;  \n    var objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n      \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    //浏览器窗口大小改变时  \n    $(window).resize(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n    //浏览器有滚动条时的操作、  \n    $(window).scroll(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n}   \ncenter();  \n$('#closeLayer').show(300).delay(3000).fadeOut(\"slow\");  \n$('#jiuye').show(300).delay(3000).fadeOut(\"slow\",function(){     \n   //隐藏时把元素删除     \n  $(window).unbind();  \n});     \n</script>  \n\n```","source":"_posts/jquery-pop-up-Div-window-center-display.md","raw":"---\ntitle: jQuery弹出Div窗口居中显示、滚动跟随、关闭按钮以及几秒后自动消失\ndate: 2014-06-18 13:23:02\ntags: [jQuery,javascript]\n---\n要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。\n\n<!--more-->\n\n```html\n <DIV id=\"closeLayer\"  onClick=\"closeMe()\"><IMG src=\"jiuye/close.gif\" width=\"15\" height=\"13\"></DIV>  \n  <div id =\"jiuye\"><img src=\"jiuye/jiuye1.jpg\" id=\"jiuyeImage\" style=\"cursor:hand\"/></div>  \n  <style type=\"text/css\">  \n  #jiuye{  \n      position:absolute;  \n      left:16px;  \n      top:129px;  \n      width:600px;  \n      height:540px;  \n      z-index:1;  \n        \n  }  \n  #closeLayer{  \n      position:absolute;      \n      left:580px;     \n      top:143px;      \n      width:24px;     \n      height:19px;  \n      z-index:2;  \n  }  \n  </style>  \n<script src=\"jiuye/jquery-1.7.0.js\" type=\"text/javascript\"></script>  \n<script type=\"text/javascript\">  \n    \nfunction closeMe(){  \n    document.getElementById(\"closeLayer\").style.display=\"none\";  \n    document.getElementById(\"jiuye\").style.display=\"none\";  \n    $(window).unbind();  \n}  \n  // 居中  \nfunction center() {  \n    var obj=$(\"#jiuye\");  \n    var closeObj=$(\"#closeLayer\");  \n    var screenWidth = $(window).width(), screenHeight = $(window).height(); //当前浏览器窗口的 宽高  \n    var scrolltop = $(document).scrollTop();//获取当前窗口距离页面顶部高度  \n    var objLeft = (screenWidth - obj.width())/2 ;  \n    var objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n      \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    //浏览器窗口大小改变时  \n    $(window).resize(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n    //浏览器有滚动条时的操作、  \n    $(window).scroll(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n}   \ncenter();  \n$('#closeLayer').show(300).delay(3000).fadeOut(\"slow\");  \n$('#jiuye').show(300).delay(3000).fadeOut(\"slow\",function(){     \n   //隐藏时把元素删除     \n  $(window).unbind();  \n});     \n</script>  \n\n```","slug":"jquery-pop-up-Div-window-center-display","published":1,"updated":"2016-10-27T03:51:39.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000n7sv1fyxudwt1","content":"<p>要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">DIV</span> <span class=\"attr\">id</span>=<span class=\"string\">\"closeLayer\"</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">\"closeMe()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">IMG</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/close.gif\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"15\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"13\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"jiuye\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jiuye1.jpg\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jiuyeImage\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor:hand\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\">  </span></div><div class=\"line\">  <span class=\"selector-id\">#jiuye</span>&#123;  </div><div class=\"line\">      <span class=\"attribute\">position</span>:absolute;  </div><div class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">16px</span>;  </div><div class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">129px</span>;  </div><div class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">600px</span>;  </div><div class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">540px</span>;  </div><div class=\"line\">      <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;  </div><div class=\"line\">        </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"selector-id\">#closeLayer</span>&#123;  </div><div class=\"line\">      <span class=\"attribute\">position</span>:absolute;      </div><div class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">580px</span>;     </div><div class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">143px</span>;      </div><div class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">24px</span>;     </div><div class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">19px</span>;  </div><div class=\"line\">      <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jquery-1.7.0.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeMe</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeLayer\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jiuye\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </div><div class=\"line\">    $(<span class=\"built_in\">window</span>).unbind();  </div><div class=\"line\">&#125;  </div><div class=\"line\">  <span class=\"comment\">// 居中  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">center</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> obj=$(<span class=\"string\">\"#jiuye\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObj=$(<span class=\"string\">\"#closeLayer\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> screenWidth = $(<span class=\"built_in\">window</span>).width(), screenHeight = $(<span class=\"built_in\">window</span>).height(); <span class=\"comment\">//当前浏览器窗口的 宽高  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();<span class=\"comment\">//获取当前窗口距离页面顶部高度  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"comment\">//浏览器窗口大小改变时  </span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </div><div class=\"line\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </div><div class=\"line\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </div><div class=\"line\">    objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"comment\">//浏览器有滚动条时的操作、  </span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </div><div class=\"line\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </div><div class=\"line\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </div><div class=\"line\">    objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;   </div><div class=\"line\">center();  </div><div class=\"line\">$(<span class=\"string\">'#closeLayer'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>);  </div><div class=\"line\">$(<span class=\"string\">'#jiuye'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">   <span class=\"comment\">//隐藏时把元素删除     </span></div><div class=\"line\">  $(<span class=\"built_in\">window</span>).unbind();  </div><div class=\"line\">&#125;);     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p>要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">DIV</span> <span class=\"attr\">id</span>=<span class=\"string\">\"closeLayer\"</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">\"closeMe()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">IMG</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/close.gif\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"15\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"13\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"jiuye\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jiuye1.jpg\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jiuyeImage\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor:hand\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\">  </div><div class=\"line\">  <span class=\"selector-id\">#jiuye</span>&#123;  </div><div class=\"line\">      <span class=\"attribute\">position</span>:absolute;  </div><div class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">16px</span>;  </div><div class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">129px</span>;  </div><div class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">600px</span>;  </div><div class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">540px</span>;  </div><div class=\"line\">      <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;  </div><div class=\"line\">        </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"selector-id\">#closeLayer</span>&#123;  </div><div class=\"line\">      <span class=\"attribute\">position</span>:absolute;      </div><div class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">580px</span>;     </div><div class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">143px</span>;      </div><div class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">24px</span>;     </div><div class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">19px</span>;  </div><div class=\"line\">      <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jquery-1.7.0.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeMe</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeLayer\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jiuye\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </div><div class=\"line\">    $(<span class=\"built_in\">window</span>).unbind();  </div><div class=\"line\">&#125;  </div><div class=\"line\">  <span class=\"comment\">// 居中  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">center</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> obj=$(<span class=\"string\">\"#jiuye\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObj=$(<span class=\"string\">\"#closeLayer\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> screenWidth = $(<span class=\"built_in\">window</span>).width(), screenHeight = $(<span class=\"built_in\">window</span>).height(); <span class=\"comment\">//当前浏览器窗口的 宽高  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();<span class=\"comment\">//获取当前窗口距离页面顶部高度  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"comment\">//浏览器窗口大小改变时  </span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </div><div class=\"line\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </div><div class=\"line\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </div><div class=\"line\">    objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"comment\">//浏览器有滚动条时的操作、  </span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </div><div class=\"line\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </div><div class=\"line\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </div><div class=\"line\">    objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </div><div class=\"line\">    objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </div><div class=\"line\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </div><div class=\"line\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </div><div class=\"line\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;   </div><div class=\"line\">center();  </div><div class=\"line\">$(<span class=\"string\">'#closeLayer'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>);  </div><div class=\"line\">$(<span class=\"string\">'#jiuye'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">   <span class=\"comment\">//隐藏时把元素删除     </span></div><div class=\"line\">  $(<span class=\"built_in\">window</span>).unbind();  </div><div class=\"line\">&#125;);     </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"js判断图片是否加载完成并获取图片的宽度","date":"2014-06-15T11:28:09.000Z","_content":"在使用[turnJS](http://www.turnjs.com/)的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。\n\n<!--more-->\n\n* 第一中方法，通过onload事件，比如：\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\";\nobj.onload=function(){\n\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```\n* 第二种方法，使用 onreadystatechange 来判断\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\";\nobj.onreadystatechange=function(){\n\tif(this.readyState==\"complete\"){\n\t\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\t\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n\t}\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```","source":"_posts/js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture.md","raw":"---\ntitle: js判断图片是否加载完成并获取图片的宽度\ndate: 2014-06-15 19:28:09\ntags: javascript\n---\n在使用[turnJS](http://www.turnjs.com/)的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。\n\n<!--more-->\n\n* 第一中方法，通过onload事件，比如：\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\";\nobj.onload=function(){\n\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```\n* 第二种方法，使用 onreadystatechange 来判断\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\";\nobj.onreadystatechange=function(){\n\tif(this.readyState==\"complete\"){\n\t\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\t\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n\t}\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```","slug":"js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture","published":1,"updated":"2016-10-27T03:52:52.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000p7sv11h3idiki","content":"<p>在使用<a href=\"http://www.turnjs.com/\" target=\"_blank\" rel=\"external\">turnJS</a>的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>第一中方法，通过onload事件，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</div><div class=\"line\">obj.src=<span class=\"string\">\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\"</span>;</div><div class=\"line\">obj.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法，使用 onreadystatechange 来判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</div><div class=\"line\">obj.src=<span class=\"string\">\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\"</span>;</div><div class=\"line\">obj.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState==<span class=\"string\">\"complete\"</span>)&#123;</div><div class=\"line\">\t\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<p>在使用<a href=\"http://www.turnjs.com/\">turnJS</a>的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。</p>","more":"<ul>\n<li><p>第一中方法，通过onload事件，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</div><div class=\"line\">obj.src=<span class=\"string\">\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\"</span>;</div><div class=\"line\">obj.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法，使用 onreadystatechange 来判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</div><div class=\"line\">obj.src=<span class=\"string\">\"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg\"</span>;</div><div class=\"line\">obj.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState==<span class=\"string\">\"complete\"</span>)&#123;</div><div class=\"line\">\t\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"JSP生成有彩色条纹的验证码","date":"2013-07-21T08:31:15.000Z","_content":"使用jsp直接生成有彩色条纹的验证码，代码如下\n\n<!--more-->\n\n```jsp\n<%@ page contentType=\"image/jpeg\" import=\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\" %>\n<%!\nColor getRandColor(int fc,int bc){//给定范围获得随机颜色\nRandom random = new Random();\nif(fc>255) fc=255;\nif(bc>255) bc=255;\nint r=fc+random.nextInt(bc-fc);\nint g=fc+random.nextInt(bc-fc);\nint b=fc+random.nextInt(bc-fc);\nreturn new Color(r,g,b);\n}\n%>\n<%\n//设置页面不缓存\nresponse.setHeader(\"Pragma\",\"No-cache\");\nresponse.setHeader(\"Cache-Control\",\"no-cache\");\nresponse.setDateHeader(\"Expires\", 0);\n\n// 在内存中创建图象\nint width=60, height=20;\nBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n// 获取图形上下文\nGraphics g = image.getGraphics();\n\n//生成随机类\nRandom random = new Random();\n\n// 设定背景色\ng.setColor(getRandColor(200,250));\ng.fillRect(0, 0, width, height);\n\n//设定字体\ng.setFont(new Font(\"Times New Roman\",Font.PLAIN,18));\n\n//画边框\ng.setColor(new Color(255,255,255));\ng.drawRect(0,0,width-1,height-1);\n\n// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到\ng.setColor(getRandColor(160,200));\nfor (int i=0;i<155;i++)\n{\nint x = random.nextInt(width);\nint y = random.nextInt(height);\nint xl = random.nextInt(12);\nint yl = random.nextInt(12);\ng.drawLine(x,y,x+xl,y+yl);\n}\n\n// 取随机产生的认证码(4位数字)\nString sRand=\"\";\nfor (int i=0;i<4;i++){\nString rand=String.valueOf(random.nextInt(10));\nsRand+=rand;\n// 将认证码显示到图象中\ng.setColor(new Color(20+random.nextInt(110),20+random.nextInt(110),20+random.nextInt(110)));\n//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成\ng.drawString(rand,13*i+6,16);\n}\n\n// 将认证码存入SESSION\nsession.setAttribute(\"rand\",sRand);\n\n// 图象生效\ng.dispose();\n\n// 输出图象到页面\nImageIO.write(image, \"JPEG\", response.getOutputStream());\n\n%>\n```","source":"_posts/jsp-generates-a-color-stripe-verification-code.md","raw":"---\ntitle: JSP生成有彩色条纹的验证码\ndate: 2013-07-21 16:31:15\ntags: [jsp]\n---\n使用jsp直接生成有彩色条纹的验证码，代码如下\n\n<!--more-->\n\n```jsp\n<%@ page contentType=\"image/jpeg\" import=\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\" %>\n<%!\nColor getRandColor(int fc,int bc){//给定范围获得随机颜色\nRandom random = new Random();\nif(fc>255) fc=255;\nif(bc>255) bc=255;\nint r=fc+random.nextInt(bc-fc);\nint g=fc+random.nextInt(bc-fc);\nint b=fc+random.nextInt(bc-fc);\nreturn new Color(r,g,b);\n}\n%>\n<%\n//设置页面不缓存\nresponse.setHeader(\"Pragma\",\"No-cache\");\nresponse.setHeader(\"Cache-Control\",\"no-cache\");\nresponse.setDateHeader(\"Expires\", 0);\n\n// 在内存中创建图象\nint width=60, height=20;\nBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n// 获取图形上下文\nGraphics g = image.getGraphics();\n\n//生成随机类\nRandom random = new Random();\n\n// 设定背景色\ng.setColor(getRandColor(200,250));\ng.fillRect(0, 0, width, height);\n\n//设定字体\ng.setFont(new Font(\"Times New Roman\",Font.PLAIN,18));\n\n//画边框\ng.setColor(new Color(255,255,255));\ng.drawRect(0,0,width-1,height-1);\n\n// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到\ng.setColor(getRandColor(160,200));\nfor (int i=0;i<155;i++)\n{\nint x = random.nextInt(width);\nint y = random.nextInt(height);\nint xl = random.nextInt(12);\nint yl = random.nextInt(12);\ng.drawLine(x,y,x+xl,y+yl);\n}\n\n// 取随机产生的认证码(4位数字)\nString sRand=\"\";\nfor (int i=0;i<4;i++){\nString rand=String.valueOf(random.nextInt(10));\nsRand+=rand;\n// 将认证码显示到图象中\ng.setColor(new Color(20+random.nextInt(110),20+random.nextInt(110),20+random.nextInt(110)));\n//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成\ng.drawString(rand,13*i+6,16);\n}\n\n// 将认证码存入SESSION\nsession.setAttribute(\"rand\",sRand);\n\n// 图象生效\ng.dispose();\n\n// 输出图象到页面\nImageIO.write(image, \"JPEG\", response.getOutputStream());\n\n%>\n```","slug":"jsp-generates-a-color-stripe-verification-code","published":1,"updated":"2016-10-27T03:51:53.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000r7sv1ubkv85tq","content":"<p>使用jsp直接生成有彩色条纹的验证码，代码如下</p>\n<a id=\"more\"></a>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"image/jpeg\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\"</span> %&gt;</div><div class=\"line\">&lt;%!</div><div class=\"line\"><span class=\"function\">Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc,<span class=\"keyword\">int</span> bc)</span></span>&#123;<span class=\"comment\">//给定范围获得随机颜色</span></div><div class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"><span class=\"keyword\">if</span>(fc&gt;<span class=\"number\">255</span>) fc=<span class=\"number\">255</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(bc&gt;<span class=\"number\">255</span>) bc=<span class=\"number\">255</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> r=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">int</span> g=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">int</span> b=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r,g,b);</div><div class=\"line\">&#125;</div><div class=\"line\">%&gt;</div><div class=\"line\">&lt;%</div><div class=\"line\"><span class=\"comment\">//设置页面不缓存</span></div><div class=\"line\">response.setHeader(<span class=\"string\">\"Pragma\"</span>,<span class=\"string\">\"No-cache\"</span>);</div><div class=\"line\">response.setHeader(<span class=\"string\">\"Cache-Control\"</span>,<span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在内存中创建图象</span></div><div class=\"line\"><span class=\"keyword\">int</span> width=<span class=\"number\">60</span>, height=<span class=\"number\">20</span>;</div><div class=\"line\">BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取图形上下文</span></div><div class=\"line\">Graphics g = image.getGraphics();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//生成随机类</span></div><div class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设定背景色</span></div><div class=\"line\">g.setColor(getRandColor(<span class=\"number\">200</span>,<span class=\"number\">250</span>));</div><div class=\"line\">g.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设定字体</span></div><div class=\"line\">g.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"Times New Roman\"</span>,Font.PLAIN,<span class=\"number\">18</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//画边框</span></div><div class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>));</div><div class=\"line\">g.drawRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width-<span class=\"number\">1</span>,height-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></div><div class=\"line\">g.setColor(getRandColor(<span class=\"number\">160</span>,<span class=\"number\">200</span>));</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">155</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> x = random.nextInt(width);</div><div class=\"line\"><span class=\"keyword\">int</span> y = random.nextInt(height);</div><div class=\"line\"><span class=\"keyword\">int</span> xl = random.nextInt(<span class=\"number\">12</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> yl = random.nextInt(<span class=\"number\">12</span>);</div><div class=\"line\">g.drawLine(x,y,x+xl,y+yl);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 取随机产生的认证码(4位数字)</span></div><div class=\"line\">String sRand=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">String rand=String.valueOf(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">sRand+=rand;</div><div class=\"line\"><span class=\"comment\">// 将认证码显示到图象中</span></div><div class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>)));</div><div class=\"line\"><span class=\"comment\">//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></div><div class=\"line\">g.drawString(rand,<span class=\"number\">13</span>*i+<span class=\"number\">6</span>,<span class=\"number\">16</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将认证码存入SESSION</span></div><div class=\"line\">session.setAttribute(<span class=\"string\">\"rand\"</span>,sRand);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 图象生效</span></div><div class=\"line\">g.dispose();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出图象到页面</span></div><div class=\"line\">ImageIO.write(image, <span class=\"string\">\"JPEG\"</span>, response.getOutputStream());</div><div class=\"line\"></div><div class=\"line\">%&gt;</div></pre></td></tr></table></figure>","excerpt":"<p>使用jsp直接生成有彩色条纹的验证码，代码如下</p>","more":"<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"image/jpeg\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\"</span> %&gt;</div><div class=\"line\">&lt;%!</div><div class=\"line\"><span class=\"function\">Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc,<span class=\"keyword\">int</span> bc)</span></span>&#123;<span class=\"comment\">//给定范围获得随机颜色</span></div><div class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"><span class=\"keyword\">if</span>(fc&gt;<span class=\"number\">255</span>) fc=<span class=\"number\">255</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(bc&gt;<span class=\"number\">255</span>) bc=<span class=\"number\">255</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> r=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">int</span> g=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">int</span> b=fc+random.nextInt(bc-fc);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r,g,b);</div><div class=\"line\">&#125;</div><div class=\"line\">%&gt;</div><div class=\"line\">&lt;%</div><div class=\"line\"><span class=\"comment\">//设置页面不缓存</span></div><div class=\"line\">response.setHeader(<span class=\"string\">\"Pragma\"</span>,<span class=\"string\">\"No-cache\"</span>);</div><div class=\"line\">response.setHeader(<span class=\"string\">\"Cache-Control\"</span>,<span class=\"string\">\"no-cache\"</span>);</div><div class=\"line\">response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在内存中创建图象</span></div><div class=\"line\"><span class=\"keyword\">int</span> width=<span class=\"number\">60</span>, height=<span class=\"number\">20</span>;</div><div class=\"line\">BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取图形上下文</span></div><div class=\"line\">Graphics g = image.getGraphics();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//生成随机类</span></div><div class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设定背景色</span></div><div class=\"line\">g.setColor(getRandColor(<span class=\"number\">200</span>,<span class=\"number\">250</span>));</div><div class=\"line\">g.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设定字体</span></div><div class=\"line\">g.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"Times New Roman\"</span>,Font.PLAIN,<span class=\"number\">18</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//画边框</span></div><div class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>));</div><div class=\"line\">g.drawRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width-<span class=\"number\">1</span>,height-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></div><div class=\"line\">g.setColor(getRandColor(<span class=\"number\">160</span>,<span class=\"number\">200</span>));</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">155</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> x = random.nextInt(width);</div><div class=\"line\"><span class=\"keyword\">int</span> y = random.nextInt(height);</div><div class=\"line\"><span class=\"keyword\">int</span> xl = random.nextInt(<span class=\"number\">12</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> yl = random.nextInt(<span class=\"number\">12</span>);</div><div class=\"line\">g.drawLine(x,y,x+xl,y+yl);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 取随机产生的认证码(4位数字)</span></div><div class=\"line\">String sRand=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">String rand=String.valueOf(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">sRand+=rand;</div><div class=\"line\"><span class=\"comment\">// 将认证码显示到图象中</span></div><div class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>)));</div><div class=\"line\"><span class=\"comment\">//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></div><div class=\"line\">g.drawString(rand,<span class=\"number\">13</span>*i+<span class=\"number\">6</span>,<span class=\"number\">16</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将认证码存入SESSION</span></div><div class=\"line\">session.setAttribute(<span class=\"string\">\"rand\"</span>,sRand);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 图象生效</span></div><div class=\"line\">g.dispose();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出图象到页面</span></div><div class=\"line\">ImageIO.write(image, <span class=\"string\">\"JPEG\"</span>, response.getOutputStream());</div><div class=\"line\"></div><div class=\"line\">%&gt;</div></pre></td></tr></table></figure>"},{"title":"让vs2015忽略某个文件夹","date":"2017-02-24T02:09:28.000Z","_content":"在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。\n但是`node_modules`，`bower_components`的文件夹嵌套，会严重影响扫描的速度\n\n<!--more-->\n\n暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录\n\n","source":"_posts/let-vs-2015-ignore-a-folder.md","raw":"---\ntitle: 让vs2015忽略某个文件夹\ndate: 2017-02-24 10:09:28\ntags: [vs2015,开发工具]\n---\n在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。\n但是`node_modules`，`bower_components`的文件夹嵌套，会严重影响扫描的速度\n\n<!--more-->\n\n暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录\n\n","slug":"let-vs-2015-ignore-a-folder","published":1,"updated":"2017-02-24T02:48:29.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000t7sv12u78hyal","content":"<p>在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。<br>但是<code>node_modules</code>，<code>bower_components</code>的文件夹嵌套，会严重影响扫描的速度</p>\n<a id=\"more\"></a>\n<p>暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录</p>\n","excerpt":"<p>在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。<br>但是<code>node_modules</code>，<code>bower_components</code>的文件夹嵌套，会严重影响扫描的速度</p>","more":"<p>暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录</p>"},{"title":"管理github上的Star","date":"2016-11-28T02:29:51.000Z","_content":"\n![github](http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png)\n\nGithub Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，\n查找自己的star就会非常的方便。\n\n<!--more-->\n\n第一个不错的网站是[AStral](https://astralapp.com/)，非常漂亮的界面，可以直接浏览\n项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。\n\n![astral](https://astralapp.com/dist/images/features-overview.png)\n\n>地址 https://astralapp.com/\n\n第二个网站是[gitconstellation](http://gitconstellation.com/),简洁的界面，可以添加分类以及标签，管理方便\n\n![gitStar](http://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png)\n\n>地址 http://gitconstellation.com/\n\n第三个是一个app，[OhMyStar](http://www.ohmystarapp.com/)，但是只有苹果系统可以用。\n\n![gitStar](http://www.ohmystarapp.com/images/oms-app-bg.png)\n\n> 地址 http://www.ohmystarapp.com/","source":"_posts/manage-the-star-on-the-lot.md","raw":"---\ntitle: 管理github上的Star\ndate: 2016-11-28 10:29:51\ntags: [应用,工具]\n---\n\n![github](http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png)\n\nGithub Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，\n查找自己的star就会非常的方便。\n\n<!--more-->\n\n第一个不错的网站是[AStral](https://astralapp.com/)，非常漂亮的界面，可以直接浏览\n项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。\n\n![astral](https://astralapp.com/dist/images/features-overview.png)\n\n>地址 https://astralapp.com/\n\n第二个网站是[gitconstellation](http://gitconstellation.com/),简洁的界面，可以添加分类以及标签，管理方便\n\n![gitStar](http://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png)\n\n>地址 http://gitconstellation.com/\n\n第三个是一个app，[OhMyStar](http://www.ohmystarapp.com/)，但是只有苹果系统可以用。\n\n![gitStar](http://www.ohmystarapp.com/images/oms-app-bg.png)\n\n> 地址 http://www.ohmystarapp.com/","slug":"manage-the-star-on-the-lot","published":1,"updated":"2016-11-28T02:43:04.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000w7sv1sa9r4sak","content":"<p><img src=\"http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png\" alt=\"github\"></p>\n<p>Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，<br>查找自己的star就会非常的方便。</p>\n<a id=\"more\"></a>\n<p>第一个不错的网站是<a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"external\">AStral</a>，非常漂亮的界面，可以直接浏览<br>项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。</p>\n<p><img src=\"https://astralapp.com/dist/images/features-overview.png\" alt=\"astral\"></p>\n<blockquote>\n<p>地址 <a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"external\">https://astralapp.com/</a></p>\n</blockquote>\n<p>第二个网站是<a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"external\">gitconstellation</a>,简洁的界面，可以添加分类以及标签，管理方便</p>\n<p><img src=\"http://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"external\">http://gitconstellation.com/</a></p>\n</blockquote>\n<p>第三个是一个app，<a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"external\">OhMyStar</a>，但是只有苹果系统可以用。</p>\n<p><img src=\"http://www.ohmystarapp.com/images/oms-app-bg.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"external\">http://www.ohmystarapp.com/</a></p>\n</blockquote>\n","excerpt":"<p><img src=\"http://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png\" alt=\"github\"></p>\n<p>Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，<br>查找自己的star就会非常的方便。</p>","more":"<p>第一个不错的网站是<a href=\"https://astralapp.com/\">AStral</a>，非常漂亮的界面，可以直接浏览<br>项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。</p>\n<p><img src=\"https://astralapp.com/dist/images/features-overview.png\" alt=\"astral\"></p>\n<blockquote>\n<p>地址 <a href=\"https://astralapp.com/\">https://astralapp.com/</a></p>\n</blockquote>\n<p>第二个网站是<a href=\"http://gitconstellation.com/\">gitconstellation</a>,简洁的界面，可以添加分类以及标签，管理方便</p>\n<p><img src=\"http://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://gitconstellation.com/\">http://gitconstellation.com/</a></p>\n</blockquote>\n<p>第三个是一个app，<a href=\"http://www.ohmystarapp.com/\">OhMyStar</a>，但是只有苹果系统可以用。</p>\n<p><img src=\"http://www.ohmystarapp.com/images/oms-app-bg.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://www.ohmystarapp.com/\">http://www.ohmystarapp.com/</a></p>\n</blockquote>"},{"title":"MongoDB在x86系统上的启动错误解决","date":"2016-04-05T06:12:53.000Z","_content":"\n在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。\n\n在对应的bin目录启动MongoDB服务\n\n> mongod.exe --dbpath  C:\\database\\db\n\n<!--more-->\n\n但是启动出现了错误，提示了\n\n`Cannot start server. The default storage engine 'wiredTiger' is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -`\n\n原来是默认的wiredTiger引擎不支持x86系统\n\n在官方网站上就有对应的说明\n\n> Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.\n\n这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入`--storageEngine=mmapv1\n`就可以了\n\n所以完整的启动服务方法就是\n\n`mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1`","source":"_posts/mongo-on-x-86-system-startup-errors.md","raw":"---\ntitle: MongoDB在x86系统上的启动错误解决\ndate: 2016-04-05 14:12:53\ntags: MongoDB\n---\n\n在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。\n\n在对应的bin目录启动MongoDB服务\n\n> mongod.exe --dbpath  C:\\database\\db\n\n<!--more-->\n\n但是启动出现了错误，提示了\n\n`Cannot start server. The default storage engine 'wiredTiger' is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -`\n\n原来是默认的wiredTiger引擎不支持x86系统\n\n在官方网站上就有对应的说明\n\n> Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.\n\n这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入`--storageEngine=mmapv1\n`就可以了\n\n所以完整的启动服务方法就是\n\n`mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1`","slug":"mongo-on-x-86-system-startup-errors","published":1,"updated":"2016-07-05T14:37:48.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b000y7sv1u50ho9d8","content":"<p>在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。</p>\n<p>在对应的bin目录启动MongoDB服务</p>\n<blockquote>\n<p>mongod.exe –dbpath  C:\\database\\db</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>但是启动出现了错误，提示了</p>\n<p><code>Cannot start server. The default storage engine &#39;wiredTiger&#39; is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -</code></p>\n<p>原来是默认的wiredTiger引擎不支持x86系统</p>\n<p>在官方网站上就有对应的说明</p>\n<blockquote>\n<p>Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.</p>\n</blockquote>\n<p>这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入<code>--storageEngine=mmapv1</code>就可以了</p>\n<p>所以完整的启动服务方法就是</p>\n<p><code>mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1</code></p>\n","excerpt":"<p>在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。</p>\n<p>在对应的bin目录启动MongoDB服务</p>\n<blockquote>\n<p>mongod.exe –dbpath  C:\\database\\db</p>\n</blockquote>","more":"<p>但是启动出现了错误，提示了</p>\n<p><code>Cannot start server. The default storage engine &#39;wiredTiger&#39; is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -</code></p>\n<p>原来是默认的wiredTiger引擎不支持x86系统</p>\n<p>在官方网站上就有对应的说明</p>\n<blockquote>\n<p>Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.</p>\n</blockquote>\n<p>这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入<code>--storageEngine=mmapv1</code>就可以了</p>\n<p>所以完整的启动服务方法就是</p>\n<p><code>mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1</code></p>"},{"title":"优化一次INSERT查询，插入多行记录","date":"2014-06-10T02:14:36.000Z","_content":"如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：\n`INSERT INTO tbl_name (col1,col2) VALUES (15,16);`\n 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：\n ```php\n $a = 1;\n$b = 1;\nwhile (5 == $a)\n{\n    $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    mysql_query($sql);\n    $a++;\n    $b++;\n}\n```\n<!--more-->\n\n但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。\n在查看其他的sql备份导入软件之后发现，他们使用的方法如下。\n```php\nINSERT INTO `userTable` (`user_id`, `user_name`) VALUES\n(1, 'dsf'),\n(2, 'fgy'),\n(3, 'faad');\n```\n\n  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:\n\n  ```php\n  $a = 1;\nwhile (5 == $a)\n{\n    if (1 == $a)\n        $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    else\n        $sql .= \",($a,$b)\";\n\n    $a++;\n    $b++;\n}\nmysql_query($sql);\n```","source":"_posts/optimization-of-an-insert-query-insert-more-rows.md","raw":"---\ntitle: 优化一次INSERT查询，插入多行记录\ndate: 2014-06-10 10:14:36\ntags: [PHP,MySql]\n---\n如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：\n`INSERT INTO tbl_name (col1,col2) VALUES (15,16);`\n 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：\n ```php\n $a = 1;\n$b = 1;\nwhile (5 == $a)\n{\n    $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    mysql_query($sql);\n    $a++;\n    $b++;\n}\n```\n<!--more-->\n\n但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。\n在查看其他的sql备份导入软件之后发现，他们使用的方法如下。\n```php\nINSERT INTO `userTable` (`user_id`, `user_name`) VALUES\n(1, 'dsf'),\n(2, 'fgy'),\n(3, 'faad');\n```\n\n  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:\n\n  ```php\n  $a = 1;\nwhile (5 == $a)\n{\n    if (1 == $a)\n        $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    else\n        $sql .= \",($a,$b)\";\n\n    $a++;\n    $b++;\n}\nmysql_query($sql);\n```","slug":"optimization-of-an-insert-query-insert-more-rows","published":1,"updated":"2016-10-27T03:56:51.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3b00107sv1ehu4l11i","content":"<p>如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：<br><code>INSERT INTO tbl_name (col1,col2) VALUES (15,16);</code><br> 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $a = <span class=\"number\">1</span>;</div><div class=\"line\">$b = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</div><div class=\"line\">&#123;</div><div class=\"line\">    $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</div><div class=\"line\">    mysql_query($sql);</div><div class=\"line\">    $a++;</div><div class=\"line\">    $b++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。<br>在查看其他的sql备份导入软件之后发现，他们使用的方法如下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO `userTable` (`user_id`, `user_name`) VALUES</div><div class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'dsf'</span>),</div><div class=\"line\">(<span class=\"number\">2</span>, <span class=\"string\">'fgy'</span>),</div><div class=\"line\">(<span class=\"number\">3</span>, <span class=\"string\">'faad'</span>);</div></pre></td></tr></table></figure></p>\n<p>  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  $a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == $a)</div><div class=\"line\">        $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        $sql .= <span class=\"string\">\",($a,$b)\"</span>;</div><div class=\"line\"></div><div class=\"line\">    $a++;</div><div class=\"line\">    $b++;</div><div class=\"line\">&#125;</div><div class=\"line\">mysql_query($sql);</div></pre></td></tr></table></figure>","excerpt":"<p>如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：<br><code>INSERT INTO tbl_name (col1,col2) VALUES (15,16);</code><br> 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $a = <span class=\"number\">1</span>;</div><div class=\"line\">$b = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</div><div class=\"line\">&#123;</div><div class=\"line\">    $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</div><div class=\"line\">    mysql_query($sql);</div><div class=\"line\">    $a++;</div><div class=\"line\">    $b++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。<br>在查看其他的sql备份导入软件之后发现，他们使用的方法如下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO `userTable` (`user_id`, `user_name`) VALUES</div><div class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'dsf'</span>),</div><div class=\"line\">(<span class=\"number\">2</span>, <span class=\"string\">'fgy'</span>),</div><div class=\"line\">(<span class=\"number\">3</span>, <span class=\"string\">'faad'</span>);</div></pre></td></tr></table></figure></p>\n<p>  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  $a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == $a)</div><div class=\"line\">        $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        $sql .= <span class=\"string\">\",($a,$b)\"</span>;</div><div class=\"line\"></div><div class=\"line\">    $a++;</div><div class=\"line\">    $b++;</div><div class=\"line\">&#125;</div><div class=\"line\">mysql_query($sql);</div></pre></td></tr></table></figure>"},{"title":"php实现分页的简单方法","date":"2014-05-18T02:51:28.000Z","_content":"实现分页的控制代码\n\n<!--more-->\n\n```php\n<?\n//获得总页及设定每页显示贴子,开始分页显示\n$list_num=5;\n$result1=mysql_query(\"select count(*) from news\");\n$rs=mysql_fetch_array($result1);\n$num=$rs[0];\n$pagenumber=ceil($num/$list_num);\n$page=$_GET[page];\nif($page<2)\n{\n\t$page=0;\n}\nelse\n{\n\t $page=$page-1;\n}\n$startnum=$page*5;\n//获得总页及设定每页显示贴子\n  //循环获取数据开始\n  $result = mysql_query(\"SELECT * FROM news order by date desc limit $startnum,5\");\n  while($row = mysql_fetch_array($result))\n  {\n  ?>\n ```\n 实现分页\n ```php\n  //页码显示\nfor ($i=1;$i<=($pagenumber);$i++){\necho \"<a href=\\\"news fenye.php?page=$i\\\">$i</a> \";\n}\n //页码显示\n?>\n```","source":"_posts/php-implementation-simple-method-of-paging.md","raw":"---\ntitle: php实现分页的简单方法\ndate: 2014-05-18 10:51:28\ntags: php\n---\n实现分页的控制代码\n\n<!--more-->\n\n```php\n<?\n//获得总页及设定每页显示贴子,开始分页显示\n$list_num=5;\n$result1=mysql_query(\"select count(*) from news\");\n$rs=mysql_fetch_array($result1);\n$num=$rs[0];\n$pagenumber=ceil($num/$list_num);\n$page=$_GET[page];\nif($page<2)\n{\n\t$page=0;\n}\nelse\n{\n\t $page=$page-1;\n}\n$startnum=$page*5;\n//获得总页及设定每页显示贴子\n  //循环获取数据开始\n  $result = mysql_query(\"SELECT * FROM news order by date desc limit $startnum,5\");\n  while($row = mysql_fetch_array($result))\n  {\n  ?>\n ```\n 实现分页\n ```php\n  //页码显示\nfor ($i=1;$i<=($pagenumber);$i++){\necho \"<a href=\\\"news fenye.php?page=$i\\\">$i</a> \";\n}\n //页码显示\n?>\n```","slug":"php-implementation-simple-method-of-paging","published":1,"updated":"2016-10-27T03:54:04.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3s00137sv1y0tsnuq8","content":"<p>实现分页的控制代码</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?</span></div><div class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子,开始分页显示</span></div><div class=\"line\">$list_num=<span class=\"number\">5</span>;</div><div class=\"line\">$result1=mysql_query(<span class=\"string\">\"select count(*) from news\"</span>);</div><div class=\"line\">$rs=mysql_fetch_array($result1);</div><div class=\"line\">$num=$rs[<span class=\"number\">0</span>];</div><div class=\"line\">$pagenumber=ceil($num/$list_num);</div><div class=\"line\">$page=$_GET[page];</div><div class=\"line\"><span class=\"keyword\">if</span>($page&lt;<span class=\"number\">2</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">\t$page=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t $page=$page<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$startnum=$page*<span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子</span></div><div class=\"line\">  <span class=\"comment\">//循环获取数据开始</span></div><div class=\"line\">  $result = mysql_query(<span class=\"string\">\"SELECT * FROM news order by date desc limit $startnum,5\"</span>);</div><div class=\"line\">  <span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p> 实现分页<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//页码显示</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>;$i&lt;=($pagenumber);$i++)&#123;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href=\\\"news fenye.php?page=$i\\\"&gt;$i&lt;/a&gt; \"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//页码显示</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>实现分页的控制代码</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?</span></div><div class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子,开始分页显示</span></div><div class=\"line\">$list_num=<span class=\"number\">5</span>;</div><div class=\"line\">$result1=mysql_query(<span class=\"string\">\"select count(*) from news\"</span>);</div><div class=\"line\">$rs=mysql_fetch_array($result1);</div><div class=\"line\">$num=$rs[<span class=\"number\">0</span>];</div><div class=\"line\">$pagenumber=ceil($num/$list_num);</div><div class=\"line\">$page=$_GET[page];</div><div class=\"line\"><span class=\"keyword\">if</span>($page&lt;<span class=\"number\">2</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">\t$page=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t $page=$page<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$startnum=$page*<span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子</span></div><div class=\"line\">  <span class=\"comment\">//循环获取数据开始</span></div><div class=\"line\">  $result = mysql_query(<span class=\"string\">\"SELECT * FROM news order by date desc limit $startnum,5\"</span>);</div><div class=\"line\">  <span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p> 实现分页<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//页码显示</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>;$i&lt;=($pagenumber);$i++)&#123;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href=\\\"news fenye.php?page=$i\\\"&gt;$i&lt;/a&gt; \"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//页码显示</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"php时间戳转换差8小时问题","date":"2014-05-17T03:56:31.000Z","_content":"PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) \n\n所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. \n\n正常日期类型是保存为DATE型的. \n\n这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. \n\n像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! \n\n<!--more-->\n\n所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date('Y-m-d');,关于里面参数的 意思,如不懂就查一下php的手册了. \n\n好,言归正传,把1228348800转成2008-12-4格式代码如下： \n\n`$date3=date('Y-m-d H:i:s',\"1228348800\"); `\n\n这样就OK了,如还想得到小时,分钟秒,只要把'Y-m-d'改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. \n\n时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： \n\n```php\n$year=((int)substr(\"2008-12-04\",0,4));//取得年份 \n\n$month=((int)substr(\"2008-12-04\",5,2));//取得月份 \n\n$day=((int)substr(\"2008-12-04\",8,2));//取得几号 \n\necho mktime(0,0,0,$month,$day,$year); \n\n```\n\n这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, \n\n注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下 \n1、最简单的方法就是不要用php5.1以上的版本--显然这是不可取的方法！！！ \n\n2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可--缺点就是如果程序 \n放到别人的服务器上，不能修改php.ini，那就奈何不得了。 \n\n3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(\"Asia/Shanghai\"); ”这个可以由程序员任意设置，我的推 \n荐。 \n时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin \n港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北） \n还有新加坡：Asia/Singapore \n澳大利亚：Australia/Sydney \n\n[原文地址](http://hailinhe1986-163-com.javaeye.com/blog/484538)","source":"_posts/php-timestamp-conversion-problem-eight-hours.md","raw":"---\ntitle: php时间戳转换差8小时问题\ndate: 2014-05-17 11:56:31\ntags: php\n---\nPHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) \n\n所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. \n\n正常日期类型是保存为DATE型的. \n\n这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. \n\n像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! \n\n<!--more-->\n\n所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date('Y-m-d');,关于里面参数的 意思,如不懂就查一下php的手册了. \n\n好,言归正传,把1228348800转成2008-12-4格式代码如下： \n\n`$date3=date('Y-m-d H:i:s',\"1228348800\"); `\n\n这样就OK了,如还想得到小时,分钟秒,只要把'Y-m-d'改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. \n\n时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： \n\n```php\n$year=((int)substr(\"2008-12-04\",0,4));//取得年份 \n\n$month=((int)substr(\"2008-12-04\",5,2));//取得月份 \n\n$day=((int)substr(\"2008-12-04\",8,2));//取得几号 \n\necho mktime(0,0,0,$month,$day,$year); \n\n```\n\n这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, \n\n注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下 \n1、最简单的方法就是不要用php5.1以上的版本--显然这是不可取的方法！！！ \n\n2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可--缺点就是如果程序 \n放到别人的服务器上，不能修改php.ini，那就奈何不得了。 \n\n3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(\"Asia/Shanghai\"); ”这个可以由程序员任意设置，我的推 \n荐。 \n时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin \n港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北） \n还有新加坡：Asia/Singapore \n澳大利亚：Australia/Sydney \n\n[原文地址](http://hailinhe1986-163-com.javaeye.com/blog/484538)","slug":"php-timestamp-conversion-problem-eight-hours","published":1,"updated":"2016-10-27T03:53:43.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3t00157sv1935hyek4","content":"<p>PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) </p>\n<p>所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. </p>\n<p>正常日期类型是保存为DATE型的. </p>\n<p>这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. </p>\n<p>像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! </p>\n<a id=\"more\"></a>\n<p>所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date(‘Y-m-d’);,关于里面参数的 意思,如不懂就查一下php的手册了. </p>\n<p>好,言归正传,把1228348800转成2008-12-4格式代码如下： </p>\n<p><code>$date3=date(&#39;Y-m-d H:i:s&#39;,&quot;1228348800&quot;);</code></p>\n<p>这样就OK了,如还想得到小时,分钟秒,只要把’Y-m-d’改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. </p>\n<p>时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$year=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));<span class=\"comment\">//取得年份 </span></div><div class=\"line\"></div><div class=\"line\">$month=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得月份 </span></div><div class=\"line\"></div><div class=\"line\">$day=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得几号 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> mktime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$month,$day,$year);</div></pre></td></tr></table></figure>\n<p>这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, </p>\n<p>注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下<br>1、最简单的方法就是不要用php5.1以上的版本–显然这是不可取的方法！！！ </p>\n<p>2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可–缺点就是如果程序<br>放到别人的服务器上，不能修改php.ini，那就奈何不得了。 </p>\n<p>3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(“Asia/Shanghai”); ”这个可以由程序员任意设置，我的推<br>荐。<br>时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin<br>港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北）<br>还有新加坡：Asia/Singapore<br>澳大利亚：Australia/Sydney </p>\n<p><a href=\"http://hailinhe1986-163-com.javaeye.com/blog/484538\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n","excerpt":"<p>PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) </p>\n<p>所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. </p>\n<p>正常日期类型是保存为DATE型的. </p>\n<p>这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. </p>\n<p>像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! </p>","more":"<p>所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date(‘Y-m-d’);,关于里面参数的 意思,如不懂就查一下php的手册了. </p>\n<p>好,言归正传,把1228348800转成2008-12-4格式代码如下： </p>\n<p><code>$date3=date(&#39;Y-m-d H:i:s&#39;,&quot;1228348800&quot;);</code></p>\n<p>这样就OK了,如还想得到小时,分钟秒,只要把’Y-m-d’改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. </p>\n<p>时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$year=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));<span class=\"comment\">//取得年份 </span></div><div class=\"line\"></div><div class=\"line\">$month=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得月份 </span></div><div class=\"line\"></div><div class=\"line\">$day=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得几号 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> mktime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$month,$day,$year);</div></pre></td></tr></table></figure>\n<p>这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, </p>\n<p>注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下<br>1、最简单的方法就是不要用php5.1以上的版本–显然这是不可取的方法！！！ </p>\n<p>2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可–缺点就是如果程序<br>放到别人的服务器上，不能修改php.ini，那就奈何不得了。 </p>\n<p>3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(“Asia/Shanghai”); ”这个可以由程序员任意设置，我的推<br>荐。<br>时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin<br>港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北）<br>还有新加坡：Asia/Singapore<br>澳大利亚：Australia/Sydney </p>\n<p><a href=\"http://hailinhe1986-163-com.javaeye.com/blog/484538\">原文地址</a></p>"},{"title":"实现一个URL中的中文路径英文化工具","date":"2017-03-21T02:21:15.000Z","_content":"\n![题图](http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500)\n\n在使用[Hexo](https://hexo.io/)创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。\n\n<!--more-->\n\n最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照[W3CPlus](http://www.w3cplus.com/)的命名方式\n\n* 对应英文翻译\n* 所有字母小写\n* 空格变为- \n\n![W3C命名方式](http://o93mwnwp7.bkt.clouddn.com/github/en-demo.png)\n\n最初使用手动方式将文件名拷贝到[谷歌翻译](http://translate.google.cn/)，得到翻译结果之后，将翻译结果变为小写，将空格替换为\"-\"，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。\n\n由于`Vue`的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用[loadash](https://lodash.com/)来进行数据处理\n\n### 所有字母小写\n\n```js\n_.lowerCase(str)\n\n```\n\n### 空格变为-\n\n使用正则表达式替换即可\n\n```js\nstr.replace(/\\s+/g, \"-\")\n\n```\n但是这时候可能会出现一个问题，在字符串前后都有空格的时候`\" Hello World \"`，会生成`\"-hello-world-\"`,这不是我们需要的\n\n所以在替换之前将首尾空格去掉即可\n\n```js\n_.trim(str)\n\n```\n所以初版就是这样子的\n\n![第一版功能](http://o93mwnwp7.bkt.clouddn.com/github/first-result.png)\n\n## 添加翻译、复制功能\n\n但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是[有道翻译api](http://fanyi.youdao.com/openapi)，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的[axios](https://github.com/mzabriskie/axios)并不支持jsonp，所以采用[vue-resource](https://github.com/pagekit/vue-resource)。\n\n{% plantuml %}\n    title 请求流程\n\n    View -> Watcher : 数据改变\n\n    Watcher -> Methods : 调用方法\n\n    Methods --> 有道翻译 : 请求数据\n\n    有道翻译 --> Methods: 数据返回\n\n    Methods -> Methods : 数据格式化\n\n    Methods -> View : 展示数据 \n\n{% endplantuml %}\n\n但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供**1000**次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。\n\n```js\ngetTrans:_.debounce(function(){},500)\n\n```\n\n最后使用[clipboardjs](https://clipboardjs.com/)为格式化的结果提供一个复制功能。这样就更加方便了。\n\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n> 但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。","source":"_posts/realize-the-path-of-chinese-into-english.md","raw":"---\ntitle: 实现一个URL中的中文路径英文化工具\ndate: 2017-03-21 10:21:15\ntags: [vue,lodash]\n---\n\n![题图](http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500)\n\n在使用[Hexo](https://hexo.io/)创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。\n\n<!--more-->\n\n最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照[W3CPlus](http://www.w3cplus.com/)的命名方式\n\n* 对应英文翻译\n* 所有字母小写\n* 空格变为- \n\n![W3C命名方式](http://o93mwnwp7.bkt.clouddn.com/github/en-demo.png)\n\n最初使用手动方式将文件名拷贝到[谷歌翻译](http://translate.google.cn/)，得到翻译结果之后，将翻译结果变为小写，将空格替换为\"-\"，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。\n\n由于`Vue`的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用[loadash](https://lodash.com/)来进行数据处理\n\n### 所有字母小写\n\n```js\n_.lowerCase(str)\n\n```\n\n### 空格变为-\n\n使用正则表达式替换即可\n\n```js\nstr.replace(/\\s+/g, \"-\")\n\n```\n但是这时候可能会出现一个问题，在字符串前后都有空格的时候`\" Hello World \"`，会生成`\"-hello-world-\"`,这不是我们需要的\n\n所以在替换之前将首尾空格去掉即可\n\n```js\n_.trim(str)\n\n```\n所以初版就是这样子的\n\n![第一版功能](http://o93mwnwp7.bkt.clouddn.com/github/first-result.png)\n\n## 添加翻译、复制功能\n\n但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是[有道翻译api](http://fanyi.youdao.com/openapi)，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的[axios](https://github.com/mzabriskie/axios)并不支持jsonp，所以采用[vue-resource](https://github.com/pagekit/vue-resource)。\n\n{% plantuml %}\n    title 请求流程\n\n    View -> Watcher : 数据改变\n\n    Watcher -> Methods : 调用方法\n\n    Methods --> 有道翻译 : 请求数据\n\n    有道翻译 --> Methods: 数据返回\n\n    Methods -> Methods : 数据格式化\n\n    Methods -> View : 展示数据 \n\n{% endplantuml %}\n\n但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供**1000**次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。\n\n```js\ngetTrans:_.debounce(function(){},500)\n\n```\n\n最后使用[clipboardjs](https://clipboardjs.com/)为格式化的结果提供一个复制功能。这样就更加方便了。\n\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n> 但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。","slug":"realize-the-path-of-chinese-into-english","published":1,"updated":"2017-04-12T05:49:33.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3t00187sv1uf83hs8u","content":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500\" alt=\"题图\"></p>\n<p>在使用<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。</p>\n<a id=\"more\"></a>\n<p>最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照<a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"external\">W3CPlus</a>的命名方式</p>\n<ul>\n<li>对应英文翻译</li>\n<li>所有字母小写</li>\n<li>空格变为- </li>\n</ul>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/en-demo.png\" alt=\"W3C命名方式\"></p>\n<p>最初使用手动方式将文件名拷贝到<a href=\"http://translate.google.cn/\" target=\"_blank\" rel=\"external\">谷歌翻译</a>，得到翻译结果之后，将翻译结果变为小写，将空格替换为”-“，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。</p>\n<p>由于<code>Vue</code>的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用<a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external\">loadash</a>来进行数据处理</p>\n<h3 id=\"所有字母小写\"><a href=\"#所有字母小写\" class=\"headerlink\" title=\"所有字母小写\"></a>所有字母小写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.lowerCase(str)</div></pre></td></tr></table></figure>\n<h3 id=\"空格变为\"><a href=\"#空格变为\" class=\"headerlink\" title=\"空格变为-\"></a>空格变为-</h3><p>使用正则表达式替换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">\"-\"</span>)</div></pre></td></tr></table></figure>\n<p>但是这时候可能会出现一个问题，在字符串前后都有空格的时候<code>&quot; Hello World &quot;</code>，会生成<code>&quot;-hello-world-&quot;</code>,这不是我们需要的</p>\n<p>所以在替换之前将首尾空格去掉即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.trim(str)</div></pre></td></tr></table></figure>\n<p>所以初版就是这样子的</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/first-result.png\" alt=\"第一版功能\"></p>\n<h2 id=\"添加翻译、复制功能\"><a href=\"#添加翻译、复制功能\" class=\"headerlink\" title=\"添加翻译、复制功能\"></a>添加翻译、复制功能</h2><p>但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是<a href=\"http://fanyi.youdao.com/openapi\" target=\"_blank\" rel=\"external\">有道翻译api</a>，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a>并不支持jsonp，所以采用<a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"external\">vue-resource</a>。</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJS-sDZvVqSt55PQPMgwWQwSGdbYId95Qf62by6pgXcUzwvvDsVcqVmON5qmSgCGtjIGZFwKOgEJ5XkRdKrOycxRpsUQfN5mmSLsWccTpEbysJdw-V_UBzHD12Y5sWKtauaAHr4MO2BFpnVufJsVFGp8GsKweinRiURgd_sdFD1HLO4zOAJpTEFNvabqGXGfS0000\">\n<p>但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供<strong>1000</strong>次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getTrans:_.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<p>最后使用<a href=\"https://clipboardjs.com/\" target=\"_blank\" rel=\"external\">clipboardjs</a>为格式化的结果提供一个复制功能。这样就更加方便了。</p>\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n<blockquote>\n<p>但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。</p>\n</blockquote>\n","excerpt":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/url-address.jpg?imageView/2/w/500\" alt=\"题图\"></p>\n<p>在使用<a href=\"https://hexo.io/\">Hexo</a>创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。</p>","more":"<p>最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照<a href=\"http://www.w3cplus.com/\">W3CPlus</a>的命名方式</p>\n<ul>\n<li>对应英文翻译</li>\n<li>所有字母小写</li>\n<li>空格变为- </li>\n</ul>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/en-demo.png\" alt=\"W3C命名方式\"></p>\n<p>最初使用手动方式将文件名拷贝到<a href=\"http://translate.google.cn/\">谷歌翻译</a>，得到翻译结果之后，将翻译结果变为小写，将空格替换为”-“，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。</p>\n<p>由于<code>Vue</code>的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用<a href=\"https://lodash.com/\">loadash</a>来进行数据处理</p>\n<h3 id=\"所有字母小写\"><a href=\"#所有字母小写\" class=\"headerlink\" title=\"所有字母小写\"></a>所有字母小写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.lowerCase(str)</div></pre></td></tr></table></figure>\n<h3 id=\"空格变为\"><a href=\"#空格变为\" class=\"headerlink\" title=\"空格变为-\"></a>空格变为-</h3><p>使用正则表达式替换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">\"-\"</span>)</div></pre></td></tr></table></figure>\n<p>但是这时候可能会出现一个问题，在字符串前后都有空格的时候<code>&quot; Hello World &quot;</code>，会生成<code>&quot;-hello-world-&quot;</code>,这不是我们需要的</p>\n<p>所以在替换之前将首尾空格去掉即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.trim(str)</div></pre></td></tr></table></figure>\n<p>所以初版就是这样子的</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/first-result.png\" alt=\"第一版功能\"></p>\n<h2 id=\"添加翻译、复制功能\"><a href=\"#添加翻译、复制功能\" class=\"headerlink\" title=\"添加翻译、复制功能\"></a>添加翻译、复制功能</h2><p>但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是<a href=\"http://fanyi.youdao.com/openapi\">有道翻译api</a>，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的<a href=\"https://github.com/mzabriskie/axios\">axios</a>并不支持jsonp，所以采用<a href=\"https://github.com/pagekit/vue-resource\">vue-resource</a>。</p>\n<img  src=http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJS-sDZvVqSt55PQPMgwWQwSGdbYId95Qf62by6pgXcUzwvvDsVcqVmON5qmSgCGtjIGZFwKOgEJ5XkRdKrOycxRpsUQfN5mmSLsWccTpEbysJdw-V_UBzHD12Y5sWKtauaAHr4MO2BFpnVufJsVFGp8GsKweinRiURgd_sdFD1HLO4zOAJpTEFNvabqGXGfS0000>\n<p>但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供<strong>1000</strong>次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getTrans:_.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<p>最后使用<a href=\"https://clipboardjs.com/\">clipboardjs</a>为格式化的结果提供一个复制功能。这样就更加方便了。</p>\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n<blockquote>\n<p>但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。</p>\n</blockquote>"},{"title":"解决Ubuntu下phpstorm配置完php环境之后仍出现502错误","date":"2014-05-25T13:06:56.000Z","_content":"即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的\n\n<!--more-->\n\n![问题图片](http://i.stack.imgur.com/3GHlJ.png)\n\n解决方案\n\n`sudo apt-get install php5-cgi  `","source":"_posts/solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes.md","raw":"---\ntitle: 解决Ubuntu下phpstorm配置完php环境之后仍出现502错误\ndate: 2014-05-25 21:06:56\ntags: 操作系统\n---\n即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的\n\n<!--more-->\n\n![问题图片](http://i.stack.imgur.com/3GHlJ.png)\n\n解决方案\n\n`sudo apt-get install php5-cgi  `","slug":"solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes","published":1,"updated":"2016-07-05T14:34:09.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3t001a7sv1e3hed1ib","content":"<p>即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的</p>\n<a id=\"more\"></a>\n<p><img src=\"http://i.stack.imgur.com/3GHlJ.png\" alt=\"问题图片\"></p>\n<p>解决方案</p>\n<p><code>sudo apt-get install php5-cgi</code></p>\n","excerpt":"<p>即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的</p>","more":"<p><img src=\"http://i.stack.imgur.com/3GHlJ.png\" alt=\"问题图片\"></p>\n<p>解决方案</p>\n<p><code>sudo apt-get install php5-cgi</code></p>"},{"title":"解决混合网址导致的跨域问题","date":"2016-06-30T06:37:37.000Z","_content":"如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为\n> “Mixed Content: The page at 'https://yourwebsite.com/' was loaded over HTTPS，but requested an insecure script 'http://anotherweb.com/script.js'.This request has been blocked；the content must be served over HTTPS.”   \n\n<!--more-->\n\n以及   \n\n> Mixed Content: The page at 'https://yourweb.com/' was loaded over HTTPS，but requested an insecure image 'http://anotherweb.com/image.jpg'.This content should also be served over HTTPS\n\n这时候可以将引用的外域的资源的前面的地址 **http://** 改为 **//** 即可，这样就会让加载的方式默认使用https的方式加载资源。","source":"_posts/solve-the-problem-of-mixed-site-of-cross-domain.md","raw":"---\ntitle: 解决混合网址导致的跨域问题\ndate: 2016-06-30 14:37:37\ntags: [跨域]\n---\n如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为\n> “Mixed Content: The page at 'https://yourwebsite.com/' was loaded over HTTPS，but requested an insecure script 'http://anotherweb.com/script.js'.This request has been blocked；the content must be served over HTTPS.”   \n\n<!--more-->\n\n以及   \n\n> Mixed Content: The page at 'https://yourweb.com/' was loaded over HTTPS，but requested an insecure image 'http://anotherweb.com/image.jpg'.This content should also be served over HTTPS\n\n这时候可以将引用的外域的资源的前面的地址 **http://** 改为 **//** 即可，这样就会让加载的方式默认使用https的方式加载资源。","slug":"solve-the-problem-of-mixed-site-of-cross-domain","published":1,"updated":"2016-07-01T12:18:44.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3t001d7sv1zfolza68","content":"<p>如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为</p>\n<blockquote>\n<p>“Mixed Content: The page at ‘<a href=\"https://yourwebsite.com/\" target=\"_blank\" rel=\"external\">https://yourwebsite.com/</a>‘ was loaded over HTTPS，but requested an insecure script ‘<a href=\"http://anotherweb.com/script.js&#39;.This\" target=\"_blank\" rel=\"external\">http://anotherweb.com/script.js&#39;.This</a> request has been blocked；the content must be served over HTTPS.”   </p>\n</blockquote>\n<a id=\"more\"></a>\n<p>以及   </p>\n<blockquote>\n<p>Mixed Content: The page at ‘<a href=\"https://yourweb.com/\" target=\"_blank\" rel=\"external\">https://yourweb.com/</a>‘ was loaded over HTTPS，but requested an insecure image ‘<a href=\"http://anotherweb.com/image.jpg&#39;.This\" target=\"_blank\" rel=\"external\">http://anotherweb.com/image.jpg&#39;.This</a> content should also be served over HTTPS</p>\n</blockquote>\n<p>这时候可以将引用的外域的资源的前面的地址 <strong>http://</strong> 改为 <strong>//</strong> 即可，这样就会让加载的方式默认使用https的方式加载资源。</p>\n","excerpt":"<p>如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为</p>\n<blockquote>\n<p>“Mixed Content: The page at ‘<a href=\"https://yourwebsite.com/\">https://yourwebsite.com/</a>‘ was loaded over HTTPS，but requested an insecure script ‘<a href=\"http://anotherweb.com/script.js&#39;.This\">http://anotherweb.com/script.js&#39;.This</a> request has been blocked；the content must be served over HTTPS.”   </p>\n</blockquote>","more":"<p>以及   </p>\n<blockquote>\n<p>Mixed Content: The page at ‘<a href=\"https://yourweb.com/\">https://yourweb.com/</a>‘ was loaded over HTTPS，but requested an insecure image ‘<a href=\"http://anotherweb.com/image.jpg&#39;.This\">http://anotherweb.com/image.jpg&#39;.This</a> content should also be served over HTTPS</p>\n</blockquote>\n<p>这时候可以将引用的外域的资源的前面的地址 <strong>http://</strong> 改为 <strong>//</strong> 即可，这样就会让加载的方式默认使用https的方式加载资源。</p>"},{"title":"goJs的一些使用技巧及问题解决方案","date":"2016-10-27T04:01:26.000Z","_content":"\n[go.js](http://gojs.net/)是一个非常强大的图表库，使用gojs可以制作不同的图标效果\n![gojsIntro](http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png)\n\n最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，[官方社区](https://forum.nwoods.com/c/gojs)会非常快速的帮助解答遇到的每个问题\n\n以下是我在开发中遇到的一些小问题，以及对应的解决方案\n\n<!--more-->\n\n# 在绘制流程图的过程中，连接线会自动选择最优的路径\n![连接线问题](https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png)\n![连接线问题2](https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png)\n\n这个问题的解决方案是\n* 为每一个连接点设置不同`Link.toPortId`，就像官方的例子中一样\n* 设置`GraphLinksModel.html.linkFromPortIdProperty` 和 `GraphLinksModel.html.linkToPortIdProperty`属性\n* 设置`diagram.model`的属性\n```js\nmyDiagram.model.linkFromPortIdProperty = \"fromPort\"; \n    myDiagram.model.linkToPortIdProperty = \"toPort\";\n```\n* 或者直接在初始化load(){}中的json数据中加入代码即可\n```js\nmodel.linkFromPortIdProperty = \"fromPort\"; \nmodel.linkToPortIdProperty = \"toPort\";\n```\n\n# 根据节点数据进行函数处理\n\n**假如我需要这样一个功能：**\n\n> 如果流程图的连接线没有文字，那么隐藏连接线上的文本panel\n\n这个问题可以根据`go.Binding`暴露对外接口的方式来实现\n\n```js\n\n new go.Binding(\"visible\", \"text\", function (t) { return t !== \"\" })\n\n ```\n\n # 设置图像的初始化缩放比例\n \n 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，\n * 可以在创建Diagram的时候进行设置\n ``` js\n myDiagram =\n      $(go.Diagram, \"myDiagramDiv\",  \n        {\n            scale : 1.3\n        });\n\n```\n* 同时可以使用`commandHandler`设置缩放比，实现放大缩小按钮\n\n```js\nmyDiagram.commandHandler.increaseZoom();\nmyDiagram.commandHandler.decreaseZoom();\n```\n\n# 画布无限拖动\n\n> 如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动\n\n```js\n\nmyDiagram.scrollMode = go.Diagram.InfiniteScroll;\n\n```\n\n> 同时我们可以通过设置画布属性，来为画布设置多余的留白空间\n\n```js\n scrollMargin: new go.Margin(100, 200, 100, 100),  //设置界面留白空间，允许用户拖动范围\n \n ```\n\n\n # 连接线的绕行路线问题\n\n go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。\n\n ![绕开节点](http://o93mwnwp7.bkt.clouddn.com/github/linkrout.png)\n\n 这个只需在初始化连接线的时候，修改routing属性即可\n\n ```js\n $(go.Link, \n        {\n            routing: go.Link.AvoidsNodes // 绕行节点\n        },\n ```\n\n 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性`avoidable`即可\n\n ```js\n avoidable:false\n ```\n\n\n\n\n\n # 参考内容\n\n http://gojs.net/latest/samples/scrollModes.html\n\n http://gojs.net/latest/intro/index.html\n\n https://forum.nwoods.com/c/gojs","source":"_posts/some-of-gojs-tips-and-solutions.md","raw":"---\ntitle: goJs的一些使用技巧及问题解决方案\ndate: 2016-10-27 12:01:26\ntags: [gojs,javascript]\n---\n\n[go.js](http://gojs.net/)是一个非常强大的图表库，使用gojs可以制作不同的图标效果\n![gojsIntro](http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png)\n\n最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，[官方社区](https://forum.nwoods.com/c/gojs)会非常快速的帮助解答遇到的每个问题\n\n以下是我在开发中遇到的一些小问题，以及对应的解决方案\n\n<!--more-->\n\n# 在绘制流程图的过程中，连接线会自动选择最优的路径\n![连接线问题](https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png)\n![连接线问题2](https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png)\n\n这个问题的解决方案是\n* 为每一个连接点设置不同`Link.toPortId`，就像官方的例子中一样\n* 设置`GraphLinksModel.html.linkFromPortIdProperty` 和 `GraphLinksModel.html.linkToPortIdProperty`属性\n* 设置`diagram.model`的属性\n```js\nmyDiagram.model.linkFromPortIdProperty = \"fromPort\"; \n    myDiagram.model.linkToPortIdProperty = \"toPort\";\n```\n* 或者直接在初始化load(){}中的json数据中加入代码即可\n```js\nmodel.linkFromPortIdProperty = \"fromPort\"; \nmodel.linkToPortIdProperty = \"toPort\";\n```\n\n# 根据节点数据进行函数处理\n\n**假如我需要这样一个功能：**\n\n> 如果流程图的连接线没有文字，那么隐藏连接线上的文本panel\n\n这个问题可以根据`go.Binding`暴露对外接口的方式来实现\n\n```js\n\n new go.Binding(\"visible\", \"text\", function (t) { return t !== \"\" })\n\n ```\n\n # 设置图像的初始化缩放比例\n \n 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，\n * 可以在创建Diagram的时候进行设置\n ``` js\n myDiagram =\n      $(go.Diagram, \"myDiagramDiv\",  \n        {\n            scale : 1.3\n        });\n\n```\n* 同时可以使用`commandHandler`设置缩放比，实现放大缩小按钮\n\n```js\nmyDiagram.commandHandler.increaseZoom();\nmyDiagram.commandHandler.decreaseZoom();\n```\n\n# 画布无限拖动\n\n> 如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动\n\n```js\n\nmyDiagram.scrollMode = go.Diagram.InfiniteScroll;\n\n```\n\n> 同时我们可以通过设置画布属性，来为画布设置多余的留白空间\n\n```js\n scrollMargin: new go.Margin(100, 200, 100, 100),  //设置界面留白空间，允许用户拖动范围\n \n ```\n\n\n # 连接线的绕行路线问题\n\n go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。\n\n ![绕开节点](http://o93mwnwp7.bkt.clouddn.com/github/linkrout.png)\n\n 这个只需在初始化连接线的时候，修改routing属性即可\n\n ```js\n $(go.Link, \n        {\n            routing: go.Link.AvoidsNodes // 绕行节点\n        },\n ```\n\n 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性`avoidable`即可\n\n ```js\n avoidable:false\n ```\n\n\n\n\n\n # 参考内容\n\n http://gojs.net/latest/samples/scrollModes.html\n\n http://gojs.net/latest/intro/index.html\n\n https://forum.nwoods.com/c/gojs","slug":"some-of-gojs-tips-and-solutions","published":1,"updated":"2016-10-28T02:38:40.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb3t001f7sv1ezujgofp","content":"<p><a href=\"http://gojs.net/\" target=\"_blank\" rel=\"external\">go.js</a>是一个非常强大的图表库，使用gojs可以制作不同的图标效果<br><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png\" alt=\"gojsIntro\"></p>\n<p>最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，<a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"external\">官方社区</a>会非常快速的帮助解答遇到的每个问题</p>\n<p>以下是我在开发中遇到的一些小问题，以及对应的解决方案</p>\n<a id=\"more\"></a>\n<h1 id=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"><a href=\"#在绘制流程图的过程中，连接线会自动选择最优的路径\" class=\"headerlink\" title=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"></a>在绘制流程图的过程中，连接线会自动选择最优的路径</h1><p><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png\" alt=\"连接线问题\"><br><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png\" alt=\"连接线问题2\"></p>\n<p>这个问题的解决方案是</p>\n<ul>\n<li>为每一个连接点设置不同<code>Link.toPortId</code>，就像官方的例子中一样</li>\n<li>设置<code>GraphLinksModel.html.linkFromPortIdProperty</code> 和 <code>GraphLinksModel.html.linkToPortIdProperty</code>属性</li>\n<li><p>设置<code>diagram.model</code>的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </div><div class=\"line\">    myDiagram.model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在初始化load(){}中的json数据中加入代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </div><div class=\"line\">model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"根据节点数据进行函数处理\"><a href=\"#根据节点数据进行函数处理\" class=\"headerlink\" title=\"根据节点数据进行函数处理\"></a>根据节点数据进行函数处理</h1><p><strong>假如我需要这样一个功能：</strong></p>\n<blockquote>\n<p>如果流程图的连接线没有文字，那么隐藏连接线上的文本panel</p>\n</blockquote>\n<p>这个问题可以根据<code>go.Binding</code>暴露对外接口的方式来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> go.Binding(<span class=\"string\">\"visible\"</span>, <span class=\"string\">\"text\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t !== <span class=\"string\">\"\"</span> &#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"设置图像的初始化缩放比例\"><a href=\"#设置图像的初始化缩放比例\" class=\"headerlink\" title=\"设置图像的初始化缩放比例\"></a>设置图像的初始化缩放比例</h1><p> 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，</p>\n<ul>\n<li>可以在创建Diagram的时候进行设置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram =</div><div class=\"line\">     $(go.Diagram, <span class=\"string\">\"myDiagramDiv\"</span>,  </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"attr\">scale</span> : <span class=\"number\">1.3</span></div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>同时可以使用<code>commandHandler</code>设置缩放比，实现放大缩小按钮</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.commandHandler.increaseZoom();</div><div class=\"line\">myDiagram.commandHandler.decreaseZoom();</div></pre></td></tr></table></figure>\n<h1 id=\"画布无限拖动\"><a href=\"#画布无限拖动\" class=\"headerlink\" title=\"画布无限拖动\"></a>画布无限拖动</h1><blockquote>\n<p>如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">myDiagram.scrollMode = go.Diagram.InfiniteScroll;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>同时我们可以通过设置画布属性，来为画布设置多余的留白空间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrollMargin: <span class=\"keyword\">new</span> go.Margin(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>),  <span class=\"comment\">//设置界面留白空间，允许用户拖动范围</span></div></pre></td></tr></table></figure>\n<h1 id=\"连接线的绕行路线问题\"><a href=\"#连接线的绕行路线问题\" class=\"headerlink\" title=\"连接线的绕行路线问题\"></a>连接线的绕行路线问题</h1><p> go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。</p>\n<p> <img src=\"http://o93mwnwp7.bkt.clouddn.com/github/linkrout.png\" alt=\"绕开节点\"></p>\n<p> 这个只需在初始化连接线的时候，修改routing属性即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(go.Link, </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"attr\">routing</span>: go.Link.AvoidsNodes <span class=\"comment\">// 绕行节点</span></div><div class=\"line\">       &#125;,</div></pre></td></tr></table></figure>\n<p> 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性<code>avoidable</code>即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">avoidable:<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h1><p> <a href=\"http://gojs.net/latest/samples/scrollModes.html\" target=\"_blank\" rel=\"external\">http://gojs.net/latest/samples/scrollModes.html</a></p>\n<p> <a href=\"http://gojs.net/latest/intro/index.html\" target=\"_blank\" rel=\"external\">http://gojs.net/latest/intro/index.html</a></p>\n<p> <a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"external\">https://forum.nwoods.com/c/gojs</a></p>\n","excerpt":"<p><a href=\"http://gojs.net/\">go.js</a>是一个非常强大的图表库，使用gojs可以制作不同的图标效果<br><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/gojsIntro.png\" alt=\"gojsIntro\"></p>\n<p>最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，<a href=\"https://forum.nwoods.com/c/gojs\">官方社区</a>会非常快速的帮助解答遇到的每个问题</p>\n<p>以下是我在开发中遇到的一些小问题，以及对应的解决方案</p>","more":"<h1 id=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"><a href=\"#在绘制流程图的过程中，连接线会自动选择最优的路径\" class=\"headerlink\" title=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"></a>在绘制流程图的过程中，连接线会自动选择最优的路径</h1><p><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png\" alt=\"连接线问题\"><br><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png\" alt=\"连接线问题2\"></p>\n<p>这个问题的解决方案是</p>\n<ul>\n<li>为每一个连接点设置不同<code>Link.toPortId</code>，就像官方的例子中一样</li>\n<li>设置<code>GraphLinksModel.html.linkFromPortIdProperty</code> 和 <code>GraphLinksModel.html.linkToPortIdProperty</code>属性</li>\n<li><p>设置<code>diagram.model</code>的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </div><div class=\"line\">    myDiagram.model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在初始化load(){}中的json数据中加入代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </div><div class=\"line\">model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"根据节点数据进行函数处理\"><a href=\"#根据节点数据进行函数处理\" class=\"headerlink\" title=\"根据节点数据进行函数处理\"></a>根据节点数据进行函数处理</h1><p><strong>假如我需要这样一个功能：</strong></p>\n<blockquote>\n<p>如果流程图的连接线没有文字，那么隐藏连接线上的文本panel</p>\n</blockquote>\n<p>这个问题可以根据<code>go.Binding</code>暴露对外接口的方式来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> go.Binding(<span class=\"string\">\"visible\"</span>, <span class=\"string\">\"text\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t !== <span class=\"string\">\"\"</span> &#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"设置图像的初始化缩放比例\"><a href=\"#设置图像的初始化缩放比例\" class=\"headerlink\" title=\"设置图像的初始化缩放比例\"></a>设置图像的初始化缩放比例</h1><p> 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，</p>\n<ul>\n<li>可以在创建Diagram的时候进行设置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram =</div><div class=\"line\">     $(go.Diagram, <span class=\"string\">\"myDiagramDiv\"</span>,  </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"attr\">scale</span> : <span class=\"number\">1.3</span></div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>同时可以使用<code>commandHandler</code>设置缩放比，实现放大缩小按钮</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myDiagram.commandHandler.increaseZoom();</div><div class=\"line\">myDiagram.commandHandler.decreaseZoom();</div></pre></td></tr></table></figure>\n<h1 id=\"画布无限拖动\"><a href=\"#画布无限拖动\" class=\"headerlink\" title=\"画布无限拖动\"></a>画布无限拖动</h1><blockquote>\n<p>如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">myDiagram.scrollMode = go.Diagram.InfiniteScroll;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>同时我们可以通过设置画布属性，来为画布设置多余的留白空间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrollMargin: <span class=\"keyword\">new</span> go.Margin(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>),  <span class=\"comment\">//设置界面留白空间，允许用户拖动范围</span></div></pre></td></tr></table></figure>\n<h1 id=\"连接线的绕行路线问题\"><a href=\"#连接线的绕行路线问题\" class=\"headerlink\" title=\"连接线的绕行路线问题\"></a>连接线的绕行路线问题</h1><p> go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。</p>\n<p> <img src=\"http://o93mwnwp7.bkt.clouddn.com/github/linkrout.png\" alt=\"绕开节点\"></p>\n<p> 这个只需在初始化连接线的时候，修改routing属性即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(go.Link, </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"attr\">routing</span>: go.Link.AvoidsNodes <span class=\"comment\">// 绕行节点</span></div><div class=\"line\">       &#125;,</div></pre></td></tr></table></figure>\n<p> 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性<code>avoidable</code>即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">avoidable:<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h1><p> <a href=\"http://gojs.net/latest/samples/scrollModes.html\">http://gojs.net/latest/samples/scrollModes.html</a></p>\n<p> <a href=\"http://gojs.net/latest/intro/index.html\">http://gojs.net/latest/intro/index.html</a></p>\n<p> <a href=\"https://forum.nwoods.com/c/gojs\">https://forum.nwoods.com/c/gojs</a></p>"},{"title":"Ubuntu12添加程序启动器","date":"2014-05-21T07:11:48.000Z","_content":"> * 在/usr/share/applications目录下\n\n```\ncd /usr/share/applications  \nvim eclipse.desktop  \n```\n<!---more-->\n\n> * 编辑eclipse.desktop并保存。简单的配置示例：\n\n```\n[Desktop Entry]  \nVersion=1.0  \nName=eclipse  \nExec=/home/hu/soft/eclipse/eclipse  \nTerminal=false  \nIcon=/home/hu/soft/eclipse/icon.xpm  \nType=Application  \nCategories=Development  \n```","source":"_posts/starter-ubuntu-12-add-program.md","raw":"---\ntitle: Ubuntu12添加程序启动器\ndate: 2014-05-21 15:11:48\ntags: 操作系统\n---\n> * 在/usr/share/applications目录下\n\n```\ncd /usr/share/applications  \nvim eclipse.desktop  \n```\n<!---more-->\n\n> * 编辑eclipse.desktop并保存。简单的配置示例：\n\n```\n[Desktop Entry]  \nVersion=1.0  \nName=eclipse  \nExec=/home/hu/soft/eclipse/eclipse  \nTerminal=false  \nIcon=/home/hu/soft/eclipse/icon.xpm  \nType=Application  \nCategories=Development  \n```","slug":"starter-ubuntu-12-add-program","published":1,"updated":"2016-07-05T14:33:27.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb49001h7sv1q459xf7u","content":"<blockquote>\n<ul>\n<li>在/usr/share/applications目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/share/applications  </div><div class=\"line\">vim eclipse.desktop</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>编辑eclipse.desktop并保存。简单的配置示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]  </div><div class=\"line\">Version=1.0  </div><div class=\"line\">Name=eclipse  </div><div class=\"line\">Exec=/home/hu/soft/eclipse/eclipse  </div><div class=\"line\">Terminal=false  </div><div class=\"line\">Icon=/home/hu/soft/eclipse/icon.xpm  </div><div class=\"line\">Type=Application  </div><div class=\"line\">Categories=Development</div></pre></td></tr></table></figure>","excerpt":"<blockquote>\n<ul>\n<li>在/usr/share/applications目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/share/applications  </div><div class=\"line\">vim eclipse.desktop</div></pre></td></tr></table></figure>","more":"<blockquote>\n<ul>\n<li>编辑eclipse.desktop并保存。简单的配置示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]  </div><div class=\"line\">Version=1.0  </div><div class=\"line\">Name=eclipse  </div><div class=\"line\">Exec=/home/hu/soft/eclipse/eclipse  </div><div class=\"line\">Terminal=false  </div><div class=\"line\">Icon=/home/hu/soft/eclipse/icon.xpm  </div><div class=\"line\">Type=Application  </div><div class=\"line\">Categories=Development</div></pre></td></tr></table></figure>"},{"title":"淘宝提供ip数据库api","date":"2013-07-23T08:51:04.000Z","_content":"地址：[ip.taobao.com](http://ip.taobao.com)\n**接口说明**\n---\n1. 请求接口（GET）：\n`http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]`\n2. 响应信息：\n（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商\n\n<!--more-->\n\n3. 返回数据格式：\n```\n{\"code\":0,\"data\":{\"ip\":\"210.75.225.254\",\"country\":\"\\u4e2d\\u56fd\",\"area\":\"\\u534e\\u5317\",\n\"region\":\"\\u5317\\u4eac\\u5e02\",\"city\":\"\\u5317\\u4eac\\u5e02\",\"county\":\"\",\"isp\":\"\\u7535\\u4fe1\",\n\"country_id\":\"86\",\"area_id\":\"100000\",\"region_id\":\"110000\",\"city_id\":\"110000\",\n\"county_id\":\"-1\",\"isp_id\":\"100017\"}}\n```\n**访问限制**\n---\n为了保障服务正常运行，每个用户的访问频率需小于10qps。\n其中code的值的含义为，0：成功，1：失败。\n\n---\n\n*另外补充*\n搜狐IP地址查询接口（默认GBK）：http://pv.sohu.com/cityjson\n搜狐IP地址查询接口（可设置编码）：http://pv.sohu.com/cityjson?ie=utf-8\n搜狐另外的IP地址查询接口：http://txt.go.sohu.com/ip/soip","source":"_posts/taobao-provide-ip-database-api.md","raw":"---\ntitle: 淘宝提供ip数据库api\ndate: 2013-07-23 16:51:04\ntags: [API]\n---\n地址：[ip.taobao.com](http://ip.taobao.com)\n**接口说明**\n---\n1. 请求接口（GET）：\n`http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]`\n2. 响应信息：\n（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商\n\n<!--more-->\n\n3. 返回数据格式：\n```\n{\"code\":0,\"data\":{\"ip\":\"210.75.225.254\",\"country\":\"\\u4e2d\\u56fd\",\"area\":\"\\u534e\\u5317\",\n\"region\":\"\\u5317\\u4eac\\u5e02\",\"city\":\"\\u5317\\u4eac\\u5e02\",\"county\":\"\",\"isp\":\"\\u7535\\u4fe1\",\n\"country_id\":\"86\",\"area_id\":\"100000\",\"region_id\":\"110000\",\"city_id\":\"110000\",\n\"county_id\":\"-1\",\"isp_id\":\"100017\"}}\n```\n**访问限制**\n---\n为了保障服务正常运行，每个用户的访问频率需小于10qps。\n其中code的值的含义为，0：成功，1：失败。\n\n---\n\n*另外补充*\n搜狐IP地址查询接口（默认GBK）：http://pv.sohu.com/cityjson\n搜狐IP地址查询接口（可设置编码）：http://pv.sohu.com/cityjson?ie=utf-8\n搜狐另外的IP地址查询接口：http://txt.go.sohu.com/ip/soip","slug":"taobao-provide-ip-database-api","published":1,"updated":"2016-07-01T08:31:32.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb49001j7sv1kldbkcw6","content":"<p>地址：<a href=\"http://ip.taobao.com\" target=\"_blank\" rel=\"external\">ip.taobao.com</a></p>\n<h2 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a><strong>接口说明</strong></h2><ol>\n<li>请求接口（GET）：<br><code>http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]</code></li>\n<li>响应信息：<br>（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>返回数据格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;code&quot;:0,&quot;data&quot;:&#123;&quot;ip&quot;:&quot;210.75.225.254&quot;,&quot;country&quot;:&quot;\\u4e2d\\u56fd&quot;,&quot;area&quot;:&quot;\\u534e\\u5317&quot;,</div><div class=\"line\">&quot;region&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;city&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;county&quot;:&quot;&quot;,&quot;isp&quot;:&quot;\\u7535\\u4fe1&quot;,</div><div class=\"line\">&quot;country_id&quot;:&quot;86&quot;,&quot;area_id&quot;:&quot;100000&quot;,&quot;region_id&quot;:&quot;110000&quot;,&quot;city_id&quot;:&quot;110000&quot;,</div><div class=\"line\">&quot;county_id&quot;:&quot;-1&quot;,&quot;isp_id&quot;:&quot;100017&quot;&#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a><strong>访问限制</strong></h2><p>为了保障服务正常运行，每个用户的访问频率需小于10qps。<br>其中code的值的含义为，0：成功，1：失败。</p>\n<hr>\n<p><em>另外补充</em><br>搜狐IP地址查询接口（默认GBK）：<a href=\"http://pv.sohu.com/cityjson\" target=\"_blank\" rel=\"external\">http://pv.sohu.com/cityjson</a><br>搜狐IP地址查询接口（可设置编码）：<a href=\"http://pv.sohu.com/cityjson?ie=utf-8\" target=\"_blank\" rel=\"external\">http://pv.sohu.com/cityjson?ie=utf-8</a><br>搜狐另外的IP地址查询接口：<a href=\"http://txt.go.sohu.com/ip/soip\" target=\"_blank\" rel=\"external\">http://txt.go.sohu.com/ip/soip</a></p>\n","excerpt":"<p>地址：<a href=\"http://ip.taobao.com\">ip.taobao.com</a></p>\n<h2 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a><strong>接口说明</strong></h2><ol>\n<li>请求接口（GET）：<br><code>http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]</code></li>\n<li>响应信息：<br>（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商</li>\n</ol>","more":"<ol>\n<li>返回数据格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;code&quot;:0,&quot;data&quot;:&#123;&quot;ip&quot;:&quot;210.75.225.254&quot;,&quot;country&quot;:&quot;\\u4e2d\\u56fd&quot;,&quot;area&quot;:&quot;\\u534e\\u5317&quot;,</div><div class=\"line\">&quot;region&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;city&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;county&quot;:&quot;&quot;,&quot;isp&quot;:&quot;\\u7535\\u4fe1&quot;,</div><div class=\"line\">&quot;country_id&quot;:&quot;86&quot;,&quot;area_id&quot;:&quot;100000&quot;,&quot;region_id&quot;:&quot;110000&quot;,&quot;city_id&quot;:&quot;110000&quot;,</div><div class=\"line\">&quot;county_id&quot;:&quot;-1&quot;,&quot;isp_id&quot;:&quot;100017&quot;&#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a><strong>访问限制</strong></h2><p>为了保障服务正常运行，每个用户的访问频率需小于10qps。<br>其中code的值的含义为，0：成功，1：失败。</p>\n<hr>\n<p><em>另外补充</em><br>搜狐IP地址查询接口（默认GBK）：<a href=\"http://pv.sohu.com/cityjson\">http://pv.sohu.com/cityjson</a><br>搜狐IP地址查询接口（可设置编码）：<a href=\"http://pv.sohu.com/cityjson?ie=utf-8\">http://pv.sohu.com/cityjson?ie=utf-8</a><br>搜狐另外的IP地址查询接口：<a href=\"http://txt.go.sohu.com/ip/soip\">http://txt.go.sohu.com/ip/soip</a></p>"},{"title":"Ubuntu下的Firefox中文语言包安装","date":"2014-05-22T09:11:10.000Z","_content":"英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包\n\n`http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi   \n`","source":"_posts/the-firefox-chinese-language-pack-installed-ubuntu.md","raw":"---\ntitle: Ubuntu下的Firefox中文语言包安装\ndate: 2014-05-22 17:11:10\ntags: 操作系统\n---\n英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包\n\n`http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi   \n`","slug":"the-firefox-chinese-language-pack-installed-ubuntu","published":1,"updated":"2016-07-05T14:33:41.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb49001l7sv1h9dze8ie","content":"<p>英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包</p>\n<p><code>http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi</code></p>\n","excerpt":"","more":"<p>英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包</p>\n<p><code>http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi</code></p>\n"},{"title":"前端命令行工具代理设置","date":"2017-04-17T06:39:18.000Z","_content":"\n![npm](http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png)\n\n在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：\n\n* 使用国内镜像\n* 设置代理\n* 本地安装\n\n<!--more-->\n\n# 国内镜像\n\n使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载\n\n## NPM\n\n> 使用淘宝镜像 `https://registry.npm.taobao.org`\n\n安装时启用\n\n```bash\nnpm install  --registry=https://registry.npm.taobao.org\n```\n设置全局镜像\n\n```bash\nnpm config set registry < registry url >\n```\n> [使用CNPM](http://npm.taobao.org/)\n\ncnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。\n\n## Gem\n\n> 使用[Ruby-China](http://gems.ruby-china.org/)\n\n设置镜像\n\n```bash\ngem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n```\n\n# 设置代理\n\n设置代理需要有代理服务，保证可以访问到对应的地址\n\n## NPM\n\n设置代理\n\n```bash\nnpm config set proxy http://server:port\nnpm config set https-proxy http://server:port\n```\n取消代理\n\n```bash\nnpm config delete proxy\nnpm config delete https-proxy\n```\n查看代理\n\n```bash\nnpm config list\n```\n\n如果代理不支持https，修改npm存放package的网站地址为非https地址\n\n```bash\n$ npm config set registry \"http://registry.npmjs.org/\"\n```\n\n## Git\n\n设置代理\n\n```bash\n$ git config --global http.proxy http://server:port\n\n$ git config --global https.proxy http://server:port\n```\n\n删除代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看代理\n\n```bash\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n```\n\n## Gem\n\n设置代理\n\n> 安装时加上 --http-proxy 参数\n\n```bash\ngem install --http-proxy http://proxy:port sass\n```\n\n## bower\n\n设置代理\n\n```\n# 修改 .bowerrc 文件(如无则新增):\n\n{\n    \"proxy\": \"http://proxy:port\",\n    \"https-proxy\": \"http://proxy:port\"\n}\n```\n\n## apm\n\napm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置\n\n设置代理\n\n```bash\n$ apm config set https-proxy https://server:port\n```\n查看设置\n\n```bash\n$ apm config list\n```\n\n## 设置命令行代理\n\n> 可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理\n\n* **windows**\n\n这种设置只对本命令行窗口启用\n\n```bash\nset http_proxy=http://proxy:port\n\n# 用户名密码则输入\nset http_proxy_user=< username >\nset http_proxy_pass=< password >\n```\n* **OS X**\n\n```bash\nsudo networksetup -setwebproxy \"Ethernet\" http://proxy port\n```\n\n# 本地安装\n\n## NPM\n\n> 对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装\n\n## Gem\n\n1. 首先通过(rubygems)[https://rubygems.org/] 下载对应的包\n2. 通过本地安装\n\n```bash\ngem install --local sass.gem\n```\n\n# 关于OS X的代理\n\nOS X上有很多其他的下载需要代理，那么我们可以使用`Proxychains` 配合 `shadowsocks` 实现每个命令都可以使用代理\n\n1. 安装工具\n\n```bash\nbrew install proxychains-ng\n```\n2. 设置 Proxychains 安装目录下的 `proxychains.conf` 文件\n\n```bash\nvim /etc/proxychains.conf\n```\n在`[ProxyList]`下加入\n```\nsocks5  127.0.0.1 1080\n```\n\n3. 使用 `proxychains4` 为命令代理\n\n```bash\nproxychains4 curl https://www.twitter.com/\nproxychains4 git push origin master\n```\n\n","source":"_posts/the-front-command-line-tools-proxy-settings.md","raw":"---\ntitle: 前端命令行工具代理设置\ndate: 2017-04-17 14:39:18\ntags: [node,git]\n---\n\n![npm](http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png)\n\n在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：\n\n* 使用国内镜像\n* 设置代理\n* 本地安装\n\n<!--more-->\n\n# 国内镜像\n\n使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载\n\n## NPM\n\n> 使用淘宝镜像 `https://registry.npm.taobao.org`\n\n安装时启用\n\n```bash\nnpm install  --registry=https://registry.npm.taobao.org\n```\n设置全局镜像\n\n```bash\nnpm config set registry < registry url >\n```\n> [使用CNPM](http://npm.taobao.org/)\n\ncnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。\n\n## Gem\n\n> 使用[Ruby-China](http://gems.ruby-china.org/)\n\n设置镜像\n\n```bash\ngem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n```\n\n# 设置代理\n\n设置代理需要有代理服务，保证可以访问到对应的地址\n\n## NPM\n\n设置代理\n\n```bash\nnpm config set proxy http://server:port\nnpm config set https-proxy http://server:port\n```\n取消代理\n\n```bash\nnpm config delete proxy\nnpm config delete https-proxy\n```\n查看代理\n\n```bash\nnpm config list\n```\n\n如果代理不支持https，修改npm存放package的网站地址为非https地址\n\n```bash\n$ npm config set registry \"http://registry.npmjs.org/\"\n```\n\n## Git\n\n设置代理\n\n```bash\n$ git config --global http.proxy http://server:port\n\n$ git config --global https.proxy http://server:port\n```\n\n删除代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看代理\n\n```bash\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n```\n\n## Gem\n\n设置代理\n\n> 安装时加上 --http-proxy 参数\n\n```bash\ngem install --http-proxy http://proxy:port sass\n```\n\n## bower\n\n设置代理\n\n```\n# 修改 .bowerrc 文件(如无则新增):\n\n{\n    \"proxy\": \"http://proxy:port\",\n    \"https-proxy\": \"http://proxy:port\"\n}\n```\n\n## apm\n\napm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置\n\n设置代理\n\n```bash\n$ apm config set https-proxy https://server:port\n```\n查看设置\n\n```bash\n$ apm config list\n```\n\n## 设置命令行代理\n\n> 可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理\n\n* **windows**\n\n这种设置只对本命令行窗口启用\n\n```bash\nset http_proxy=http://proxy:port\n\n# 用户名密码则输入\nset http_proxy_user=< username >\nset http_proxy_pass=< password >\n```\n* **OS X**\n\n```bash\nsudo networksetup -setwebproxy \"Ethernet\" http://proxy port\n```\n\n# 本地安装\n\n## NPM\n\n> 对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装\n\n## Gem\n\n1. 首先通过(rubygems)[https://rubygems.org/] 下载对应的包\n2. 通过本地安装\n\n```bash\ngem install --local sass.gem\n```\n\n# 关于OS X的代理\n\nOS X上有很多其他的下载需要代理，那么我们可以使用`Proxychains` 配合 `shadowsocks` 实现每个命令都可以使用代理\n\n1. 安装工具\n\n```bash\nbrew install proxychains-ng\n```\n2. 设置 Proxychains 安装目录下的 `proxychains.conf` 文件\n\n```bash\nvim /etc/proxychains.conf\n```\n在`[ProxyList]`下加入\n```\nsocks5  127.0.0.1 1080\n```\n\n3. 使用 `proxychains4` 为命令代理\n\n```bash\nproxychains4 curl https://www.twitter.com/\nproxychains4 git push origin master\n```\n\n","slug":"the-front-command-line-tools-proxy-settings","published":1,"updated":"2017-04-17T07:25:53.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb4o001o7sv14nlkb6wv","content":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png\" alt=\"npm\"></p>\n<p>在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：</p>\n<ul>\n<li>使用国内镜像</li>\n<li>设置代理</li>\n<li>本地安装</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"国内镜像\"><a href=\"#国内镜像\" class=\"headerlink\" title=\"国内镜像\"></a>国内镜像</h1><p>使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>使用淘宝镜像 <code>https://registry.npm.taobao.org</code></p>\n</blockquote>\n<p>安装时启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>设置全局镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry &lt; registry url &gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">使用CNPM</a></p>\n</blockquote>\n<p>cnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。</p>\n<h2 id=\"Gem\"><a href=\"#Gem\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><blockquote>\n<p>使用<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"external\">Ruby-China</a></p>\n</blockquote>\n<p>设置镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div></pre></td></tr></table></figure>\n<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><p>设置代理需要有代理服务，保证可以访问到对应的地址</p>\n<h2 id=\"NPM-1\"><a href=\"#NPM-1\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://server:port</div><div class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://server:port</div></pre></td></tr></table></figure>\n<p>取消代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config delete proxy</div><div class=\"line\">npm config delete https-proxy</div></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config list</div></pre></td></tr></table></figure>\n<p>如果代理不支持https，修改npm存放package的网站地址为非https地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">\"http://registry.npmjs.org/\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global http.proxy http://server:port</div><div class=\"line\"></div><div class=\"line\">$ git config --global https.proxy http://server:port</div></pre></td></tr></table></figure>\n<p>删除代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global --unset http.proxy</div><div class=\"line\">git config --global --unset https.proxy</div></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global --get http.proxy</div><div class=\"line\">git config --global --get https.proxy</div></pre></td></tr></table></figure>\n<h2 id=\"Gem-1\"><a href=\"#Gem-1\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><p>设置代理</p>\n<blockquote>\n<p>安装时加上 –http-proxy 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install --http-proxy http://proxy:port sass</div></pre></td></tr></table></figure>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>设置代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 修改 .bowerrc 文件(如无则新增):</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;proxy&quot;: &quot;http://proxy:port&quot;,</div><div class=\"line\">    &quot;https-proxy&quot;: &quot;http://proxy:port&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"apm\"><a href=\"#apm\" class=\"headerlink\" title=\"apm\"></a>apm</h2><p>apm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置</p>\n<p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apm config <span class=\"built_in\">set</span> https-proxy https://server:port</div></pre></td></tr></table></figure>\n<p>查看设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apm config list</div></pre></td></tr></table></figure>\n<h2 id=\"设置命令行代理\"><a href=\"#设置命令行代理\" class=\"headerlink\" title=\"设置命令行代理\"></a>设置命令行代理</h2><blockquote>\n<p>可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理</p>\n</blockquote>\n<ul>\n<li><strong>windows</strong></li>\n</ul>\n<p>这种设置只对本命令行窗口启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://proxy:port</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用户名密码则输入</span></div><div class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=&lt; username &gt;</div><div class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=&lt; password &gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>OS X</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo networksetup -setwebproxy <span class=\"string\">\"Ethernet\"</span> http://proxy port</div></pre></td></tr></table></figure>\n<h1 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h1><h2 id=\"NPM-2\"><a href=\"#NPM-2\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装</p>\n</blockquote>\n<h2 id=\"Gem-2\"><a href=\"#Gem-2\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><ol>\n<li>首先通过(rubygems)[<a href=\"https://rubygems.org/\" target=\"_blank\" rel=\"external\">https://rubygems.org/</a>] 下载对应的包</li>\n<li>通过本地安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install --local sass.gem</div></pre></td></tr></table></figure>\n<h1 id=\"关于OS-X的代理\"><a href=\"#关于OS-X的代理\" class=\"headerlink\" title=\"关于OS X的代理\"></a>关于OS X的代理</h1><p>OS X上有很多其他的下载需要代理，那么我们可以使用<code>Proxychains</code> 配合 <code>shadowsocks</code> 实现每个命令都可以使用代理</p>\n<ol>\n<li>安装工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install proxychains-ng</div></pre></td></tr></table></figure>\n<ol>\n<li>设置 Proxychains 安装目录下的 <code>proxychains.conf</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/proxychains.conf</div></pre></td></tr></table></figure>\n<p>在<code>[ProxyList]</code>下加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5  127.0.0.1 1080</div></pre></td></tr></table></figure></p>\n<ol>\n<li>使用 <code>proxychains4</code> 为命令代理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxychains4 curl https://www.twitter.com/</div><div class=\"line\">proxychains4 git push origin master</div></pre></td></tr></table></figure>\n","excerpt":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png\" alt=\"npm\"></p>\n<p>在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：</p>\n<ul>\n<li>使用国内镜像</li>\n<li>设置代理</li>\n<li>本地安装</li>\n</ul>","more":"<h1 id=\"国内镜像\"><a href=\"#国内镜像\" class=\"headerlink\" title=\"国内镜像\"></a>国内镜像</h1><p>使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>使用淘宝镜像 <code>https://registry.npm.taobao.org</code></p>\n</blockquote>\n<p>安装时启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>设置全局镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry &lt; registry url &gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://npm.taobao.org/\">使用CNPM</a></p>\n</blockquote>\n<p>cnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。</p>\n<h2 id=\"Gem\"><a href=\"#Gem\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><blockquote>\n<p>使用<a href=\"http://gems.ruby-china.org/\">Ruby-China</a></p>\n</blockquote>\n<p>设置镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div></pre></td></tr></table></figure>\n<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><p>设置代理需要有代理服务，保证可以访问到对应的地址</p>\n<h2 id=\"NPM-1\"><a href=\"#NPM-1\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://server:port</div><div class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://server:port</div></pre></td></tr></table></figure>\n<p>取消代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config delete proxy</div><div class=\"line\">npm config delete https-proxy</div></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config list</div></pre></td></tr></table></figure>\n<p>如果代理不支持https，修改npm存放package的网站地址为非https地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">\"http://registry.npmjs.org/\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global http.proxy http://server:port</div><div class=\"line\"></div><div class=\"line\">$ git config --global https.proxy http://server:port</div></pre></td></tr></table></figure>\n<p>删除代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global --unset http.proxy</div><div class=\"line\">git config --global --unset https.proxy</div></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global --get http.proxy</div><div class=\"line\">git config --global --get https.proxy</div></pre></td></tr></table></figure>\n<h2 id=\"Gem-1\"><a href=\"#Gem-1\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><p>设置代理</p>\n<blockquote>\n<p>安装时加上 –http-proxy 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install --http-proxy http://proxy:port sass</div></pre></td></tr></table></figure>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>设置代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 修改 .bowerrc 文件(如无则新增):</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;proxy&quot;: &quot;http://proxy:port&quot;,</div><div class=\"line\">    &quot;https-proxy&quot;: &quot;http://proxy:port&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"apm\"><a href=\"#apm\" class=\"headerlink\" title=\"apm\"></a>apm</h2><p>apm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置</p>\n<p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apm config <span class=\"built_in\">set</span> https-proxy https://server:port</div></pre></td></tr></table></figure>\n<p>查看设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apm config list</div></pre></td></tr></table></figure>\n<h2 id=\"设置命令行代理\"><a href=\"#设置命令行代理\" class=\"headerlink\" title=\"设置命令行代理\"></a>设置命令行代理</h2><blockquote>\n<p>可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理</p>\n</blockquote>\n<ul>\n<li><strong>windows</strong></li>\n</ul>\n<p>这种设置只对本命令行窗口启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://proxy:port</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用户名密码则输入</span></div><div class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=&lt; username &gt;</div><div class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=&lt; password &gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>OS X</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo networksetup -setwebproxy <span class=\"string\">\"Ethernet\"</span> http://proxy port</div></pre></td></tr></table></figure>\n<h1 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h1><h2 id=\"NPM-2\"><a href=\"#NPM-2\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装</p>\n</blockquote>\n<h2 id=\"Gem-2\"><a href=\"#Gem-2\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><ol>\n<li>首先通过(rubygems)[<a href=\"https://rubygems.org/\">https://rubygems.org/</a>] 下载对应的包</li>\n<li>通过本地安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install --local sass.gem</div></pre></td></tr></table></figure>\n<h1 id=\"关于OS-X的代理\"><a href=\"#关于OS-X的代理\" class=\"headerlink\" title=\"关于OS X的代理\"></a>关于OS X的代理</h1><p>OS X上有很多其他的下载需要代理，那么我们可以使用<code>Proxychains</code> 配合 <code>shadowsocks</code> 实现每个命令都可以使用代理</p>\n<ol>\n<li>安装工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install proxychains-ng</div></pre></td></tr></table></figure>\n<ol>\n<li>设置 Proxychains 安装目录下的 <code>proxychains.conf</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/proxychains.conf</div></pre></td></tr></table></figure>\n<p>在<code>[ProxyList]</code>下加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5  127.0.0.1 1080</div></pre></td></tr></table></figure></p>\n<ol>\n<li>使用 <code>proxychains4</code> 为命令代理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxychains4 curl https://www.twitter.com/</div><div class=\"line\">proxychains4 git push origin master</div></pre></td></tr></table></figure>"},{"title":"基于Material样式的Angle模板开发介绍","date":"2016-11-21T08:48:52.000Z","_content":"\n[Angle](https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123)是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面\n\n![Angle](http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png)\n\n以下是使用Material版本的Angle的开发介绍\n\n<!--more-->\n\n# 环境\n\n正常开发需要从`seed`项目开始，本次使用的是`material-seed`进行开发。\n\n## 文件夹介绍\n\n```\n+-- app/  // 项目的打包输出目录\n|   +-- css/\n|   +-- documentation/  // 介绍文档\n|   +-- img/\n|   +-- js/\n|   +-- i18n/\n|   +-- pages/\n|   +-- vendor/\n|   +-- views/\n+-- master/   // 项目的开发目录\n|   +-- jade/ \n|   |   +-- pages/\n|   |   +-- views/\n|   +-- js/\n|   |   +-- modules/\n|   |   |   +-- controllers/\n|   |   |   +-- directives/\n|   |   |   +-- services/\n|   |   +-- custom/\n|   +-- sass/\n|   |   +-- app/\n|   |   +-- bootstrap/\n|   |   +-- themes/\n|   +-- gulpfile.js\n|   +-- package.json\n|   +-- bower.json\n+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中\n|   +-- *.json\n+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中\n+-- index.html   // 入口文件\n```\n\n## 开发环境\n\n首先需要基本的环境\n\n[![npm](https://img.shields.io/npm/v/npm.svg?style=flat-square)]() [![Bower](https://img.shields.io/bower/v/bootstrap.svg?style=flat-square)]()\n\n进入开发目录`master`,安装项目所需依赖npm包,使用命令行\n\n```cmd\nnpm install\n```\n\n使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如`angular-material`可以改为最新版本\n\n```\nbower install\n```\n\n## 打包发布项目\n\n如果使用less编写的样式，那么可以在`master`目录下直接运行命令\n\n```\ngulp\n```\n\n如果使用sass编写样式，需要在后面加入参数\n```\ngulp --usesass\n```\n\n这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。\n\n**Note:**\n\n> 在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成\n\n\n# 开发\n\n## 路由\n\n项目使用`ui-router`插件配置路由，修改添加路由的需要在`master/js/modules/routes/routes.config.js`文件中配置\n\n### 添加新的state\n\n在已存在的state下追加即可，格式如下\n\n```js\n.state('app.someroute', {\n    url: '/some_url',\n    templateUrl: 'path_to_template.html',\n    controller: 'someController',\n    resolve: angular.extend(\n    helper.resolveFor(), {\n    // YOUR RESOLVES GO HERE\n    }\n    )\n})\n```\n其中`resolve`是用于加载页面所需要的第三方vendor，配置文件参见\n\n## Module 与 Controller\n\n每个页面模块的js文件是存放于同一个文件夹中的，可以参考，`master/js/modules/material/`。\n\n因此创建一个新的模块可以在`custom`或者`modules`文件夹中添加自己的文件夹，然后添加`moduleName.config.js`和`moduleName.controller.js`文件\n格式可参考`master/js/modules/material/`文件夹中的文件\n\n以下是一个简单的module例子\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName', [\n            'ngMaterial'\n        ]);\n})();\n```\n\n以下是controller的简单例子\n\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName')\n        .controller('moduleNameController', moduleNameController);\n\n    moduleNameController.$inject = [];\n    function moduleNameController() {\n       \n    }\n})();\n\n```\n\n之后，将该module添加到`/master/js/app.module.js`文件中\n\n## 表现页面Jade *(pug)*\n\n该项目页面使用[jade](http://naltatis.github.io/jade-syntax-docs/)预编译语言编写，位于`/master/jade/`文件夹中。\n\n在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。\n\n如果已经开启了gulp watch，那么此时，在`/app/views/`就可以看到对应的html文件\n\n## 样式 Sass或Less\n\nsass和less的开发目录位于`/master/sass/`或`/master/less/`目录下。\n\n在其中的`app`目录下创建自己项目的文件夹,在其中添加``**ss``文件。\n\n然后在`master/sass/app.scss` *(或less)* 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。\n\n## Hello World！\n\n如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。\n\n这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。\n\n![Hello world](http://o93mwnwp7.bkt.clouddn.com/github/angle-view.png)\n\n\n# 部署\n\n发布项目，正常项目发布仅仅需要以下文件\n\n```\n|\n|--app\n|--vendor\n|--index.html\n```\n\n如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布\n\n\n# Tips\n\n## 将链接加入左侧栏\n\n修改`/server/sidebar-menu.json`文件即可\n\n以下是创建一个一级目录的简单例子\n\n```json\n{\n    \"text\": \"Welcome\",\n    \"sref\": \"app.welcome\",\n    \"icon\": \"icon-tag\"\n}\n```\n\n## 修改加载动画\n\n需要修改加载动画的样式，查阅`/master/js/modules/preloader/preloader.directive.js`文件，并且修改其中指定的css样式以及文件即可。\n\n如果需要临时屏蔽加载动画，注释掉index.jade文件中的\n```jade\n div(data-preloader)\n ```\n\n ## 使用LazyLoad为页面加载第三方依赖\n\n以下以实现一个加载动画效果为例。\n\n可能用到的插件有 *（可以按照自己的需求删减添加）*\n\n* `whirl` \n* `spinkit`\n* `loaders.css`\n\n**首先，在`master`文件夹中使用bower安装以上包**\n\n```\nbower install whirl spinkit loaders.css\n```\n\n安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到`vendor`目录中。\n修改`/master/vendor.json`文件，在其后面添加\n\n```json\n  \"bower_components/loaders.css/loaders.css\",\n  \"bower_components/spinkit/css/spinkit.css\",\n  \"bower_components/whirl/dist/whirl.css\"\n```\n这样，gulp就会将对应的文件添加到vendor目录中\n\n**在lazyload/lazyload.constants.js**中配置第三方包\n\n在scripts中添加以下代码\n```js\n//spinner用到的库\n'loaders.css':          ['vendor/loaders.css/loaders.css'],\n'spinkit':              ['vendor/spinkit/css/spinkit.css'],\n'whirl':                ['vendor/whirl/dist/whirl.css']\n```\n或者\n```js\n'spinner':          ['vendor/loaders.css/loaders.css',\n                     'vendor/spinkit/css/spinkit.css',\n                     'vendor/whirl/dist/whirl.css']\n```\n\n**在路由配置中为页面添加对应的引用**\n\n在`/master/js/modules/routes/routes.config.js` 文件中为对应的路由添加引用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('loaders.css'，'spinkit','whirl')\n})\n```\n\n如果是第二种写法，则使用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('spinner')\n})\n```\n\n这时，在对应的页面加载的时候，可以看到资源已经被加载进来\n\n![spinner](http://o93mwnwp7.bkt.clouddn.com/github/angleReslove.png)\n\n**使用插件为我们提供的功能**\n\n在jade文件中，添加测试效果，即可看到对应的加载动画\n```jade\n.row\n  .col-md-4\n    .panel.panel-default\n      .panel-heading\n        h5 Folding Cube\n      .panel-body.loader-demo.loader-demo-sk\n        .sk-folding-cube\n          .sk-cube1.sk-cube\n          .sk-cube2.sk-cube\n          .sk-cube4.sk-cube\n          .sk-cube3.sk-cube\n```\n![spinner](http://o93mwnwp7.bkt.clouddn.com/github/angle-spinner.gif)\n\n更多效果可以参阅\n [whirl](http://jh3y.github.io/whirl/) \n [spinkit](http://tobiasahlin.com/spinkit/) \n [loaders.css](https://connoratherton.com/loaders)\n\n或者官方Demo中的`/app/spinners`页面\n\n\n\n\n","source":"_posts/the-material-style-of-angle-template-development-is-introduced.md","raw":"---\ntitle: 基于Material样式的Angle模板开发介绍\ndate: 2016-11-21 16:48:52\ntags: [angular,javascript,material]\n---\n\n[Angle](https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123)是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面\n\n![Angle](http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png)\n\n以下是使用Material版本的Angle的开发介绍\n\n<!--more-->\n\n# 环境\n\n正常开发需要从`seed`项目开始，本次使用的是`material-seed`进行开发。\n\n## 文件夹介绍\n\n```\n+-- app/  // 项目的打包输出目录\n|   +-- css/\n|   +-- documentation/  // 介绍文档\n|   +-- img/\n|   +-- js/\n|   +-- i18n/\n|   +-- pages/\n|   +-- vendor/\n|   +-- views/\n+-- master/   // 项目的开发目录\n|   +-- jade/ \n|   |   +-- pages/\n|   |   +-- views/\n|   +-- js/\n|   |   +-- modules/\n|   |   |   +-- controllers/\n|   |   |   +-- directives/\n|   |   |   +-- services/\n|   |   +-- custom/\n|   +-- sass/\n|   |   +-- app/\n|   |   +-- bootstrap/\n|   |   +-- themes/\n|   +-- gulpfile.js\n|   +-- package.json\n|   +-- bower.json\n+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中\n|   +-- *.json\n+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中\n+-- index.html   // 入口文件\n```\n\n## 开发环境\n\n首先需要基本的环境\n\n[![npm](https://img.shields.io/npm/v/npm.svg?style=flat-square)]() [![Bower](https://img.shields.io/bower/v/bootstrap.svg?style=flat-square)]()\n\n进入开发目录`master`,安装项目所需依赖npm包,使用命令行\n\n```cmd\nnpm install\n```\n\n使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如`angular-material`可以改为最新版本\n\n```\nbower install\n```\n\n## 打包发布项目\n\n如果使用less编写的样式，那么可以在`master`目录下直接运行命令\n\n```\ngulp\n```\n\n如果使用sass编写样式，需要在后面加入参数\n```\ngulp --usesass\n```\n\n这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。\n\n**Note:**\n\n> 在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成\n\n\n# 开发\n\n## 路由\n\n项目使用`ui-router`插件配置路由，修改添加路由的需要在`master/js/modules/routes/routes.config.js`文件中配置\n\n### 添加新的state\n\n在已存在的state下追加即可，格式如下\n\n```js\n.state('app.someroute', {\n    url: '/some_url',\n    templateUrl: 'path_to_template.html',\n    controller: 'someController',\n    resolve: angular.extend(\n    helper.resolveFor(), {\n    // YOUR RESOLVES GO HERE\n    }\n    )\n})\n```\n其中`resolve`是用于加载页面所需要的第三方vendor，配置文件参见\n\n## Module 与 Controller\n\n每个页面模块的js文件是存放于同一个文件夹中的，可以参考，`master/js/modules/material/`。\n\n因此创建一个新的模块可以在`custom`或者`modules`文件夹中添加自己的文件夹，然后添加`moduleName.config.js`和`moduleName.controller.js`文件\n格式可参考`master/js/modules/material/`文件夹中的文件\n\n以下是一个简单的module例子\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName', [\n            'ngMaterial'\n        ]);\n})();\n```\n\n以下是controller的简单例子\n\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName')\n        .controller('moduleNameController', moduleNameController);\n\n    moduleNameController.$inject = [];\n    function moduleNameController() {\n       \n    }\n})();\n\n```\n\n之后，将该module添加到`/master/js/app.module.js`文件中\n\n## 表现页面Jade *(pug)*\n\n该项目页面使用[jade](http://naltatis.github.io/jade-syntax-docs/)预编译语言编写，位于`/master/jade/`文件夹中。\n\n在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。\n\n如果已经开启了gulp watch，那么此时，在`/app/views/`就可以看到对应的html文件\n\n## 样式 Sass或Less\n\nsass和less的开发目录位于`/master/sass/`或`/master/less/`目录下。\n\n在其中的`app`目录下创建自己项目的文件夹,在其中添加``**ss``文件。\n\n然后在`master/sass/app.scss` *(或less)* 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。\n\n## Hello World！\n\n如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。\n\n这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。\n\n![Hello world](http://o93mwnwp7.bkt.clouddn.com/github/angle-view.png)\n\n\n# 部署\n\n发布项目，正常项目发布仅仅需要以下文件\n\n```\n|\n|--app\n|--vendor\n|--index.html\n```\n\n如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布\n\n\n# Tips\n\n## 将链接加入左侧栏\n\n修改`/server/sidebar-menu.json`文件即可\n\n以下是创建一个一级目录的简单例子\n\n```json\n{\n    \"text\": \"Welcome\",\n    \"sref\": \"app.welcome\",\n    \"icon\": \"icon-tag\"\n}\n```\n\n## 修改加载动画\n\n需要修改加载动画的样式，查阅`/master/js/modules/preloader/preloader.directive.js`文件，并且修改其中指定的css样式以及文件即可。\n\n如果需要临时屏蔽加载动画，注释掉index.jade文件中的\n```jade\n div(data-preloader)\n ```\n\n ## 使用LazyLoad为页面加载第三方依赖\n\n以下以实现一个加载动画效果为例。\n\n可能用到的插件有 *（可以按照自己的需求删减添加）*\n\n* `whirl` \n* `spinkit`\n* `loaders.css`\n\n**首先，在`master`文件夹中使用bower安装以上包**\n\n```\nbower install whirl spinkit loaders.css\n```\n\n安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到`vendor`目录中。\n修改`/master/vendor.json`文件，在其后面添加\n\n```json\n  \"bower_components/loaders.css/loaders.css\",\n  \"bower_components/spinkit/css/spinkit.css\",\n  \"bower_components/whirl/dist/whirl.css\"\n```\n这样，gulp就会将对应的文件添加到vendor目录中\n\n**在lazyload/lazyload.constants.js**中配置第三方包\n\n在scripts中添加以下代码\n```js\n//spinner用到的库\n'loaders.css':          ['vendor/loaders.css/loaders.css'],\n'spinkit':              ['vendor/spinkit/css/spinkit.css'],\n'whirl':                ['vendor/whirl/dist/whirl.css']\n```\n或者\n```js\n'spinner':          ['vendor/loaders.css/loaders.css',\n                     'vendor/spinkit/css/spinkit.css',\n                     'vendor/whirl/dist/whirl.css']\n```\n\n**在路由配置中为页面添加对应的引用**\n\n在`/master/js/modules/routes/routes.config.js` 文件中为对应的路由添加引用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('loaders.css'，'spinkit','whirl')\n})\n```\n\n如果是第二种写法，则使用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('spinner')\n})\n```\n\n这时，在对应的页面加载的时候，可以看到资源已经被加载进来\n\n![spinner](http://o93mwnwp7.bkt.clouddn.com/github/angleReslove.png)\n\n**使用插件为我们提供的功能**\n\n在jade文件中，添加测试效果，即可看到对应的加载动画\n```jade\n.row\n  .col-md-4\n    .panel.panel-default\n      .panel-heading\n        h5 Folding Cube\n      .panel-body.loader-demo.loader-demo-sk\n        .sk-folding-cube\n          .sk-cube1.sk-cube\n          .sk-cube2.sk-cube\n          .sk-cube4.sk-cube\n          .sk-cube3.sk-cube\n```\n![spinner](http://o93mwnwp7.bkt.clouddn.com/github/angle-spinner.gif)\n\n更多效果可以参阅\n [whirl](http://jh3y.github.io/whirl/) \n [spinkit](http://tobiasahlin.com/spinkit/) \n [loaders.css](https://connoratherton.com/loaders)\n\n或者官方Demo中的`/app/spinners`页面\n\n\n\n\n","slug":"the-material-style-of-angle-template-development-is-introduced","published":1,"updated":"2016-11-22T02:35:58.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb4o001q7sv1rs33c5g6","content":"<p><a href=\"https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123\" target=\"_blank\" rel=\"external\">Angle</a>是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png\" alt=\"Angle\"></p>\n<p>以下是使用Material版本的Angle的开发介绍</p>\n<a id=\"more\"></a>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>正常开发需要从<code>seed</code>项目开始，本次使用的是<code>material-seed</code>进行开发。</p>\n<h2 id=\"文件夹介绍\"><a href=\"#文件夹介绍\" class=\"headerlink\" title=\"文件夹介绍\"></a>文件夹介绍</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">+-- app/  // 项目的打包输出目录</div><div class=\"line\">|   +-- css/</div><div class=\"line\">|   +-- documentation/  // 介绍文档</div><div class=\"line\">|   +-- img/</div><div class=\"line\">|   +-- js/</div><div class=\"line\">|   +-- i18n/</div><div class=\"line\">|   +-- pages/</div><div class=\"line\">|   +-- vendor/</div><div class=\"line\">|   +-- views/</div><div class=\"line\">+-- master/   // 项目的开发目录</div><div class=\"line\">|   +-- jade/ </div><div class=\"line\">|   |   +-- pages/</div><div class=\"line\">|   |   +-- views/</div><div class=\"line\">|   +-- js/</div><div class=\"line\">|   |   +-- modules/</div><div class=\"line\">|   |   |   +-- controllers/</div><div class=\"line\">|   |   |   +-- directives/</div><div class=\"line\">|   |   |   +-- services/</div><div class=\"line\">|   |   +-- custom/</div><div class=\"line\">|   +-- sass/</div><div class=\"line\">|   |   +-- app/</div><div class=\"line\">|   |   +-- bootstrap/</div><div class=\"line\">|   |   +-- themes/</div><div class=\"line\">|   +-- gulpfile.js</div><div class=\"line\">|   +-- package.json</div><div class=\"line\">|   +-- bower.json</div><div class=\"line\">+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中</div><div class=\"line\">|   +-- *.json</div><div class=\"line\">+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中</div><div class=\"line\">+-- index.html   // 入口文件</div></pre></td></tr></table></figure>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>首先需要基本的环境</p>\n<p><a href=\"\"><img src=\"https://img.shields.io/npm/v/npm.svg?style=flat-square\" alt=\"npm\"></a> <a href=\"\"><img src=\"https://img.shields.io/bower/v/bootstrap.svg?style=flat-square\" alt=\"Bower\"></a></p>\n<p>进入开发目录<code>master</code>,安装项目所需依赖npm包,使用命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如<code>angular-material</code>可以改为最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install</div></pre></td></tr></table></figure>\n<h2 id=\"打包发布项目\"><a href=\"#打包发布项目\" class=\"headerlink\" title=\"打包发布项目\"></a>打包发布项目</h2><p>如果使用less编写的样式，那么可以在<code>master</code>目录下直接运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp</div></pre></td></tr></table></figure>\n<p>如果使用sass编写样式，需要在后面加入参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp --usesass</div></pre></td></tr></table></figure></p>\n<p>这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成</p>\n</blockquote>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>项目使用<code>ui-router</code>插件配置路由，修改添加路由的需要在<code>master/js/modules/routes/routes.config.js</code>文件中配置</p>\n<h3 id=\"添加新的state\"><a href=\"#添加新的state\" class=\"headerlink\" title=\"添加新的state\"></a>添加新的state</h3><p>在已存在的state下追加即可，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.someroute'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/some_url'</span>,</div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'path_to_template.html'</span>,</div><div class=\"line\">    <span class=\"attr\">controller</span>: <span class=\"string\">'someController'</span>,</div><div class=\"line\">    <span class=\"attr\">resolve</span>: angular.extend(</div><div class=\"line\">    helper.resolveFor(), &#123;</div><div class=\"line\">    <span class=\"comment\">// YOUR RESOLVES GO HERE</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    )</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>其中<code>resolve</code>是用于加载页面所需要的第三方vendor，配置文件参见</p>\n<h2 id=\"Module-与-Controller\"><a href=\"#Module-与-Controller\" class=\"headerlink\" title=\"Module 与 Controller\"></a>Module 与 Controller</h2><p>每个页面模块的js文件是存放于同一个文件夹中的，可以参考，<code>master/js/modules/material/</code>。</p>\n<p>因此创建一个新的模块可以在<code>custom</code>或者<code>modules</code>文件夹中添加自己的文件夹，然后添加<code>moduleName.config.js</code>和<code>moduleName.controller.js</code>文件<br>格式可参考<code>master/js/modules/material/</code>文件夹中的文件</p>\n<p>以下是一个简单的module例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>, [</div><div class=\"line\">            <span class=\"string\">'ngMaterial'</span></div><div class=\"line\">        ]);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>以下是controller的简单例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>)</div><div class=\"line\">        .controller(<span class=\"string\">'moduleNameController'</span>, moduleNameController);</div><div class=\"line\"></div><div class=\"line\">    moduleNameController.$inject = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleNameController</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>之后，将该module添加到<code>/master/js/app.module.js</code>文件中</p>\n<h2 id=\"表现页面Jade-pug\"><a href=\"#表现页面Jade-pug\" class=\"headerlink\" title=\"表现页面Jade (pug)\"></a>表现页面Jade <em>(pug)</em></h2><p>该项目页面使用<a href=\"http://naltatis.github.io/jade-syntax-docs/\" target=\"_blank\" rel=\"external\">jade</a>预编译语言编写，位于<code>/master/jade/</code>文件夹中。</p>\n<p>在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。</p>\n<p>如果已经开启了gulp watch，那么此时，在<code>/app/views/</code>就可以看到对应的html文件</p>\n<h2 id=\"样式-Sass或Less\"><a href=\"#样式-Sass或Less\" class=\"headerlink\" title=\"样式 Sass或Less\"></a>样式 Sass或Less</h2><p>sass和less的开发目录位于<code>/master/sass/</code>或<code>/master/less/</code>目录下。</p>\n<p>在其中的<code>app</code>目录下创建自己项目的文件夹,在其中添加<code>**ss</code>文件。</p>\n<p>然后在<code>master/sass/app.scss</code> <em>(或less)</em> 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。</p>\n<h2 id=\"Hello-World！\"><a href=\"#Hello-World！\" class=\"headerlink\" title=\"Hello World！\"></a>Hello World！</h2><p>如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。</p>\n<p>这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-view.png\" alt=\"Hello world\"></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>发布项目，正常项目发布仅仅需要以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">|</div><div class=\"line\">|--app</div><div class=\"line\">|--vendor</div><div class=\"line\">|--index.html</div></pre></td></tr></table></figure>\n<p>如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><h2 id=\"将链接加入左侧栏\"><a href=\"#将链接加入左侧栏\" class=\"headerlink\" title=\"将链接加入左侧栏\"></a>将链接加入左侧栏</h2><p>修改<code>/server/sidebar-menu.json</code>文件即可</p>\n<p>以下是创建一个一级目录的简单例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"Welcome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sref\"</span>: <span class=\"string\">\"app.welcome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"icon-tag\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"修改加载动画\"><a href=\"#修改加载动画\" class=\"headerlink\" title=\"修改加载动画\"></a>修改加载动画</h2><p>需要修改加载动画的样式，查阅<code>/master/js/modules/preloader/preloader.directive.js</code>文件，并且修改其中指定的css样式以及文件即可。</p>\n<p>如果需要临时屏蔽加载动画，注释掉index.jade文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">div(data-preloader)</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用LazyLoad为页面加载第三方依赖\"><a href=\"#使用LazyLoad为页面加载第三方依赖\" class=\"headerlink\" title=\"使用LazyLoad为页面加载第三方依赖\"></a>使用LazyLoad为页面加载第三方依赖</h2><p>以下以实现一个加载动画效果为例。</p>\n<p>可能用到的插件有 <em>（可以按照自己的需求删减添加）</em></p>\n<ul>\n<li><code>whirl</code> </li>\n<li><code>spinkit</code></li>\n<li><code>loaders.css</code></li>\n</ul>\n<p><strong>首先，在<code>master</code>文件夹中使用bower安装以上包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install whirl spinkit loaders.css</div></pre></td></tr></table></figure>\n<p>安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到<code>vendor</code>目录中。<br>修改<code>/master/vendor.json</code>文件，在其后面添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"bower_components/loaders.css/loaders.css\",</div><div class=\"line\">\"bower_components/spinkit/css/spinkit.css\",</div><div class=\"line\">\"bower_components/whirl/dist/whirl.css\"</div></pre></td></tr></table></figure>\n<p>这样，gulp就会将对应的文件添加到vendor目录中</p>\n<p><strong>在lazyload/lazyload.constants.js</strong>中配置第三方包</p>\n<p>在scripts中添加以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//spinner用到的库</span></div><div class=\"line\"><span class=\"string\">'loaders.css'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>],</div><div class=\"line\"><span class=\"string\">'spinkit'</span>:              [<span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>],</div><div class=\"line\"><span class=\"string\">'whirl'</span>:                [<span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'spinner'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>,</div><div class=\"line\">                     <span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>,</div><div class=\"line\">                     <span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>在路由配置中为页面添加对应的引用</strong></p>\n<p>在<code>/master/js/modules/routes/routes.config.js</code> 文件中为对应的路由添加引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: helper.resolveFor(<span class=\"string\">'loaders.css'</span>，<span class=\"string\">'spinkit'</span>,<span class=\"string\">'whirl'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是第二种写法，则使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: helper.resolveFor(<span class=\"string\">'spinner'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这时，在对应的页面加载的时候，可以看到资源已经被加载进来</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angleReslove.png\" alt=\"spinner\"></p>\n<p><strong>使用插件为我们提供的功能</strong></p>\n<p>在jade文件中，添加测试效果，即可看到对应的加载动画<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row</div><div class=\"line\">  .col-md-4</div><div class=\"line\">    .panel.panel-default</div><div class=\"line\">      .panel-heading</div><div class=\"line\">        h5 Folding Cube</div><div class=\"line\">      .panel-body.loader-demo.loader-demo-sk</div><div class=\"line\">        .sk-folding-cube</div><div class=\"line\">          .sk-cube1.sk-cube</div><div class=\"line\">          .sk-cube2.sk-cube</div><div class=\"line\">          .sk-cube4.sk-cube</div><div class=\"line\">          .sk-cube3.sk-cube</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-spinner.gif\" alt=\"spinner\"></p>\n<p>更多效果可以参阅<br> <a href=\"http://jh3y.github.io/whirl/\" target=\"_blank\" rel=\"external\">whirl</a><br> <a href=\"http://tobiasahlin.com/spinkit/\" target=\"_blank\" rel=\"external\">spinkit</a><br> <a href=\"https://connoratherton.com/loaders\" target=\"_blank\" rel=\"external\">loaders.css</a></p>\n<p>或者官方Demo中的<code>/app/spinners</code>页面</p>\n","excerpt":"<p><a href=\"https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123\">Angle</a>是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-dash.png\" alt=\"Angle\"></p>\n<p>以下是使用Material版本的Angle的开发介绍</p>","more":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>正常开发需要从<code>seed</code>项目开始，本次使用的是<code>material-seed</code>进行开发。</p>\n<h2 id=\"文件夹介绍\"><a href=\"#文件夹介绍\" class=\"headerlink\" title=\"文件夹介绍\"></a>文件夹介绍</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">+-- app/  // 项目的打包输出目录</div><div class=\"line\">|   +-- css/</div><div class=\"line\">|   +-- documentation/  // 介绍文档</div><div class=\"line\">|   +-- img/</div><div class=\"line\">|   +-- js/</div><div class=\"line\">|   +-- i18n/</div><div class=\"line\">|   +-- pages/</div><div class=\"line\">|   +-- vendor/</div><div class=\"line\">|   +-- views/</div><div class=\"line\">+-- master/   // 项目的开发目录</div><div class=\"line\">|   +-- jade/ </div><div class=\"line\">|   |   +-- pages/</div><div class=\"line\">|   |   +-- views/</div><div class=\"line\">|   +-- js/</div><div class=\"line\">|   |   +-- modules/</div><div class=\"line\">|   |   |   +-- controllers/</div><div class=\"line\">|   |   |   +-- directives/</div><div class=\"line\">|   |   |   +-- services/</div><div class=\"line\">|   |   +-- custom/</div><div class=\"line\">|   +-- sass/</div><div class=\"line\">|   |   +-- app/</div><div class=\"line\">|   |   +-- bootstrap/</div><div class=\"line\">|   |   +-- themes/</div><div class=\"line\">|   +-- gulpfile.js</div><div class=\"line\">|   +-- package.json</div><div class=\"line\">|   +-- bower.json</div><div class=\"line\">+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中</div><div class=\"line\">|   +-- *.json</div><div class=\"line\">+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中</div><div class=\"line\">+-- index.html   // 入口文件</div></pre></td></tr></table></figure>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>首先需要基本的环境</p>\n<p><a href=\"\"><img src=\"https://img.shields.io/npm/v/npm.svg?style=flat-square\" alt=\"npm\"></a> <a href=\"\"><img src=\"https://img.shields.io/bower/v/bootstrap.svg?style=flat-square\" alt=\"Bower\"></a></p>\n<p>进入开发目录<code>master</code>,安装项目所需依赖npm包,使用命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如<code>angular-material</code>可以改为最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install</div></pre></td></tr></table></figure>\n<h2 id=\"打包发布项目\"><a href=\"#打包发布项目\" class=\"headerlink\" title=\"打包发布项目\"></a>打包发布项目</h2><p>如果使用less编写的样式，那么可以在<code>master</code>目录下直接运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp</div></pre></td></tr></table></figure>\n<p>如果使用sass编写样式，需要在后面加入参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp --usesass</div></pre></td></tr></table></figure></p>\n<p>这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成</p>\n</blockquote>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>项目使用<code>ui-router</code>插件配置路由，修改添加路由的需要在<code>master/js/modules/routes/routes.config.js</code>文件中配置</p>\n<h3 id=\"添加新的state\"><a href=\"#添加新的state\" class=\"headerlink\" title=\"添加新的state\"></a>添加新的state</h3><p>在已存在的state下追加即可，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.someroute'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/some_url'</span>,</div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'path_to_template.html'</span>,</div><div class=\"line\">    <span class=\"attr\">controller</span>: <span class=\"string\">'someController'</span>,</div><div class=\"line\">    <span class=\"attr\">resolve</span>: angular.extend(</div><div class=\"line\">    helper.resolveFor(), &#123;</div><div class=\"line\">    <span class=\"comment\">// YOUR RESOLVES GO HERE</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    )</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>其中<code>resolve</code>是用于加载页面所需要的第三方vendor，配置文件参见</p>\n<h2 id=\"Module-与-Controller\"><a href=\"#Module-与-Controller\" class=\"headerlink\" title=\"Module 与 Controller\"></a>Module 与 Controller</h2><p>每个页面模块的js文件是存放于同一个文件夹中的，可以参考，<code>master/js/modules/material/</code>。</p>\n<p>因此创建一个新的模块可以在<code>custom</code>或者<code>modules</code>文件夹中添加自己的文件夹，然后添加<code>moduleName.config.js</code>和<code>moduleName.controller.js</code>文件<br>格式可参考<code>master/js/modules/material/</code>文件夹中的文件</p>\n<p>以下是一个简单的module例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>, [</div><div class=\"line\">            <span class=\"string\">'ngMaterial'</span></div><div class=\"line\">        ]);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>以下是controller的简单例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>)</div><div class=\"line\">        .controller(<span class=\"string\">'moduleNameController'</span>, moduleNameController);</div><div class=\"line\"></div><div class=\"line\">    moduleNameController.$inject = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleNameController</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>之后，将该module添加到<code>/master/js/app.module.js</code>文件中</p>\n<h2 id=\"表现页面Jade-pug\"><a href=\"#表现页面Jade-pug\" class=\"headerlink\" title=\"表现页面Jade (pug)\"></a>表现页面Jade <em>(pug)</em></h2><p>该项目页面使用<a href=\"http://naltatis.github.io/jade-syntax-docs/\">jade</a>预编译语言编写，位于<code>/master/jade/</code>文件夹中。</p>\n<p>在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。</p>\n<p>如果已经开启了gulp watch，那么此时，在<code>/app/views/</code>就可以看到对应的html文件</p>\n<h2 id=\"样式-Sass或Less\"><a href=\"#样式-Sass或Less\" class=\"headerlink\" title=\"样式 Sass或Less\"></a>样式 Sass或Less</h2><p>sass和less的开发目录位于<code>/master/sass/</code>或<code>/master/less/</code>目录下。</p>\n<p>在其中的<code>app</code>目录下创建自己项目的文件夹,在其中添加<code>**ss</code>文件。</p>\n<p>然后在<code>master/sass/app.scss</code> <em>(或less)</em> 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。</p>\n<h2 id=\"Hello-World！\"><a href=\"#Hello-World！\" class=\"headerlink\" title=\"Hello World！\"></a>Hello World！</h2><p>如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。</p>\n<p>这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-view.png\" alt=\"Hello world\"></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>发布项目，正常项目发布仅仅需要以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">|</div><div class=\"line\">|--app</div><div class=\"line\">|--vendor</div><div class=\"line\">|--index.html</div></pre></td></tr></table></figure>\n<p>如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><h2 id=\"将链接加入左侧栏\"><a href=\"#将链接加入左侧栏\" class=\"headerlink\" title=\"将链接加入左侧栏\"></a>将链接加入左侧栏</h2><p>修改<code>/server/sidebar-menu.json</code>文件即可</p>\n<p>以下是创建一个一级目录的简单例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"Welcome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sref\"</span>: <span class=\"string\">\"app.welcome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"icon-tag\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"修改加载动画\"><a href=\"#修改加载动画\" class=\"headerlink\" title=\"修改加载动画\"></a>修改加载动画</h2><p>需要修改加载动画的样式，查阅<code>/master/js/modules/preloader/preloader.directive.js</code>文件，并且修改其中指定的css样式以及文件即可。</p>\n<p>如果需要临时屏蔽加载动画，注释掉index.jade文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">div(data-preloader)</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用LazyLoad为页面加载第三方依赖\"><a href=\"#使用LazyLoad为页面加载第三方依赖\" class=\"headerlink\" title=\"使用LazyLoad为页面加载第三方依赖\"></a>使用LazyLoad为页面加载第三方依赖</h2><p>以下以实现一个加载动画效果为例。</p>\n<p>可能用到的插件有 <em>（可以按照自己的需求删减添加）</em></p>\n<ul>\n<li><code>whirl</code> </li>\n<li><code>spinkit</code></li>\n<li><code>loaders.css</code></li>\n</ul>\n<p><strong>首先，在<code>master</code>文件夹中使用bower安装以上包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install whirl spinkit loaders.css</div></pre></td></tr></table></figure>\n<p>安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到<code>vendor</code>目录中。<br>修改<code>/master/vendor.json</code>文件，在其后面添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"bower_components/loaders.css/loaders.css\",</div><div class=\"line\">\"bower_components/spinkit/css/spinkit.css\",</div><div class=\"line\">\"bower_components/whirl/dist/whirl.css\"</div></pre></td></tr></table></figure>\n<p>这样，gulp就会将对应的文件添加到vendor目录中</p>\n<p><strong>在lazyload/lazyload.constants.js</strong>中配置第三方包</p>\n<p>在scripts中添加以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//spinner用到的库</span></div><div class=\"line\"><span class=\"string\">'loaders.css'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>],</div><div class=\"line\"><span class=\"string\">'spinkit'</span>:              [<span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>],</div><div class=\"line\"><span class=\"string\">'whirl'</span>:                [<span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'spinner'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>,</div><div class=\"line\">                     <span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>,</div><div class=\"line\">                     <span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>在路由配置中为页面添加对应的引用</strong></p>\n<p>在<code>/master/js/modules/routes/routes.config.js</code> 文件中为对应的路由添加引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: helper.resolveFor(<span class=\"string\">'loaders.css'</span>，<span class=\"string\">'spinkit'</span>,<span class=\"string\">'whirl'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是第二种写法，则使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: helper.resolveFor(<span class=\"string\">'spinner'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这时，在对应的页面加载的时候，可以看到资源已经被加载进来</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angleReslove.png\" alt=\"spinner\"></p>\n<p><strong>使用插件为我们提供的功能</strong></p>\n<p>在jade文件中，添加测试效果，即可看到对应的加载动画<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row</div><div class=\"line\">  .col-md-4</div><div class=\"line\">    .panel.panel-default</div><div class=\"line\">      .panel-heading</div><div class=\"line\">        h5 Folding Cube</div><div class=\"line\">      .panel-body.loader-demo.loader-demo-sk</div><div class=\"line\">        .sk-folding-cube</div><div class=\"line\">          .sk-cube1.sk-cube</div><div class=\"line\">          .sk-cube2.sk-cube</div><div class=\"line\">          .sk-cube4.sk-cube</div><div class=\"line\">          .sk-cube3.sk-cube</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/angle-spinner.gif\" alt=\"spinner\"></p>\n<p>更多效果可以参阅<br> <a href=\"http://jh3y.github.io/whirl/\">whirl</a><br> <a href=\"http://tobiasahlin.com/spinkit/\">spinkit</a><br> <a href=\"https://connoratherton.com/loaders\">loaders.css</a></p>\n<p>或者官方Demo中的<code>/app/spinners</code>页面</p>"},{"title":"解决无法获取ngRepeat生成元素样式的问题","date":"2016-12-01T07:44:08.000Z","_content":"\n![ng](http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png)\n\n在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用\n`css()`、`getComputedStyle`、`offsetHeight`或者`clientHeight`都会获取到0，我们无法获取到元素的实际高度。\n\n这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。\n\n在Angular中，我们可以使用以下几种方法进行处理\n\n<!--more-->\n\n## 使用$watch方法来进行脏值检查\n\n当元素信息发生改变之后，将最新的数据赋值给变量即可\n\n例如：\n\n**Directive**\n\n```js\nmyApp.directive('heightBind', function() {\n  return {\n    scope: {\n      heightValue: '='\n    },\n    link: function($scope, $element) {\n      $scope.$watch(function() {\n        $scope.heightValue = $element.height();\n      });\n    }\n  }\n})\n```\n\n**HTML**\n```html\n< div height-bind height-value=\"containerHeight\"></div>\n```\n\n## 当然，也可以使用`$apply`来完成同样的事情\n\n```js\n setTimeout(function(){\n  $scope.containerHeight = $('#container').height()\n  $scope.$apply();\n}, 0);\n```\n\n## 使用自带的脏值检查方法\n\n我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可\n\n```js\n$timeout(function () {\n    // 获取元素信息\n});\n```\n\n> 参考资料 http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero","source":"_posts/the-problem-of-unable-to-get-ng-repeat-generating-element-styles.md","raw":"---\ntitle: 解决无法获取ngRepeat生成元素样式的问题\ndate: 2016-12-01 15:44:08\ntags: [angular,javascript]\n---\n\n![ng](http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png)\n\n在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用\n`css()`、`getComputedStyle`、`offsetHeight`或者`clientHeight`都会获取到0，我们无法获取到元素的实际高度。\n\n这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。\n\n在Angular中，我们可以使用以下几种方法进行处理\n\n<!--more-->\n\n## 使用$watch方法来进行脏值检查\n\n当元素信息发生改变之后，将最新的数据赋值给变量即可\n\n例如：\n\n**Directive**\n\n```js\nmyApp.directive('heightBind', function() {\n  return {\n    scope: {\n      heightValue: '='\n    },\n    link: function($scope, $element) {\n      $scope.$watch(function() {\n        $scope.heightValue = $element.height();\n      });\n    }\n  }\n})\n```\n\n**HTML**\n```html\n< div height-bind height-value=\"containerHeight\"></div>\n```\n\n## 当然，也可以使用`$apply`来完成同样的事情\n\n```js\n setTimeout(function(){\n  $scope.containerHeight = $('#container').height()\n  $scope.$apply();\n}, 0);\n```\n\n## 使用自带的脏值检查方法\n\n我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可\n\n```js\n$timeout(function () {\n    // 获取元素信息\n});\n```\n\n> 参考资料 http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero","slug":"the-problem-of-unable-to-get-ng-repeat-generating-element-styles","published":1,"updated":"2016-12-07T06:02:47.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb4o001t7sv1aehf4z71","content":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png\" alt=\"ng\"></p>\n<p>在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用<br><code>css()</code>、<code>getComputedStyle</code>、<code>offsetHeight</code>或者<code>clientHeight</code>都会获取到0，我们无法获取到元素的实际高度。</p>\n<p>这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。</p>\n<p>在Angular中，我们可以使用以下几种方法进行处理</p>\n<a id=\"more\"></a>\n<h2 id=\"使用-watch方法来进行脏值检查\"><a href=\"#使用-watch方法来进行脏值检查\" class=\"headerlink\" title=\"使用$watch方法来进行脏值检查\"></a>使用$watch方法来进行脏值检查</h2><p>当元素信息发生改变之后，将最新的数据赋值给变量即可</p>\n<p>例如：</p>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'heightBind'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">scope</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">heightValue</span>: <span class=\"string\">'='</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>) </span>&#123;</div><div class=\"line\">      $scope.$watch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $scope.heightValue = $element.height();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>HTML</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">div</span> <span class=\"attr\">height-bind</span> <span class=\"attr\">height-value</span>=<span class=\"string\">\"containerHeight\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"当然，也可以使用-apply来完成同样的事情\"><a href=\"#当然，也可以使用-apply来完成同样的事情\" class=\"headerlink\" title=\"当然，也可以使用$apply来完成同样的事情\"></a>当然，也可以使用<code>$apply</code>来完成同样的事情</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.containerHeight = $(<span class=\"string\">'#container'</span>).height()</div><div class=\"line\">  $scope.$apply();</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"使用自带的脏值检查方法\"><a href=\"#使用自带的脏值检查方法\" class=\"headerlink\" title=\"使用自带的脏值检查方法\"></a>使用自带的脏值检查方法</h2><p>我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$timeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取元素信息</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料 <a href=\"http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero</a></p>\n</blockquote>\n","excerpt":"<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/ngrepeatAngularJS-header-image.png\" alt=\"ng\"></p>\n<p>在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用<br><code>css()</code>、<code>getComputedStyle</code>、<code>offsetHeight</code>或者<code>clientHeight</code>都会获取到0，我们无法获取到元素的实际高度。</p>\n<p>这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。</p>\n<p>在Angular中，我们可以使用以下几种方法进行处理</p>","more":"<h2 id=\"使用-watch方法来进行脏值检查\"><a href=\"#使用-watch方法来进行脏值检查\" class=\"headerlink\" title=\"使用$watch方法来进行脏值检查\"></a>使用$watch方法来进行脏值检查</h2><p>当元素信息发生改变之后，将最新的数据赋值给变量即可</p>\n<p>例如：</p>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'heightBind'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">scope</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">heightValue</span>: <span class=\"string\">'='</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>) </span>&#123;</div><div class=\"line\">      $scope.$watch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $scope.heightValue = $element.height();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>HTML</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">div</span> <span class=\"attr\">height-bind</span> <span class=\"attr\">height-value</span>=<span class=\"string\">\"containerHeight\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"当然，也可以使用-apply来完成同样的事情\"><a href=\"#当然，也可以使用-apply来完成同样的事情\" class=\"headerlink\" title=\"当然，也可以使用$apply来完成同样的事情\"></a>当然，也可以使用<code>$apply</code>来完成同样的事情</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.containerHeight = $(<span class=\"string\">'#container'</span>).height()</div><div class=\"line\">  $scope.$apply();</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"使用自带的脏值检查方法\"><a href=\"#使用自带的脏值检查方法\" class=\"headerlink\" title=\"使用自带的脏值检查方法\"></a>使用自带的脏值检查方法</h2><p>我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$timeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取元素信息</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料 <a href=\"http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero\">http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero</a></p>\n</blockquote>"},{"title":"解决流式布局元素高度不统一导致布局不整齐问题","date":"2016-12-01T09:47:19.000Z","_content":"\n在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。\n\n![float](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png)\n\n<!--more-->\n\n这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面\n\n![float-succ](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long2.png)\n\n所以一种常见的解决方案是\n\n## 瀑布流\n\n![waterfull](http://o93mwnwp7.bkt.clouddn.com/github/probwaterfull.png)\n\n瀑布流的实现方法，网上已经有大量教程，详情参阅\n\n [脚本之家—实现瀑布流](http://www.jb51.net/article/34141.htm)\n\n [前端开发—瀑布流的实现方法](http://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/)\n\n ## 将同一列设置为统一高度\n\n 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。\n\n ![float3](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long3.png)\n\n 要实现该效果，只需如下几步\n\n 1. 获取所有元素\n 2. 获取相同offsetTop值的元素，即同一行的元素\n 3. 比较同一行元素的高度，取最大的height值，赋给每一个元素即可\n\n如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章\n\n> [解决无法获取ngRepeat生成元素样式的问题](https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/)","source":"_posts/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy.md","raw":"---\ntitle: 解决流式布局元素高度不统一导致布局不整齐问题\ndate: 2016-12-01 17:47:19\ntags: [javascript]\n---\n\n在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。\n\n![float](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png)\n\n<!--more-->\n\n这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面\n\n![float-succ](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long2.png)\n\n所以一种常见的解决方案是\n\n## 瀑布流\n\n![waterfull](http://o93mwnwp7.bkt.clouddn.com/github/probwaterfull.png)\n\n瀑布流的实现方法，网上已经有大量教程，详情参阅\n\n [脚本之家—实现瀑布流](http://www.jb51.net/article/34141.htm)\n\n [前端开发—瀑布流的实现方法](http://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/)\n\n ## 将同一列设置为统一高度\n\n 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。\n\n ![float3](http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long3.png)\n\n 要实现该效果，只需如下几步\n\n 1. 获取所有元素\n 2. 获取相同offsetTop值的元素，即同一行的元素\n 3. 比较同一行元素的高度，取最大的height值，赋给每一个元素即可\n\n如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章\n\n> [解决无法获取ngRepeat生成元素样式的问题](https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/)","slug":"to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy","published":1,"updated":"2016-12-01T10:13:42.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb54001v7sv15faxophh","content":"<p>在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png\" alt=\"float\"></p>\n<a id=\"more\"></a>\n<p>这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long2.png\" alt=\"float-succ\"></p>\n<p>所以一种常见的解决方案是</p>\n<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probwaterfull.png\" alt=\"waterfull\"></p>\n<p>瀑布流的实现方法，网上已经有大量教程，详情参阅</p>\n<p> <a href=\"http://www.jb51.net/article/34141.htm\" target=\"_blank\" rel=\"external\">脚本之家—实现瀑布流</a></p>\n<p> <a href=\"http://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/\" target=\"_blank\" rel=\"external\">前端开发—瀑布流的实现方法</a></p>\n<h2 id=\"将同一列设置为统一高度\"><a href=\"#将同一列设置为统一高度\" class=\"headerlink\" title=\"将同一列设置为统一高度\"></a>将同一列设置为统一高度</h2><p> 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。</p>\n<p> <img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long3.png\" alt=\"float3\"></p>\n<p> 要实现该效果，只需如下几步</p>\n<ol>\n<li>获取所有元素</li>\n<li>获取相同offsetTop值的元素，即同一行的元素</li>\n<li>比较同一行元素的高度，取最大的height值，赋给每一个元素即可</li>\n</ol>\n<p>如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章</p>\n<blockquote>\n<p><a href=\"https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"external\">解决无法获取ngRepeat生成元素样式的问题</a></p>\n</blockquote>\n","excerpt":"<p>在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long.png\" alt=\"float\"></p>","more":"<p>这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面</p>\n<p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long2.png\" alt=\"float-succ\"></p>\n<p>所以一种常见的解决方案是</p>\n<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p><img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probwaterfull.png\" alt=\"waterfull\"></p>\n<p>瀑布流的实现方法，网上已经有大量教程，详情参阅</p>\n<p> <a href=\"http://www.jb51.net/article/34141.htm\">脚本之家—实现瀑布流</a></p>\n<p> <a href=\"http://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/\">前端开发—瀑布流的实现方法</a></p>\n<h2 id=\"将同一列设置为统一高度\"><a href=\"#将同一列设置为统一高度\" class=\"headerlink\" title=\"将同一列设置为统一高度\"></a>将同一列设置为统一高度</h2><p> 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。</p>\n<p> <img src=\"http://o93mwnwp7.bkt.clouddn.com/github/probfloat-long3.png\" alt=\"float3\"></p>\n<p> 要实现该效果，只需如下几步</p>\n<ol>\n<li>获取所有元素</li>\n<li>获取相同offsetTop值的元素，即同一行的元素</li>\n<li>比较同一行元素的高度，取最大的height值，赋给每一个元素即可</li>\n</ol>\n<p>如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章</p>\n<blockquote>\n<p><a href=\"https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/\">解决无法获取ngRepeat生成元素样式的问题</a></p>\n</blockquote>"},{"title":"UBuntu中增加virtualBox中磁盘的容量","date":"2014-05-23T10:02:23.000Z","_content":"在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量\n\n`VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB  `\n\n<!--more-->\n\n进入到虚拟磁盘的目录，输入以上代码即可。\n修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。\n\n`YOUR_HARD_DISK.vdi--你的虚拟磁盘名字`\n`SIZE_IN_MB--重新定义大小以M为单位  `  ","source":"_posts/u-buntu-increase-in-virtual-box-disk-capacity.md","raw":"---\ntitle: UBuntu中增加virtualBox中磁盘的容量\ndate: 2014-05-23 18:02:23\ntags: 操作系统\n---\n在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量\n\n`VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB  `\n\n<!--more-->\n\n进入到虚拟磁盘的目录，输入以上代码即可。\n修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。\n\n`YOUR_HARD_DISK.vdi--你的虚拟磁盘名字`\n`SIZE_IN_MB--重新定义大小以M为单位  `  ","slug":"u-buntu-increase-in-virtual-box-disk-capacity","published":1,"updated":"2016-07-05T14:33:54.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb54001y7sv1mf3rtt4g","content":"<p>在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量</p>\n<p><code>VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB</code></p>\n<a id=\"more\"></a>\n<p>进入到虚拟磁盘的目录，输入以上代码即可。<br>修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。</p>\n<p><code>YOUR_HARD_DISK.vdi--你的虚拟磁盘名字</code><br><code>SIZE_IN_MB--重新定义大小以M为单位</code>  </p>\n","excerpt":"<p>在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量</p>\n<p><code>VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB</code></p>","more":"<p>进入到虚拟磁盘的目录，输入以上代码即可。<br>修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。</p>\n<p><code>YOUR_HARD_DISK.vdi--你的虚拟磁盘名字</code><br><code>SIZE_IN_MB--重新定义大小以M为单位</code>  </p>"},{"title":"使用cmd解决端口被占用的情况","date":"2013-07-21T08:28:26.000Z","_content":"* 开始 -> 运行 -> cmd\n* 查找端口的PID： `netstat -a -o`\n* 强行关闭： ntsd -c q -p PID(查询出来的PID号码)\n或者进入任务管理器 -> 查看 -> 选择列 -> 将PID选中 -> 进程(找到查询到的PID) -> 结束进程\n\n<!--more-->\n\nCTRL+C可让运行中的cmd命令停止。\n \n这个命令可以加一些参数：  \n\n```\n-n 显示IP地址和端口的数目。  \n-S 显示每个协议的连接状态。  \n-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  \n-e 显示太网的连接状态。最好与-s合用。  \n-P PROTO 显示特定的协议连接状态。  \n```","source":"_posts/use-of-cmd-solve-port-being-used.md","raw":"---\ntitle: 使用cmd解决端口被占用的情况\ndate: 2013-07-21 16:28:26\ntags: [操作系统]\n---\n* 开始 -> 运行 -> cmd\n* 查找端口的PID： `netstat -a -o`\n* 强行关闭： ntsd -c q -p PID(查询出来的PID号码)\n或者进入任务管理器 -> 查看 -> 选择列 -> 将PID选中 -> 进程(找到查询到的PID) -> 结束进程\n\n<!--more-->\n\nCTRL+C可让运行中的cmd命令停止。\n \n这个命令可以加一些参数：  \n\n```\n-n 显示IP地址和端口的数目。  \n-S 显示每个协议的连接状态。  \n-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  \n-e 显示太网的连接状态。最好与-s合用。  \n-P PROTO 显示特定的协议连接状态。  \n```","slug":"use-of-cmd-solve-port-being-used","published":1,"updated":"2016-07-01T08:31:20.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb5400207sv1qply56vj","content":"<ul>\n<li>开始 -&gt; 运行 -&gt; cmd</li>\n<li>查找端口的PID： <code>netstat -a -o</code></li>\n<li>强行关闭： ntsd -c q -p PID(查询出来的PID号码)<br>或者进入任务管理器 -&gt; 查看 -&gt; 选择列 -&gt; 将PID选中 -&gt; 进程(找到查询到的PID) -&gt; 结束进程</li>\n</ul>\n<a id=\"more\"></a>\n<p>CTRL+C可让运行中的cmd命令停止。</p>\n<p>这个命令可以加一些参数：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-n 显示IP地址和端口的数目。  </div><div class=\"line\">-S 显示每个协议的连接状态。  </div><div class=\"line\">-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  </div><div class=\"line\">-e 显示太网的连接状态。最好与-s合用。  </div><div class=\"line\">-P PROTO 显示特定的协议连接状态。</div></pre></td></tr></table></figure>","excerpt":"<ul>\n<li>开始 -&gt; 运行 -&gt; cmd</li>\n<li>查找端口的PID： <code>netstat -a -o</code></li>\n<li>强行关闭： ntsd -c q -p PID(查询出来的PID号码)<br>或者进入任务管理器 -&gt; 查看 -&gt; 选择列 -&gt; 将PID选中 -&gt; 进程(找到查询到的PID) -&gt; 结束进程</li>\n</ul>","more":"<p>CTRL+C可让运行中的cmd命令停止。</p>\n<p>这个命令可以加一些参数：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-n 显示IP地址和端口的数目。  </div><div class=\"line\">-S 显示每个协议的连接状态。  </div><div class=\"line\">-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  </div><div class=\"line\">-e 显示太网的连接状态。最好与-s合用。  </div><div class=\"line\">-P PROTO 显示特定的协议连接状态。</div></pre></td></tr></table></figure>"},{"title":"使用-prefix-free解决CSS前缀的问题","date":"2014-07-08T12:14:50.000Z","_content":"在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。\n\n在开发中，可以使用**Can I use**等类型的编辑器插件来帮助开发者进行判断\n\n<!--more-->\n\n同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。\n\n原本的写代码方式\n```css\n-webkit-transform: rotate(45deg);\n\n-o-transform: rotate(45deg);\n\n-moz-transform: rotate(45deg);\n\n-ms-transform: rotate(45deg);\n```\n现在不需要考虑浏览器的前缀问题，直接可以使用\n```css\ntransform: rotate(45deg);\n```\n\n这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。\n\n[官方地址](http://leaverou.github.io/prefixfree/)","source":"_posts/use-prefix-free-solve-the-problem-of-css-prefix.md","raw":"---\ntitle: 使用-prefix-free解决CSS前缀的问题\ndate: 2014-07-08 20:14:50\ntags: javascript\n---\n在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。\n\n在开发中，可以使用**Can I use**等类型的编辑器插件来帮助开发者进行判断\n\n<!--more-->\n\n同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。\n\n原本的写代码方式\n```css\n-webkit-transform: rotate(45deg);\n\n-o-transform: rotate(45deg);\n\n-moz-transform: rotate(45deg);\n\n-ms-transform: rotate(45deg);\n```\n现在不需要考虑浏览器的前缀问题，直接可以使用\n```css\ntransform: rotate(45deg);\n```\n\n这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。\n\n[官方地址](http://leaverou.github.io/prefixfree/)","slug":"use-prefix-free-solve-the-problem-of-css-prefix","published":1,"updated":"2016-10-27T03:56:07.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb5400237sv1kyw08720","content":"<p>在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。</p>\n<p>在开发中，可以使用<strong>Can I use</strong>等类型的编辑器插件来帮助开发者进行判断</p>\n<a id=\"more\"></a>\n<p>同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。</p>\n<p>原本的写代码方式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-o-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-moz-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-ms-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div></pre></td></tr></table></figure></p>\n<p>现在不需要考虑浏览器的前缀问题，直接可以使用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div></pre></td></tr></table></figure></p>\n<p>这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。</p>\n<p><a href=\"http://leaverou.github.io/prefixfree/\" target=\"_blank\" rel=\"external\">官方地址</a></p>\n","excerpt":"<p>在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。</p>\n<p>在开发中，可以使用<strong>Can I use</strong>等类型的编辑器插件来帮助开发者进行判断</p>","more":"<p>同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。</p>\n<p>原本的写代码方式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-o-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-moz-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-ms-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div></pre></td></tr></table></figure></p>\n<p>现在不需要考虑浏览器的前缀问题，直接可以使用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</div></pre></td></tr></table></figure></p>\n<p>这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。</p>\n<p><a href=\"http://leaverou.github.io/prefixfree/\">官方地址</a></p>"},{"title":"使用lazyload优化网页图片的加载","date":"2014-07-03T03:48:07.000Z","_content":"\n在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如\n> * 网页加载速度变慢\n\n> * 消耗用户的大量流量\n\n因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。\n\n这时候，这款基于jQuery的小插件**lazyload**就派上了用场。\n\n<!--more-->\n\n基本设计思路是：\n\n* 拥有一个统一的图片占位符，加快加载的时间\n* 当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。\n\n这样就实现了延时加载的效果\n\n基本使用方法\n\n> * 首先将js文件引入\n\n> * 在需要使用的标签加载插件\n\n```html\n<script type=\"text/javascript\"> \n$(function() { \n$(\"img\").lazyload({ \neffect : \"fadeIn\" \n}); \n}); \n</script> \n```\n\n**API**\n\n```js\n\tplaceholder : \"img/grey.gif\", //用图片提前占位\n    // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏\n  effect: \"fadeIn\", // 载入使用何种效果\n    // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn\n  threshold: 200, // 提前开始加载\n    // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉\n  event: 'click',  // 事件触发时才加载\n    // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…\n  container: $(\"#container\"),  // 对某容器中的图片实现效果\n    // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片\n  failurelimit : 10 // 图片排序混乱时\n     // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.\n```","source":"_posts/use-the-lazyload-optimizing-web-images-load.md","raw":"---\ntitle: 使用lazyload优化网页图片的加载\ndate: 2014-07-03 11:48:07\ntags: [javascript,jquery,lazyload]\n---\n\n在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如\n> * 网页加载速度变慢\n\n> * 消耗用户的大量流量\n\n因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。\n\n这时候，这款基于jQuery的小插件**lazyload**就派上了用场。\n\n<!--more-->\n\n基本设计思路是：\n\n* 拥有一个统一的图片占位符，加快加载的时间\n* 当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。\n\n这样就实现了延时加载的效果\n\n基本使用方法\n\n> * 首先将js文件引入\n\n> * 在需要使用的标签加载插件\n\n```html\n<script type=\"text/javascript\"> \n$(function() { \n$(\"img\").lazyload({ \neffect : \"fadeIn\" \n}); \n}); \n</script> \n```\n\n**API**\n\n```js\n\tplaceholder : \"img/grey.gif\", //用图片提前占位\n    // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏\n  effect: \"fadeIn\", // 载入使用何种效果\n    // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn\n  threshold: 200, // 提前开始加载\n    // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉\n  event: 'click',  // 事件触发时才加载\n    // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…\n  container: $(\"#container\"),  // 对某容器中的图片实现效果\n    // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片\n  failurelimit : 10 // 图片排序混乱时\n     // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.\n```","slug":"use-the-lazyload-optimizing-web-images-load","published":1,"updated":"2016-10-27T03:55:52.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb5k00257sv19s9z85wt","content":"<p>在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如</p>\n<blockquote>\n<ul>\n<li><p>网页加载速度变慢</p>\n</li>\n<li><p>消耗用户的大量流量</p>\n</li>\n</ul>\n</blockquote>\n<p>因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。</p>\n<p>这时候，这款基于jQuery的小插件<strong>lazyload</strong>就派上了用场。</p>\n<a id=\"more\"></a>\n<p>基本设计思路是：</p>\n<ul>\n<li>拥有一个统一的图片占位符，加快加载的时间</li>\n<li>当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。</li>\n</ul>\n<p>这样就实现了延时加载的效果</p>\n<p>基本使用方法</p>\n<blockquote>\n<ul>\n<li><p>首先将js文件引入</p>\n</li>\n<li><p>在需要使用的标签加载插件</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"> </span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).lazyload(&#123; </div><div class=\"line\"><span class=\"attr\">effect</span> : <span class=\"string\">\"fadeIn\"</span> </div><div class=\"line\">&#125;); </div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">placeholder : <span class=\"string\">\"img/grey.gif\"</span>, <span class=\"comment\">//用图片提前占位</span></div><div class=\"line\">   <span class=\"comment\">// placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏</span></div><div class=\"line\"> effect: <span class=\"string\">\"fadeIn\"</span>, <span class=\"comment\">// 载入使用何种效果</span></div><div class=\"line\">   <span class=\"comment\">// effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn</span></div><div class=\"line\"> threshold: <span class=\"number\">200</span>, <span class=\"comment\">// 提前开始加载</span></div><div class=\"line\">   <span class=\"comment\">// threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉</span></div><div class=\"line\"> event: <span class=\"string\">'click'</span>,  <span class=\"comment\">// 事件触发时才加载</span></div><div class=\"line\">   <span class=\"comment\">// event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…</span></div><div class=\"line\"> container: $(<span class=\"string\">\"#container\"</span>),  <span class=\"comment\">// 对某容器中的图片实现效果</span></div><div class=\"line\">   <span class=\"comment\">// container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片</span></div><div class=\"line\"> failurelimit : <span class=\"number\">10</span> <span class=\"comment\">// 图片排序混乱时</span></div><div class=\"line\">    <span class=\"comment\">// failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</span></div></pre></td></tr></table></figure>","excerpt":"<p>在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如</p>\n<blockquote>\n<ul>\n<li><p>网页加载速度变慢</p>\n</li>\n<li><p>消耗用户的大量流量</p>\n</li>\n</ul>\n</blockquote>\n<p>因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。</p>\n<p>这时候，这款基于jQuery的小插件<strong>lazyload</strong>就派上了用场。</p>","more":"<p>基本设计思路是：</p>\n<ul>\n<li>拥有一个统一的图片占位符，加快加载的时间</li>\n<li>当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。</li>\n</ul>\n<p>这样就实现了延时加载的效果</p>\n<p>基本使用方法</p>\n<blockquote>\n<ul>\n<li><p>首先将js文件引入</p>\n</li>\n<li><p>在需要使用的标签加载插件</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"> </div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">$(<span class=\"string\">\"img\"</span>).lazyload(&#123; </div><div class=\"line\"><span class=\"attr\">effect</span> : <span class=\"string\">\"fadeIn\"</span> </div><div class=\"line\">&#125;); </div><div class=\"line\">&#125;); </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">placeholder : <span class=\"string\">\"img/grey.gif\"</span>, <span class=\"comment\">//用图片提前占位</span></div><div class=\"line\">   <span class=\"comment\">// placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏</span></div><div class=\"line\"> effect: <span class=\"string\">\"fadeIn\"</span>, <span class=\"comment\">// 载入使用何种效果</span></div><div class=\"line\">   <span class=\"comment\">// effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn</span></div><div class=\"line\"> threshold: <span class=\"number\">200</span>, <span class=\"comment\">// 提前开始加载</span></div><div class=\"line\">   <span class=\"comment\">// threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉</span></div><div class=\"line\"> event: <span class=\"string\">'click'</span>,  <span class=\"comment\">// 事件触发时才加载</span></div><div class=\"line\">   <span class=\"comment\">// event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…</span></div><div class=\"line\"> container: $(<span class=\"string\">\"#container\"</span>),  <span class=\"comment\">// 对某容器中的图片实现效果</span></div><div class=\"line\">   <span class=\"comment\">// container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片</span></div><div class=\"line\"> failurelimit : <span class=\"number\">10</span> <span class=\"comment\">// 图片排序混乱时</span></div><div class=\"line\">    <span class=\"comment\">// failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</span></div></pre></td></tr></table></figure>"},{"title":"使用字符串的split方法，对数组进行去重","date":"2016-07-04T14:48:13.000Z","_content":"在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。\n\n我在想这个问题的时候，参考了字符串的统计字符出现次数的思路\n\n`times = testString.split('char').length-1`\n\n<!-- more -->\n\n每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。\n\n```js\nfunction unique(arr) {\n  var newArr = [];\n  while (arr.length > 0) {\n    newArr.push(arr[0]);\n    arr = arr.join(\"\").split(newArr[newArr.length-1]).join(\"\").split(\"\");\n  }\n  return newArr;\n}\n```\n\n对生成的数组再次进行`.join(\"\").split(\"\")`操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。\n\n---\n\n同时还有其他的三种思路在下面作为参考\n\n1 . 第一种是比较常规的方法\n\n思路：\n\n* 构建一个新的数组存放结果\n* for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比\n* 若结果数组中没有该元素，则存到结果数组中\n\n```js\nArray.prototype.unique1 = function(){\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  var repeat = false;\n  for(var j = 0; j < res.length; j++){\n   if(this[i] == res[j]){\n    repeat = true;\n    break;\n   }\n  }\n  if(!repeat){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique1());\n```\n2 . 第二种方法比上面的方法效率要高\n思路：\n* 先将原数组进行排序\n* 检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置\n* 如果不相同，则将该元素存入结果数组中\n\n```js\nArray.prototype.unique2 = function(){\n this.sort(); //先排序\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  if(this[i] !== res[res.length - 1]){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique2());\n```\n> 第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。\n\n3 . **第三种方法（推荐使用）**\n思路：\n* 创建一个新的数组存放结果\n* 创建一个空对象\n* for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。\n说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。\n\n```js\nArray.prototype.unique3 = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\nalert(arr.unique3());\n```\n","source":"_posts/use-the-string-of-the-split-method-of-array-to-heavy.md","raw":"---\ntitle: 使用字符串的split方法，对数组进行去重\ndate: 2016-07-04 22:48:13\ntags: [javascript]\n---\n在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。\n\n我在想这个问题的时候，参考了字符串的统计字符出现次数的思路\n\n`times = testString.split('char').length-1`\n\n<!-- more -->\n\n每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。\n\n```js\nfunction unique(arr) {\n  var newArr = [];\n  while (arr.length > 0) {\n    newArr.push(arr[0]);\n    arr = arr.join(\"\").split(newArr[newArr.length-1]).join(\"\").split(\"\");\n  }\n  return newArr;\n}\n```\n\n对生成的数组再次进行`.join(\"\").split(\"\")`操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。\n\n---\n\n同时还有其他的三种思路在下面作为参考\n\n1 . 第一种是比较常规的方法\n\n思路：\n\n* 构建一个新的数组存放结果\n* for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比\n* 若结果数组中没有该元素，则存到结果数组中\n\n```js\nArray.prototype.unique1 = function(){\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  var repeat = false;\n  for(var j = 0; j < res.length; j++){\n   if(this[i] == res[j]){\n    repeat = true;\n    break;\n   }\n  }\n  if(!repeat){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique1());\n```\n2 . 第二种方法比上面的方法效率要高\n思路：\n* 先将原数组进行排序\n* 检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置\n* 如果不相同，则将该元素存入结果数组中\n\n```js\nArray.prototype.unique2 = function(){\n this.sort(); //先排序\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  if(this[i] !== res[res.length - 1]){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique2());\n```\n> 第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。\n\n3 . **第三种方法（推荐使用）**\n思路：\n* 创建一个新的数组存放结果\n* 创建一个空对象\n* for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。\n说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。\n\n```js\nArray.prototype.unique3 = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\nalert(arr.unique3());\n```\n","slug":"use-the-string-of-the-split-method-of-array-to-heavy","published":1,"updated":"2016-10-27T03:56:30.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb5k00277sv1qh7wd57f","content":"<p>在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。</p>\n<p>我在想这个问题的时候，参考了字符串的统计字符出现次数的思路</p>\n<p><code>times = testString.split(&#39;char&#39;).length-1</code></p>\n<a id=\"more\"></a>\n<p>每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\">  <span class=\"keyword\">while</span> (arr.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    newArr.push(arr[<span class=\"number\">0</span>]);</div><div class=\"line\">    arr = arr.join(<span class=\"string\">\"\"</span>).split(newArr[newArr.length<span class=\"number\">-1</span>]).join(<span class=\"string\">\"\"</span>).split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对生成的数组再次进行<code>.join(&quot;&quot;).split(&quot;&quot;)</code>操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。</p>\n<hr>\n<p>同时还有其他的三种思路在下面作为参考</p>\n<p>1 . 第一种是比较常规的方法</p>\n<p>思路：</p>\n<ul>\n<li>构建一个新的数组存放结果</li>\n<li>for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li>\n<li>若结果数组中没有该元素，则存到结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> repeat = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; res.length; j++)&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == res[j])&#123;</div><div class=\"line\">    repeat = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!repeat)&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div><div class=\"line\">alert(arr.unique1());</div></pre></td></tr></table></figure>\n<p>2 . 第二种方法比上面的方法效率要高<br>思路：</p>\n<ul>\n<li>先将原数组进行排序</li>\n<li>检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置</li>\n<li>如果不相同，则将该元素存入结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">this</span>.sort(); <span class=\"comment\">//先排序</span></div><div class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] !== res[res.length - <span class=\"number\">1</span>])&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div><div class=\"line\">alert(arr.unique2());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>\n</blockquote>\n<p>3 . <strong>第三种方法（推荐使用）</strong><br>思路：</p>\n<ul>\n<li>创建一个新的数组存放结果</li>\n<li>创建一个空对象</li>\n<li>for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。<br>说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">var</span> res = [];</div><div class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</div><div class=\"line\">alert(arr.unique3());</div></pre></td></tr></table></figure>\n","excerpt":"<p>在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。</p>\n<p>我在想这个问题的时候，参考了字符串的统计字符出现次数的思路</p>\n<p><code>times = testString.split(&#39;char&#39;).length-1</code></p>","more":"<p>每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\">  <span class=\"keyword\">while</span> (arr.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    newArr.push(arr[<span class=\"number\">0</span>]);</div><div class=\"line\">    arr = arr.join(<span class=\"string\">\"\"</span>).split(newArr[newArr.length<span class=\"number\">-1</span>]).join(<span class=\"string\">\"\"</span>).split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对生成的数组再次进行<code>.join(&quot;&quot;).split(&quot;&quot;)</code>操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。</p>\n<hr>\n<p>同时还有其他的三种思路在下面作为参考</p>\n<p>1 . 第一种是比较常规的方法</p>\n<p>思路：</p>\n<ul>\n<li>构建一个新的数组存放结果</li>\n<li>for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li>\n<li>若结果数组中没有该元素，则存到结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> repeat = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; res.length; j++)&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == res[j])&#123;</div><div class=\"line\">    repeat = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!repeat)&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div><div class=\"line\">alert(arr.unique1());</div></pre></td></tr></table></figure>\n<p>2 . 第二种方法比上面的方法效率要高<br>思路：</p>\n<ul>\n<li>先将原数组进行排序</li>\n<li>检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置</li>\n<li>如果不相同，则将该元素存入结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">this</span>.sort(); <span class=\"comment\">//先排序</span></div><div class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] !== res[res.length - <span class=\"number\">1</span>])&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</div><div class=\"line\">alert(arr.unique2());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>\n</blockquote>\n<p>3 . <strong>第三种方法（推荐使用）</strong><br>思路：</p>\n<ul>\n<li>创建一个新的数组存放结果</li>\n<li>创建一个空对象</li>\n<li>for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。<br>说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">var</span> res = [];</div><div class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</div><div class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</div><div class=\"line\">alert(arr.unique3());</div></pre></td></tr></table></figure>"},{"title":"使用jQuery的promise模式解决延迟数据处理问题","date":"2016-10-26T02:34:59.000Z","_content":"\n在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后\n再将处理后的数据进行返回\n\n{% plantuml %}\n    title 请求过程\n\n    == 调用方法 ==\n\n    fn1 -> fn2: 调用方法\n\n    == 数据请求 ==\n\n    fn2 -> 服务器: 请求数据\n\n    ... 异步请求 ...\n    服务器 --> fn2: 数据返回\n\n    fn2 -> fn2: 数据处理\n\n    == 返回数据 ==\n\n    fn2 -> fn1: 返回处理数据\n\n{% endplantuml %}\n\n<!--more-->\n如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，\n就返回了一个值null，这样自然不是我们想要的结果\n\n因此可以使用promise模式解决这个问题\n\n**获取数据并处理的方法**\n```js\n    function fun2(){\n        var deferred = $.Deferred();\n        $.get(\"url\", function (data) {\n            // 处理1\n        }).done(function (data) {\n             deferred.resolve(data);\n        })\n        return deferred.promise();\n    }\n\n```\n\n**调用的方法**\n\n```js\n    function fn1(){\n        $.when(fn2())\n        .done(function (data) {\n           //获取到处理后的data值\n        })\n    }\n```\n\n> 参考文档\n> \n> http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\n\n> http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\n\n","source":"_posts/using-j-querys-promise-to-solve-delay-data-processing-model.md","raw":"---\ntitle: 使用jQuery的promise模式解决延迟数据处理问题\ndate: 2016-10-26 10:34:59\ntags: [jQuery,promise]\n---\n\n在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后\n再将处理后的数据进行返回\n\n{% plantuml %}\n    title 请求过程\n\n    == 调用方法 ==\n\n    fn1 -> fn2: 调用方法\n\n    == 数据请求 ==\n\n    fn2 -> 服务器: 请求数据\n\n    ... 异步请求 ...\n    服务器 --> fn2: 数据返回\n\n    fn2 -> fn2: 数据处理\n\n    == 返回数据 ==\n\n    fn2 -> fn1: 返回处理数据\n\n{% endplantuml %}\n\n<!--more-->\n如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，\n就返回了一个值null，这样自然不是我们想要的结果\n\n因此可以使用promise模式解决这个问题\n\n**获取数据并处理的方法**\n```js\n    function fun2(){\n        var deferred = $.Deferred();\n        $.get(\"url\", function (data) {\n            // 处理1\n        }).done(function (data) {\n             deferred.resolve(data);\n        })\n        return deferred.promise();\n    }\n\n```\n\n**调用的方法**\n\n```js\n    function fn1(){\n        $.when(fn2())\n        .done(function (data) {\n           //获取到处理后的data值\n        })\n    }\n```\n\n> 参考文档\n> \n> http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\n\n> http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\n\n","slug":"using-j-querys-promise-to-solve-delay-data-processing-model","published":1,"updated":"2017-03-21T02:58:01.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1n5nb6l003h7sv1nvz443hr","content":"<p>在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后<br>再将处理后的数据进行返回</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJI_sjpzVqSt5PMkhy693y_CfAvvDs_biyrG5MrikhhGyGmLTEuMqF2Ch54cmwcTJDpphNGSn1AhQ2AJwsPpUfrqBdyvSOGMr0QAGYqjFJq_XwPwcPskNGZK11RZWgXLqOJP13Tu_vUdiUN1JaMIUBcbvFg4DucAm8eWmiXk03hU2Ia9KGzq00000\">\n<a id=\"more\"></a>\n<p>如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，<br>就返回了一个值null，这样自然不是我们想要的结果</p>\n<p>因此可以使用promise模式解决这个问题</p>\n<p><strong>获取数据并处理的方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> deferred = $.Deferred();</div><div class=\"line\">    $.get(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 处理1</span></div><div class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">         deferred.resolve(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>调用的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $.when(fn2())</div><div class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取到处理后的data值</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文档</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></p>\n<p><a href=\"http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/lvdabao/p/jquery-deferred.html</a></p>\n</blockquote>\n","excerpt":"<p>在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后<br>再将处理后的数据进行返回</p>\n<img  src=http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJI_sjpzVqSt5PMkhy693y_CfAvvDs_biyrG5MrikhhGyGmLTEuMqF2Ch54cmwcTJDpphNGSn1AhQ2AJwsPpUfrqBdyvSOGMr0QAGYqjFJq_XwPwcPskNGZK11RZWgXLqOJP13Tu_vUdiUN1JaMIUBcbvFg4DucAm8eWmiXk03hU2Ia9KGzq00000>","more":"<p>如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，<br>就返回了一个值null，这样自然不是我们想要的结果</p>\n<p>因此可以使用promise模式解决这个问题</p>\n<p><strong>获取数据并处理的方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> deferred = $.Deferred();</div><div class=\"line\">    $.get(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 处理1</span></div><div class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">         deferred.resolve(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>调用的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $.when(fn2())</div><div class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取到处理后的data值</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文档</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></p>\n<p><a href=\"http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\">http://www.cnblogs.com/lvdabao/p/jquery-deferred.html</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj1n5nb1y00007sv1zkte0xsx","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb2f00077sv1tm4lvui3"},{"post_id":"cj1n5nb2400017sv1p06g6jxa","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb2v000b7sv17hfiqa9g"},{"post_id":"cj1n5nb2e00037sv1ecr5uh45","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb2v000f7sv1wzjwlnhq"},{"post_id":"cj1n5nb2f00047sv1jww8zji9","tag_id":"cj1n5nb2v000e7sv1hgbruiix","_id":"cj1n5nb2v000k7sv1upxl9965"},{"post_id":"cj1n5nb2f00057sv1swaohzue","tag_id":"cj1n5nb2v000i7sv14zckupqj","_id":"cj1n5nb3b000o7sv1kdqsghby"},{"post_id":"cj1n5nb2f00087sv1jgp9rzxn","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb3b000s7sv10g0x1u9y"},{"post_id":"cj1n5nb2f00087sv1jgp9rzxn","tag_id":"cj1n5nb2v000m7sv1tm8bvmon","_id":"cj1n5nb3b000u7sv1qcc05p0r"},{"post_id":"cj1n5nb3b000p7sv11h3idiki","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb3b000x7sv137wz719l"},{"post_id":"cj1n5nb2f00097sv1jbc35yxq","tag_id":"cj1n5nb2v000m7sv1tm8bvmon","_id":"cj1n5nb3b000z7sv1q6ganqnl"},{"post_id":"cj1n5nb2f00097sv1jbc35yxq","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb3s00127sv14fzsy5gi"},{"post_id":"cj1n5nb2v000c7sv1ktyaqoec","tag_id":"cj1n5nb3b000v7sv1xa1tvn0w","_id":"cj1n5nb3t00147sv1m619wh60"},{"post_id":"cj1n5nb3s00137sv1y0tsnuq8","tag_id":"cj1n5nb2v000e7sv1hgbruiix","_id":"cj1n5nb3t00177sv12yajhexs"},{"post_id":"cj1n5nb2v000d7sv1g07jp2y1","tag_id":"cj1n5nb3r00117sv1tkst7v2p","_id":"cj1n5nb3t00197sv17gbmioo1"},{"post_id":"cj1n5nb3t00157sv1935hyek4","tag_id":"cj1n5nb2v000e7sv1hgbruiix","_id":"cj1n5nb3t001c7sv16ixc8167"},{"post_id":"cj1n5nb2v000g7sv15za1ebas","tag_id":"cj1n5nb3t00167sv1ws782dqs","_id":"cj1n5nb3t001e7sv1zzx0yigk"},{"post_id":"cj1n5nb2v000h7sv1nc1uwq2l","tag_id":"cj1n5nb3t001b7sv1pmmfy0aa","_id":"cj1n5nb49001i7sv1ti07ytqk"},{"post_id":"cj1n5nb2v000h7sv1nc1uwq2l","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb49001k7sv164bo5xt8"},{"post_id":"cj1n5nb3t001f7sv1ezujgofp","tag_id":"cj1n5nb3t001b7sv1pmmfy0aa","_id":"cj1n5nb4o001n7sv1n70g8b5h"},{"post_id":"cj1n5nb3t001f7sv1ezujgofp","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb4o001p7sv19kmxccuw"},{"post_id":"cj1n5nb2v000j7sv1iu5pb5oo","tag_id":"cj1n5nb49001g7sv1g54o0p7f","_id":"cj1n5nb4o001s7sv1i7u78vlr"},{"post_id":"cj1n5nb2v000l7sv1tkza2rfg","tag_id":"cj1n5nb4o001m7sv1nldpy9l7","_id":"cj1n5nb54001u7sv17cc8cb17"},{"post_id":"cj1n5nb4o001t7sv1aehf4z71","tag_id":"cj1n5nb2v000m7sv1tm8bvmon","_id":"cj1n5nb54001x7sv1ipa9inwb"},{"post_id":"cj1n5nb4o001t7sv1aehf4z71","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb54001z7sv1fxcqufeu"},{"post_id":"cj1n5nb3b000n7sv1fyxudwt1","tag_id":"cj1n5nb4o001r7sv1hiqfxnvx","_id":"cj1n5nb5400217sv1oa9nukfs"},{"post_id":"cj1n5nb3b000n7sv1fyxudwt1","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5k00247sv1s05224cb"},{"post_id":"cj1n5nb54001v7sv15faxophh","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5k00267sv1pfnfszo9"},{"post_id":"cj1n5nb3b000r7sv1ubkv85tq","tag_id":"cj1n5nb54001w7sv1hjbvlff8","_id":"cj1n5nb5k00297sv1n2itxqtc"},{"post_id":"cj1n5nb5400237sv1kyw08720","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5k002a7sv1jegoh6kg"},{"post_id":"cj1n5nb5k00277sv1qh7wd57f","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5k002c7sv1p52gfylt"},{"post_id":"cj1n5nb3b000t7sv12u78hyal","tag_id":"cj1n5nb5400227sv1g31lgod9","_id":"cj1n5nb5k002d7sv12yq3nmza"},{"post_id":"cj1n5nb3b000t7sv12u78hyal","tag_id":"cj1n5nb5k00287sv1dryhlkus","_id":"cj1n5nb5k002f7sv1kyyitrn5"},{"post_id":"cj1n5nb3b000w7sv1sa9r4sak","tag_id":"cj1n5nb5k002b7sv1k6j2mof4","_id":"cj1n5nb5k002h7sv1oelsyujn"},{"post_id":"cj1n5nb3b000w7sv1sa9r4sak","tag_id":"cj1n5nb5k002e7sv11ytb67jw","_id":"cj1n5nb5k002i7sv1u7ux7p18"},{"post_id":"cj1n5nb3b000y7sv1u50ho9d8","tag_id":"cj1n5nb5k002g7sv1y8qa0vjw","_id":"cj1n5nb5k002k7sv1z9umro78"},{"post_id":"cj1n5nb3b00107sv1ehu4l11i","tag_id":"cj1n5nb49001g7sv1g54o0p7f","_id":"cj1n5nb5k002m7sv16afoogbp"},{"post_id":"cj1n5nb3b00107sv1ehu4l11i","tag_id":"cj1n5nb2v000i7sv14zckupqj","_id":"cj1n5nb5k002n7sv1v9drtca4"},{"post_id":"cj1n5nb3t00187sv1uf83hs8u","tag_id":"cj1n5nb5k002l7sv13coxjsua","_id":"cj1n5nb5k002q7sv17d2lnm7f"},{"post_id":"cj1n5nb3t00187sv1uf83hs8u","tag_id":"cj1n5nb5k002o7sv1fanvli3h","_id":"cj1n5nb5k002r7sv1u6wr4mio"},{"post_id":"cj1n5nb3t001a7sv1e3hed1ib","tag_id":"cj1n5nb5k002p7sv18tpi1057","_id":"cj1n5nb5k002t7sv1dmn8l2hf"},{"post_id":"cj1n5nb3t001d7sv1zfolza68","tag_id":"cj1n5nb5k002s7sv1ktpzd2ew","_id":"cj1n5nb5k002v7sv12v9fxud0"},{"post_id":"cj1n5nb49001h7sv1q459xf7u","tag_id":"cj1n5nb5k002p7sv18tpi1057","_id":"cj1n5nb5k002x7sv1dmj27ml2"},{"post_id":"cj1n5nb49001j7sv1kldbkcw6","tag_id":"cj1n5nb5k002w7sv1fpbl5hws","_id":"cj1n5nb5k002z7sv1op0discz"},{"post_id":"cj1n5nb49001l7sv1h9dze8ie","tag_id":"cj1n5nb5k002p7sv18tpi1057","_id":"cj1n5nb5z00317sv1q1xqyokh"},{"post_id":"cj1n5nb4o001o7sv14nlkb6wv","tag_id":"cj1n5nb3b000v7sv1xa1tvn0w","_id":"cj1n5nb5z00337sv13a37o5tg"},{"post_id":"cj1n5nb4o001o7sv14nlkb6wv","tag_id":"cj1n5nb5k00307sv1cw06s7q9","_id":"cj1n5nb5z00347sv1p7dba4nh"},{"post_id":"cj1n5nb4o001q7sv1rs33c5g6","tag_id":"cj1n5nb2v000m7sv1tm8bvmon","_id":"cj1n5nb5z00367sv1r62cq09w"},{"post_id":"cj1n5nb4o001q7sv1rs33c5g6","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5z00377sv1jqkxa66p"},{"post_id":"cj1n5nb4o001q7sv1rs33c5g6","tag_id":"cj1n5nb5z00327sv1etq3ar3i","_id":"cj1n5nb5z00397sv16d1ra7um"},{"post_id":"cj1n5nb54001y7sv1mf3rtt4g","tag_id":"cj1n5nb5k002p7sv18tpi1057","_id":"cj1n5nb5z003a7sv1f7uou8az"},{"post_id":"cj1n5nb5400207sv1qply56vj","tag_id":"cj1n5nb5k002p7sv18tpi1057","_id":"cj1n5nb5z003c7sv1op5c4jav"},{"post_id":"cj1n5nb5k00257sv19s9z85wt","tag_id":"cj1n5nb2700027sv1cglsrvfy","_id":"cj1n5nb5z003e7sv1mtuyacwe"},{"post_id":"cj1n5nb5k00257sv19s9z85wt","tag_id":"cj1n5nb5z003b7sv1si58zq51","_id":"cj1n5nb5z003f7sv1f7y5uhzb"},{"post_id":"cj1n5nb5k00257sv19s9z85wt","tag_id":"cj1n5nb5z003d7sv1w0crqkoz","_id":"cj1n5nb5z003g7sv1h5d0fc3z"},{"post_id":"cj1n5nb6l003h7sv1nvz443hr","tag_id":"cj1n5nb4o001r7sv1hiqfxnvx","_id":"cj1n5nb6l003j7sv15iqbel1n"},{"post_id":"cj1n5nb6l003h7sv1nvz443hr","tag_id":"cj1n5nb6l003i7sv1px7w4yf6","_id":"cj1n5nb6l003k7sv1o2ukfhfm"}],"Tag":[{"name":"javascript","_id":"cj1n5nb2700027sv1cglsrvfy"},{"name":"php","_id":"cj1n5nb2v000e7sv1hgbruiix"},{"name":"MySql","_id":"cj1n5nb2v000i7sv14zckupqj"},{"name":"angular","_id":"cj1n5nb2v000m7sv1tm8bvmon"},{"name":"node","_id":"cj1n5nb3b000v7sv1xa1tvn0w"},{"name":"C#","_id":"cj1n5nb3r00117sv1tkst7v2p"},{"name":"CSS3","_id":"cj1n5nb3t00167sv1ws782dqs"},{"name":"gojs","_id":"cj1n5nb3t001b7sv1pmmfy0aa"},{"name":"PHP","_id":"cj1n5nb49001g7sv1g54o0p7f"},{"name":"css","_id":"cj1n5nb4o001m7sv1nldpy9l7"},{"name":"jQuery","_id":"cj1n5nb4o001r7sv1hiqfxnvx"},{"name":"jsp","_id":"cj1n5nb54001w7sv1hjbvlff8"},{"name":"vs2015","_id":"cj1n5nb5400227sv1g31lgod9"},{"name":"开发工具","_id":"cj1n5nb5k00287sv1dryhlkus"},{"name":"应用","_id":"cj1n5nb5k002b7sv1k6j2mof4"},{"name":"工具","_id":"cj1n5nb5k002e7sv11ytb67jw"},{"name":"MongoDB","_id":"cj1n5nb5k002g7sv1y8qa0vjw"},{"name":"vue","_id":"cj1n5nb5k002l7sv13coxjsua"},{"name":"lodash","_id":"cj1n5nb5k002o7sv1fanvli3h"},{"name":"操作系统","_id":"cj1n5nb5k002p7sv18tpi1057"},{"name":"跨域","_id":"cj1n5nb5k002s7sv1ktpzd2ew"},{"name":"API","_id":"cj1n5nb5k002w7sv1fpbl5hws"},{"name":"git","_id":"cj1n5nb5k00307sv1cw06s7q9"},{"name":"material","_id":"cj1n5nb5z00327sv1etq3ar3i"},{"name":"jquery","_id":"cj1n5nb5z003b7sv1si58zq51"},{"name":"lazyload","_id":"cj1n5nb5z003d7sv1w0crqkoz"},{"name":"promise","_id":"cj1n5nb6l003i7sv1px7w4yf6"}]}}