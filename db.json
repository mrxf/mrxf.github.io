{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/demos/index.html","path":"demos/index.html","modified":1,"renderable":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"581549a2b6355947b4f7d6c87839aadc8c50bfb1","modified":1588907729000},{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1588907729000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1588907729000},{"_id":"themes/yilia/_config.yml","hash":"decd0ad256f5034f281b029b19054057817c6e36","modified":1588907729000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1588907729000},{"_id":"source/_posts/JavaScript-determine-the-direction-of-the-mouse-into-the-container.md","hash":"2a1b43f50153d910bde43e18035d8dc8a3658ecc","modified":1588907729000},{"_id":"source/_posts/JavaScript-right-mouse-button-to-prevent-copy.md","hash":"c9062cec3301a46b0913631bf912fadbf9b78ac9","modified":1588907729000},{"_id":"source/_posts/Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes.md","hash":"79a58672bf93bda779186b6117df165b062694a6","modified":1588907729000},{"_id":"source/_posts/a-simple-class-of-php-to-connect-to-the-database.md","hash":"d5b0bbc86bba38a1a416f98e01483b36b1998cad","modified":1588907729000},{"_id":"source/_posts/after-the-empty-navicat-mysql-table-id-since-increased-from-1-again.md","hash":"4c41fcf118403334834cce7df721e67718c15b66","modified":1588907729000},{"_id":"source/_posts/angular-unique-filter.md","hash":"4f0455cac027cb2c05733f7ee76e07af3879d138","modified":1588907729000},{"_id":"source/_posts/animate-angular-data-change.md","hash":"e6c34637fecc41124016bd9e3163d3894420c959","modified":1588907729000},{"_id":"source/_posts/build-shadowsocks-server-through-the-node.md","hash":"b13a2bd8bc292ee21dd3da597ce5ae495d56ccd7","modified":1588907729000},{"_id":"source/_posts/css3-breathing-lamp-effect.md","hash":"f489f0adb0036770b107e5a853c99a1bf8a5a799","modified":1588907729000},{"_id":"source/_posts/difference-between-overloading-rewriting-and-hiding-in-c.md","hash":"7ea477cd3f3eb7de6d9e7b005d5c7f24554deb29","modified":1588907729000},{"_id":"source/_posts/explore-the-headless-browser-application-scenario.md","hash":"0b20d3b31a3fedbdd94c7c46ee08f07695f4cefc","modified":1588907729000},{"_id":"source/_posts/gets-the-current-php-complete-url-of-the-page.md","hash":"65bfe1fb64d37e3555b937038210522d52e4cd4f","modified":1588907729000},{"_id":"source/_posts/go-js-update-remote-image-resources.md","hash":"a032da484d0cae0421d586a0b7ea61117dad2728","modified":1588907729000},{"_id":"source/_posts/implementation-elements-in-the-parent-element-in-the-method.md","hash":"a7352f13a9d016f6c738e1929c03f96c995d80cb","modified":1588907729000},{"_id":"source/_posts/jquery-pop-up-Div-window-center-display.md","hash":"16e307e0cba52e21663a678dc202020c93bd5f11","modified":1588907729000},{"_id":"source/_posts/js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture.md","hash":"efe3482bf9fe2c5328d047839a16f2062acd5d4b","modified":1588907729000},{"_id":"source/_posts/jsp-generates-a-color-stripe-verification-code.md","hash":"898ce640cf1afbce8833e24cc0f9b91aa9ccd656","modified":1588907729000},{"_id":"source/_posts/let-vs-2015-ignore-a-folder.md","hash":"065eca0414e96cefdd5186723fe5cb06185f8ccc","modified":1588907729000},{"_id":"source/_posts/manage-the-star-on-the-lot.md","hash":"7086088283aba3a5badf0fd57e013040f0e2938d","modified":1588907729000},{"_id":"source/_posts/mobile-app-showcase-effect.md","hash":"608b739f8a56ef463a42553fc61b9a368b09be11","modified":1588907729000},{"_id":"source/_posts/mongo-on-x-86-system-startup-errors.md","hash":"9b85b20fcddc08f1381d83444adb5f6d05a01612","modified":1588907729000},{"_id":"source/_posts/my-view-of-fibonacci.md","hash":"f6f22412c8b635f45378429e66bc4407f7444fb3","modified":1588907729000},{"_id":"source/_posts/optimization-of-an-insert-query-insert-more-rows.md","hash":"cad7e2e02fbbcd5a7f9e3004366ac628643498e8","modified":1588907729000},{"_id":"source/_posts/osx-using-the-brew-to-manage-multiple-node-version.md","hash":"79141236f5f02654f0de4c0ca990832847b2426a","modified":1588907729000},{"_id":"source/_posts/php-implementation-simple-method-of-paging.md","hash":"092bdcedfc466d912ba257386473a57b95a1aa42","modified":1588907729000},{"_id":"source/_posts/php-timestamp-conversion-problem-eight-hours.md","hash":"3b534148a330b70e31532abe8fe398c5cf151e2b","modified":1588907729000},{"_id":"source/_posts/realize-the-path-of-chinese-into-english.md","hash":"760d014529c7b5ce4c95eb22331fbbf16a7ee198","modified":1588907729000},{"_id":"source/_posts/solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes.md","hash":"9ebc16f27bf14050f2b8b489483023674f11eee6","modified":1588907729000},{"_id":"source/_posts/solve-the-problem-of-mixed-site-of-cross-domain.md","hash":"8934c06e949c139de770299dbbe21ccad9736ebf","modified":1588907729000},{"_id":"source/_posts/some-of-gojs-tips-and-solutions.md","hash":"d8fe1d66e171d803e0281e57c3a16e6f40f6e9f9","modified":1588907729000},{"_id":"source/_posts/starter-ubuntu-12-add-program.md","hash":"5adba434ebf367d0862313d25d902451c2c2fef9","modified":1588907729000},{"_id":"source/_posts/taobao-provide-ip-database-api.md","hash":"4f5c7432c1a2ce338ae7f1fce7470c87401be6ac","modified":1588907729000},{"_id":"source/_posts/the-firefox-chinese-language-pack-installed-ubuntu.md","hash":"f8ecb28bb35154fc51afb5f08c34cdb7e02aa9c2","modified":1588907729000},{"_id":"source/_posts/the-front-command-line-tools-proxy-settings.md","hash":"d6cdf1ef2584e90a61cdc5cfa2f2c9b211a9165e","modified":1588907729000},{"_id":"source/_posts/the-material-style-of-angle-template-development-is-introduced.md","hash":"c2c829fa83a31268d2f99232379e885bc94405ef","modified":1588907729000},{"_id":"source/_posts/the-problem-of-unable-to-get-ng-repeat-generating-element-styles.md","hash":"b3fecf752a5fc2f1d1e43a99aa6e066c2e315b8c","modified":1588907729000},{"_id":"source/_posts/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy.md","hash":"145bb64feafdc69a66e6a1f8b602f5c8412b465b","modified":1588907729000},{"_id":"source/_posts/u-buntu-increase-in-virtual-box-disk-capacity.md","hash":"3117dfdd33de75522fc77df5417057768b01e72f","modified":1588907729000},{"_id":"source/_posts/use-aria2-increase-offline-download-function-for-onedrive.md","hash":"7d3eb130248a670cb4cc77309b7070239ef768a4","modified":1588907729000},{"_id":"source/_posts/use-javascript-to-judge-whether-the-element-contains-a-certain-style.md","hash":"3b5ec5bbd382cf7b9d5c3ef82af1161891994272","modified":1588907729000},{"_id":"source/_posts/use-of-cmd-solve-port-being-used.md","hash":"2a24922a155bce67d43bade5fd38a67cb780b1e8","modified":1588907729000},{"_id":"source/_posts/use-prefix-free-solve-the-problem-of-css-prefix.md","hash":"8dc09c2c7ae2facccba29850fa664b3286552df5","modified":1588907729000},{"_id":"source/_posts/use-the-lazyload-optimizing-web-images-load.md","hash":"0b83b702d009a18c3e5847b102ca33478c2170d3","modified":1588907729000},{"_id":"source/_posts/use-the-string-of-the-split-method-of-array-to-heavy.md","hash":"35b34a09550bc38f624ef81c465c4dff548fae9c","modified":1588907729000},{"_id":"source/_posts/using-j-querys-promise-to-solve-delay-data-processing-model.md","hash":"f2c27a3588f4d38b187c48b725209859478046bb","modified":1588907729000},{"_id":"source/_posts/using-man-in-the-middle-for-capture.md","hash":"f2f0d271411db43fccae8c76a03dc611d7ac1355","modified":1588907729000},{"_id":"source/_posts/using-the-jwt-for-api-to-add-authentication.md","hash":"53e1b40c8e415ac1dbf961c97c846686d5e4e207","modified":1588907729000},{"_id":"source/demos/index.html","hash":"cb74d9644dfd464a49b14cb4442dc4344b53b1c8","modified":1588907729000},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1588907729000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1588907729000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1588907729000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1588907729000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1588907729000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1588907729000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1588907729000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1588907729000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588907729000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1588907729000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1588907729000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1588907729000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588907729000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588907729000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"74c5f9888abf3ea6c9f1021f936980ac32005f46","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","hash":"8c201499d40b962e56858c8e593be6815624c7b0","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"106ba70764ebb9d9c646cf3acf97d4d3062daca1","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"b98bd09b9c61490c1d740171c7c2c50e536a8717","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"98c9ff9d4405cff22ef40f81d800c7ca69b5b0f7","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1588907729000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1588907729000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1588907729000},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588907729000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1588907729000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1588907729000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1588907729000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1588907729000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1588907729000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1588907729000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1588907729000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1588907729000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1588907729000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1588907729000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1588907729000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1588907729000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1588907729000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1588907729000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1588907729000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1588907729000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1588907729000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1588907729000},{"_id":"themes/yilia/source/js/MathJax.js","hash":"b860b98142b33d65eedc20c8b7e5324e2e343f8a","modified":1588907729000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1588907729000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1588907729000},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1588907729000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1588907729000},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1588907729000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"bbba871b1ca75dffc4a03a4c72d50133ef05bd61","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"cc138f560dc275fa6f3b596c29a779dd51b24eeb","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1588907729000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1588907729000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1588907729000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1588907729000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1588907729000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1588907729000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1588907729000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588907729000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588907729000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1588907729000},{"_id":"public/atom.xml","hash":"584558683a9bcf90c603a421b93284364a9151ea","modified":1588907749172},{"_id":"public/sitemap.xml","hash":"d687b2ddf0737d576b2aaf3c5622bd24773ebe4c","modified":1588907749172},{"_id":"public/2017/02/28/build-shadowsocks-server-through-the-node/index.html","hash":"7a8bc924ddac6af34897cfab691910d8dbbcaa23","modified":1588907750288},{"_id":"public/2017/02/24/let-vs-2015-ignore-a-folder/index.html","hash":"c15a69943ee97477b302c7be467e5032214ac34c","modified":1588907750288},{"_id":"public/2016/12/01/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy/index.html","hash":"7446c6bfbec1f98c43755464903a2225905eba23","modified":1588907750288},{"_id":"public/2016/11/28/manage-the-star-on-the-lot/index.html","hash":"87bb974a6b0500bc6e7bf8e41834b88ebd31ea38","modified":1588907750288},{"_id":"public/2016/06/30/solve-the-problem-of-mixed-site-of-cross-domain/index.html","hash":"03e57669e724893c438950082cd41f6cc6d38ba3","modified":1588907750288},{"_id":"public/2016/04/05/mongo-on-x-86-system-startup-errors/index.html","hash":"620a4d8927398e1eed380390f4bd4301abcdc1e8","modified":1588907750288},{"_id":"public/2014/07/08/use-prefix-free-solve-the-problem-of-css-prefix/index.html","hash":"34e203e89d021bb688d3f1989b3df7bb1e20dfcb","modified":1588907750288},{"_id":"public/2014/05/31/after-the-empty-navicat-mysql-table-id-since-increased-from-1-again/index.html","hash":"f449bb20275a85e6938cc5387c758ffedb16e053","modified":1588907750289},{"_id":"public/2014/05/29/Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes/index.html","hash":"d8c96bc3816ba5713fdbdcb36df8060d2f532845","modified":1588907750289},{"_id":"public/2014/05/25/solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes/index.html","hash":"743c2b0c9143e367ee3efbffdb68fb8f4210f6bd","modified":1588907750289},{"_id":"public/2014/05/23/u-buntu-increase-in-virtual-box-disk-capacity/index.html","hash":"e82351b876d0f49e5e0ce223e9fbae25621b74b6","modified":1588907750289},{"_id":"public/2014/05/22/the-firefox-chinese-language-pack-installed-ubuntu/index.html","hash":"03e094170f6e20a295869d080353a7a38418e65d","modified":1588907750289},{"_id":"public/2014/05/21/starter-ubuntu-12-add-program/index.html","hash":"d3e62b59faa796a1634d73389a5214d35024de3c","modified":1588907750289},{"_id":"public/2014/05/18/php-implementation-simple-method-of-paging/index.html","hash":"85141b2dafe3bfabfc7d089d46b590709926cb0b","modified":1588907750289},{"_id":"public/2013/07/23/taobao-provide-ip-database-api/index.html","hash":"863e70cbc658a10a811e39c9c32da27906516c9f","modified":1588907750289},{"_id":"public/2013/07/21/use-of-cmd-solve-port-being-used/index.html","hash":"066eacf675a8c60e754ede434f049d588f2f7af2","modified":1588907750289},{"_id":"public/archives/2013/index.html","hash":"9d0989c6fc16322db74e0b51680af20a7185e6d1","modified":1588907750289},{"_id":"public/archives/2013/07/index.html","hash":"451ec00afaed5e96c2f3685eb523dbd8fe0d5b2b","modified":1588907750289},{"_id":"public/archives/2014/04/index.html","hash":"cff0d3ec2d6f206f630960570aac76a04c7df295","modified":1588907750289},{"_id":"public/archives/2014/06/index.html","hash":"d0dc06f66598e13cad65c2ddf83df64b4a394b00","modified":1588907750289},{"_id":"public/archives/2014/07/index.html","hash":"33dcc8e4836223b77e6034f210e5c81a61040d36","modified":1588907750289},{"_id":"public/archives/2015/index.html","hash":"0d034581b67bd7e679b2ab82c03b9f4bbc78810b","modified":1588907750289},{"_id":"public/archives/2015/09/index.html","hash":"62d121de957ce29239bfc745b46685c27fe30aed","modified":1588907750289},{"_id":"public/archives/2016/page/2/index.html","hash":"efc8feaf630f28149c25f29410a158abba621b01","modified":1588907750290},{"_id":"public/archives/2016/02/index.html","hash":"89d3dceb4b8400ca0ed08f01ca7a0af10b13dd64","modified":1588907750290},{"_id":"public/archives/2016/04/index.html","hash":"0b0b794e7bd34579271b6160a75eb5475d2fba8b","modified":1588907750290},{"_id":"public/archives/2016/06/index.html","hash":"c598bbc10e2be52ea390290ce05307fc2d8bfb5b","modified":1588907750290},{"_id":"public/archives/2016/07/index.html","hash":"f26d1a02bd08bdf735a3fa52eb39846dd069a023","modified":1588907750290},{"_id":"public/archives/2016/10/index.html","hash":"9beb524d45e4122dc027d815cb4186bbac5218ef","modified":1588907750290},{"_id":"public/archives/2016/11/index.html","hash":"bc8136e01d36adaed212c13bbd429ea66a8ded71","modified":1588907750290},{"_id":"public/archives/2016/12/index.html","hash":"40a91d8b4ef9907cf2615ac87584db0fa8129192","modified":1588907750290},{"_id":"public/archives/2017/02/index.html","hash":"cebf6baac9ce084d16eec41ec7d0083767c5c733","modified":1588907750290},{"_id":"public/archives/2017/03/index.html","hash":"7f2477684ca377066dc79a0d9242d82419016ee7","modified":1588907750290},{"_id":"public/archives/2017/04/index.html","hash":"9c4300f4b1e36d806b1cbb348270b0591f44c42f","modified":1588907750290},{"_id":"public/archives/2017/09/index.html","hash":"49a50deab49e5457890cf033608eac23e0740a2b","modified":1588907750290},{"_id":"public/archives/2018/index.html","hash":"56ba478b9f923f11626e280db76e699839044875","modified":1588907750290},{"_id":"public/archives/2018/03/index.html","hash":"be3aefcca292518951b8840d4fb1d0480c6f9815","modified":1588907750290},{"_id":"public/archives/2018/04/index.html","hash":"a6bc831b420134c871bf7b79ad6861ccd18ff85c","modified":1588907750290},{"_id":"public/tags/javascript/page/2/index.html","hash":"be5c9982a7b58c37181e232ab33458c7bb376267","modified":1588907750290},{"_id":"public/tags/php/index.html","hash":"366b2af1b4fb6d224f223e420ad9886ccef932c6","modified":1588907750291},{"_id":"public/tags/MySql/index.html","hash":"bb76d641c2651a90a3b4d348c9cc1c55f2475011","modified":1588907750291},{"_id":"public/tags/angular/index.html","hash":"d3f52b19efa99052abd28e2ac4156e46218499ea","modified":1588907750291},{"_id":"public/tags/node/index.html","hash":"5730c78fee5eefbe11ab8cd1a6d07b1b072c3957","modified":1588907750291},{"_id":"public/tags/CSS3/index.html","hash":"47465e5a2ee68f063a97d6e7ebd0585a5491f662","modified":1588907750291},{"_id":"public/tags/C/index.html","hash":"bae206c801dad93606079a0c6c0ca1eb1ecb3c3c","modified":1588907750291},{"_id":"public/tags/无头浏览器/index.html","hash":"567bcb1884fce5ce67c2e78256753ab7eaccd827","modified":1588907750291},{"_id":"public/tags/爬虫/index.html","hash":"cb51e4374775e84844bf4a9d40f76e3e02a8493f","modified":1588907750291},{"_id":"public/tags/PHP/index.html","hash":"b54d543becd67e88cb6e81ded4c3f84f6e301c6a","modified":1588907750291},{"_id":"public/tags/gojs/index.html","hash":"ddc5ba4ff7f6a35f0b26175f1ea16d55c6fcac84","modified":1588907750291},{"_id":"public/tags/css/index.html","hash":"fa120207eadee4f8c993717af3a28a281fcf75b0","modified":1588907750291},{"_id":"public/tags/jQuery/index.html","hash":"a4be385ea2fa47f07e20a7414095a23c7a5f701e","modified":1588907750291},{"_id":"public/tags/jsp/index.html","hash":"b1483390f9530cf65d1f3eaafc15aa74c63299ee","modified":1588907750291},{"_id":"public/tags/vs2015/index.html","hash":"83a2f7efce9b5178d82d1bac0dc842988278b9a5","modified":1588907750291},{"_id":"public/tags/开发工具/index.html","hash":"36249d58dce005b24d13a8bb78d4cb9be72c0dac","modified":1588907750291},{"_id":"public/tags/应用/index.html","hash":"89c277850b03b30adf6f01d646ab2d9b75d00e07","modified":1588907750292},{"_id":"public/tags/工具/index.html","hash":"0583a4c55fb7adc1fcdb5247ef28a7a5c134578d","modified":1588907750292},{"_id":"public/tags/css3/index.html","hash":"77284a6c00e08aba6e765b01108d158d9ba39c26","modified":1588907750292},{"_id":"public/tags/MongoDB/index.html","hash":"6ba4bd624022a2d615c37af0e24fbbd91650bb67","modified":1588907750292},{"_id":"public/tags/Javascript/index.html","hash":"97d7a7ea443cc1a1f138169ef7f03b73909d053f","modified":1588907750292},{"_id":"public/tags/osx/index.html","hash":"86aa315995e0d3798bc75f6ff942bce9eb55cb0d","modified":1588907750292},{"_id":"public/tags/vue/index.html","hash":"04df8587fc0c44eaa4342534573a391c77cc9e4b","modified":1588907750292},{"_id":"public/tags/lodash/index.html","hash":"891ed5d1417cf6896cfb218e085bc9c620cf07cc","modified":1588907750292},{"_id":"public/tags/操作系统/index.html","hash":"117b75b4555d50679719199248993b33ecc0a4e6","modified":1588907750292},{"_id":"public/tags/跨域/index.html","hash":"b15ca08e282005f056f605b5da7d4dc2ff40ac76","modified":1588907750292},{"_id":"public/tags/API/index.html","hash":"88c41d20660c35bda33aeaec9d65b8032e130452","modified":1588907750292},{"_id":"public/tags/git/index.html","hash":"faa6066dcfed0f41e8155bdbc21699c56e0ceae4","modified":1588907750292},{"_id":"public/tags/material/index.html","hash":"4ed5395641c2fb68cf21e734a8fb8adfb82c3aaa","modified":1588907750292},{"_id":"public/tags/centos/index.html","hash":"2e6630cf0400b64d554abd8a825fcd709ca70fed","modified":1588907750292},{"_id":"public/tags/JavaScript/index.html","hash":"9e9add501fa9fc122f59905bd6c28d2e3a92d391","modified":1588907750292},{"_id":"public/tags/jquery/index.html","hash":"ccf6fa48c951e791d39651ae4060b895c905353b","modified":1588907750293},{"_id":"public/tags/lazyload/index.html","hash":"d21c55188ddeb03660e0820024557c8a92202009","modified":1588907750293},{"_id":"public/tags/promise/index.html","hash":"afe917e5378373e567d16d118f0ef1fafbb57dfe","modified":1588907750293},{"_id":"public/tags/中间人/index.html","hash":"365537717ab760aff9e7a941f881ba9ab0480db0","modified":1588907750293},{"_id":"public/tags/开发/index.html","hash":"c73b157c4047b4cc05d6881b19abf0f067c50b35","modified":1588907750293},{"_id":"public/tags/抓包/index.html","hash":"2236ab5629cf90db30187f28934acf8ec5eeafe1","modified":1588907750293},{"_id":"public/tags/jwt/index.html","hash":"a8e470aaa600ee9070f6841ec994e91d511e0a98","modified":1588907750293},{"_id":"public/tags/前端/index.html","hash":"aa52885fef559b78dfa70addebe8d2c6964fb0ba","modified":1588907750293},{"_id":"public/2018/04/07/using-man-in-the-middle-for-capture/index.html","hash":"e91a63bf2e617e02f2dddbe499b088196c3894e3","modified":1588907750293},{"_id":"public/2018/03/28/use-javascript-to-judge-whether-the-element-contains-a-certain-style/index.html","hash":"ea9d65223458d65fc116d6e79153b613c2ab13ba","modified":1588907750293},{"_id":"public/2018/03/07/use-aria2-increase-offline-download-function-for-onedrive/index.html","hash":"476e4f59812689ca3a2ff975f3a6fb07e74e4a0d","modified":1588907750293},{"_id":"public/2017/09/25/using-the-jwt-for-api-to-add-authentication/index.html","hash":"e5c1103625b2869ee03365fb8baaa21c5a5cfcad","modified":1588907750293},{"_id":"public/2017/09/21/my-view-of-fibonacci/index.html","hash":"05bf6f751dd422b49cc7438afc01039f94c8b40a","modified":1588907750293},{"_id":"public/2017/09/16/explore-the-headless-browser-application-scenario/index.html","hash":"d41fda49f024ecbdb9bd21c42a1860ce74e2d545","modified":1588907750293},{"_id":"public/2017/04/24/mobile-app-showcase-effect/index.html","hash":"cdd850bf5da1f4ea08b79a2a349687eb18ff810c","modified":1588907750293},{"_id":"public/2017/04/18/osx-using-the-brew-to-manage-multiple-node-version/index.html","hash":"ccbae4ecc0b691ef181b77fedc0595779552fa46","modified":1588907750294},{"_id":"public/2017/04/17/the-front-command-line-tools-proxy-settings/index.html","hash":"40360f583a94600a9ec0f5cd73a38adafd32f3a8","modified":1588907750294},{"_id":"public/2017/03/21/realize-the-path-of-chinese-into-english/index.html","hash":"a7a769333c6c1e3116dc1e8994ca035c2a303c95","modified":1588907750294},{"_id":"public/2016/12/01/the-problem-of-unable-to-get-ng-repeat-generating-element-styles/index.html","hash":"7cbcaede059d4da2db519357554ac439f4883b1c","modified":1588907750294},{"_id":"public/2016/11/30/animate-angular-data-change/index.html","hash":"5f8b308289ee6554971510634a80b1618be15d9e","modified":1588907750294},{"_id":"public/2016/11/24/angular-unique-filter/index.html","hash":"0eb876ce4bdefe026c5383c5d10401c7a46fef3f","modified":1588907750294},{"_id":"public/2016/11/21/the-material-style-of-angle-template-development-is-introduced/index.html","hash":"9a21a9ec6acf74fc98629bad814736cd36f3b5f1","modified":1588907750294},{"_id":"public/2016/11/18/css3-breathing-lamp-effect/index.html","hash":"b35bb3c9ed0243472d70ba001d9242b08cab8cb6","modified":1588907750294},{"_id":"public/2016/10/27/some-of-gojs-tips-and-solutions/index.html","hash":"671e2896227be82affa3e9253dfe1f80d5f14806","modified":1588907750294},{"_id":"public/2016/10/27/go-js-update-remote-image-resources/index.html","hash":"76ed3240b33338f1d451a6b074589f95ea072bca","modified":1588907750294},{"_id":"public/2016/10/26/using-j-querys-promise-to-solve-delay-data-processing-model/index.html","hash":"75baa08f98f0e36e4b5eb093b5294f9a372d2265","modified":1588907750294},{"_id":"public/2016/07/04/use-the-string-of-the-split-method-of-array-to-heavy/index.html","hash":"b5250427048eca3ee50d5155a6fb2a6745e5c992","modified":1588907750294},{"_id":"public/2016/02/02/implementation-elements-in-the-parent-element-in-the-method/index.html","hash":"d02831bda59bca67988659ae96cce48e5ebe8a9a","modified":1588907750294},{"_id":"public/2015/09/28/JavaScript-determine-the-direction-of-the-mouse-into-the-container/index.html","hash":"051fe081da9ecfaeefb93145d126e2db45c830b9","modified":1588907750295},{"_id":"public/2014/07/03/use-the-lazyload-optimizing-web-images-load/index.html","hash":"8ed4d87c5ec68b711177fd7e784939cc3d864a64","modified":1588907750295},{"_id":"public/2014/06/28/JavaScript-right-mouse-button-to-prevent-copy/index.html","hash":"b9da2c16969a82bd0e87c9b5b64ebead09e02a4a","modified":1588907750295},{"_id":"public/2014/06/18/jquery-pop-up-Div-window-center-display/index.html","hash":"c82cfa08647a7576b486cccf788b9a73719437d8","modified":1588907750295},{"_id":"public/2014/06/15/js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture/index.html","hash":"7858fc5f133b2a0a1f9aaa046305c64d2246fac2","modified":1588907750295},{"_id":"public/2014/06/10/optimization-of-an-insert-query-insert-more-rows/index.html","hash":"bdaa8126e74ba1678fa151502946080d8129ac66","modified":1588907750295},{"_id":"public/2014/06/02/a-simple-class-of-php-to-connect-to-the-database/index.html","hash":"c5787a31be5c4a1b0177287531388794c0eef0c6","modified":1588907750295},{"_id":"public/2014/05/26/difference-between-overloading-rewriting-and-hiding-in-c/index.html","hash":"0c37a5aee85a09c142e43d766d6b01a00118173d","modified":1588907750295},{"_id":"public/2014/05/17/php-timestamp-conversion-problem-eight-hours/index.html","hash":"7a4b8882c6a98074d1f0626de61b61c1965700c7","modified":1588907750295},{"_id":"public/2014/04/29/gets-the-current-php-complete-url-of-the-page/index.html","hash":"27e71e4a9bb70ab2d671bf32d75bce1f1d96348f","modified":1588907750295},{"_id":"public/2013/07/21/jsp-generates-a-color-stripe-verification-code/index.html","hash":"9d44197fea29abccab10ad296babf9fd920d9af8","modified":1588907750295},{"_id":"public/archives/index.html","hash":"723a1c5adf0cd8dea63974e78fad9677d41459ae","modified":1588907750295},{"_id":"public/archives/page/2/index.html","hash":"9890d716f3a6b47ff19e2f1bc34b45a80d94481c","modified":1588907750295},{"_id":"public/archives/page/3/index.html","hash":"27bf5025f2451c05fc06c96bf11346d6ab000cee","modified":1588907750296},{"_id":"public/archives/page/4/index.html","hash":"0b37e6515265045d062bef44f55e1b11e83f598d","modified":1588907750296},{"_id":"public/archives/page/5/index.html","hash":"379282925438decf54b65162b2ab7fa2a9a202be","modified":1588907750296},{"_id":"public/archives/2014/index.html","hash":"d25eb3689bbac596e24cb0667e00ec0a64ceb052","modified":1588907750296},{"_id":"public/archives/2014/page/2/index.html","hash":"6b38cea91b27bf29f70623f7da9b4cd371b3762c","modified":1588907750296},{"_id":"public/archives/2014/05/index.html","hash":"6803730876396353ceaef5cf7525c1158ad6c16b","modified":1588907750296},{"_id":"public/archives/2016/index.html","hash":"330a3aed5e78bd0f4a2d8e4f34b4de8cedec9f8a","modified":1588907750296},{"_id":"public/archives/2017/index.html","hash":"f97a71e62728e440893f12807193d3782a9ef991","modified":1588907750296},{"_id":"public/index.html","hash":"a2ab9b5452d8ddebe4f4dbd789ed93bf1cb1879f","modified":1588907750296},{"_id":"public/page/2/index.html","hash":"850895771a41c8ece8b66daebae76ce428b678a2","modified":1588907750296},{"_id":"public/page/3/index.html","hash":"b9c6ed559c0d17245472dd12e9b1709be28c9562","modified":1588907750296},{"_id":"public/page/4/index.html","hash":"dcdc03369f14d7536e1a7dbebc67372eb0c4ea2f","modified":1588907750296},{"_id":"public/page/5/index.html","hash":"ed378012e81ece22d8fcfef6a3894bd24505ea70","modified":1588907750296},{"_id":"public/tags/javascript/index.html","hash":"3698695ce3753c889d91d1a6425aa61c229bd5cc","modified":1588907750297},{"_id":"public/favicon.ico","hash":"581549a2b6355947b4f7d6c87839aadc8c50bfb1","modified":1588907750304},{"_id":"public/demos/index.html","hash":"cb74d9644dfd464a49b14cb4442dc4344b53b1c8","modified":1588907750304},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588907750304},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588907750304},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588907750305},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588907750305},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588907750305},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588907750305},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1588907750305},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1588907750305},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1588907750305},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1588907750305},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1588907750305},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1588907750305},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1588907750305},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1588907750305},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1588907750305},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1588907750305},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1588907750305},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1588907750305},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1588907750306},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1588907750306},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1588907750306},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1588907750306},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1588907750306},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1588907750306},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1588907750306},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1588907750306},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1588907750306},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1588907750306},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588907750306},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1588907751125},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1588907751132},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1588907751132},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1588907751132},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1588907751133},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1588907751133},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1588907751133},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588907751133},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588907751133},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588907751133},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588907751133},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588907751133},{"_id":"public/css/style.css","hash":"31d82de1cb666d4fbb7033e8c14871b55f3f5a8f","modified":1588907751133},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1588907751133},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588907751133},{"_id":"public/js/MathJax.js","hash":"b860b98142b33d65eedc20c8b7e5324e2e343f8a","modified":1588907751133}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"javaScript判断鼠标进入容器的方向","date":"2015-09-28T23:39:43.000Z","_content":"\n在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。\n\n也搜索到了一些解决方案，比如\n\n>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左\n\n<!--more-->\n\n![圆形直径](https://images.cnitblog.com/i/599390/201404/161747198221329.jpg)\n\n最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。\n\n```html\n<div id=\"box\"></div>\n\n<script type=\"text/javascript\">\n\tvar oBox = document.getElementById('box');\n\toBox.addEventListener('mouseenter',function(event) {\n\t\tevent = event || window.event;\n\t\tvar iX = event.offsetX,\n\t\t\tiY = event.offsetY,\n\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走\n\t\t\taDirections = ['上','右','下','左'],\n\t\t\tiMinIndex = 0;\n\n\t\t\t// console.table([aDirections,aDistance]);\n\t\t\t\t\n\t\t\tfor (var i = 0; i < aDistance.length; i++) {\n\t\t\t\tiMinIndex = aDistance[iMinIndex] > aDistance[i] ? i : iMinIndex;\n\t\t\t}\n\n\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];\n\n\t});\n</script>\n```\n![进入方向](https://cdn.thisjs.com/github/mouseenter.png)","source":"_posts/JavaScript-determine-the-direction-of-the-mouse-into-the-container.md","raw":"---\ntitle: javaScript判断鼠标进入容器的方向\ndate: 2015-09-28 23:39:43\ntags: javascript\n---\n\n在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。\n\n也搜索到了一些解决方案，比如\n\n>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左\n\n<!--more-->\n\n![圆形直径](https://images.cnitblog.com/i/599390/201404/161747198221329.jpg)\n\n最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。\n\n```html\n<div id=\"box\"></div>\n\n<script type=\"text/javascript\">\n\tvar oBox = document.getElementById('box');\n\toBox.addEventListener('mouseenter',function(event) {\n\t\tevent = event || window.event;\n\t\tvar iX = event.offsetX,\n\t\t\tiY = event.offsetY,\n\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走\n\t\t\taDirections = ['上','右','下','左'],\n\t\t\tiMinIndex = 0;\n\n\t\t\t// console.table([aDirections,aDistance]);\n\t\t\t\t\n\t\t\tfor (var i = 0; i < aDistance.length; i++) {\n\t\t\t\tiMinIndex = aDistance[iMinIndex] > aDistance[i] ? i : iMinIndex;\n\t\t\t}\n\n\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];\n\n\t});\n</script>\n```\n![进入方向](https://cdn.thisjs.com/github/mouseenter.png)","slug":"JavaScript-determine-the-direction-of-the-mouse-into-the-container","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbuq00001h2u41fn5eql","content":"<p>在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。</p>\n<p>也搜索到了一些解决方案，比如</p>\n<blockquote>\n<p>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://images.cnitblog.com/i/599390/201404/161747198221329.jpg\" alt=\"圆形直径\"></p>\n<p>最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\">\tvar oBox = document.getElementById('box');</span><br><span class=\"line\">\toBox.addEventListener('mouseenter',function(event) &#123;</span><br><span class=\"line\">\t\tevent = event || window.event;</span><br><span class=\"line\">\t\tvar iX = event.offsetX,</span><br><span class=\"line\">\t\t\tiY = event.offsetY,</span><br><span class=\"line\">\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走</span><br><span class=\"line\">\t\t\taDirections = ['上','右','下','左'],</span><br><span class=\"line\">\t\t\tiMinIndex = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// console.table([aDirections,aDistance]);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\tfor (var i = 0; i &lt; aDistance.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tiMinIndex = aDistance[iMinIndex] &gt; aDistance[i] ? i : iMinIndex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.thisjs.com/github/mouseenter.png\" alt=\"进入方向\"></p>\n","site":{"data":{}},"excerpt":"<p>在写一个鼠标进入容器，为容器添加滑入边框的动画效果的时候，遇到了一个小问题，就是需要判断鼠标进入容器的方向，然后再决定边框从哪个方向滑过。</p>\n<p>也搜索到了一些解决方案，比如</p>\n<blockquote>\n<p>以div容器的中心点作为圆心，以高和宽的最小值作为直径画圆，将圆以[π/4，3π/4)，[3π/4，5π/4），[5π/4，7π/4)，[-π/4，π/4)划分为四个象限，鼠标进入容器时的点的atan2(y,x)值在这四个象限里分别对应容器边框的下，右，上，左</p>\n</blockquote>","more":"<p><img src=\"https://images.cnitblog.com/i/599390/201404/161747198221329.jpg\" alt=\"圆形直径\"></p>\n<p>最终自己也想到了一个容易理解的方案，那就是当鼠标进入容器的时候，判断鼠标距离哪个边框更加近，就可以得到是从那个方向进入的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\">\tvar oBox = document.getElementById('box');</span><br><span class=\"line\">\toBox.addEventListener('mouseenter',function(event) &#123;</span><br><span class=\"line\">\t\tevent = event || window.event;</span><br><span class=\"line\">\t\tvar iX = event.offsetX,</span><br><span class=\"line\">\t\t\tiY = event.offsetY,</span><br><span class=\"line\">\t\t\taDistance = [iY,oBox.offsetWidth - iX,oBox.offsetHeight - iY,iX],  //上右下走</span><br><span class=\"line\">\t\t\taDirections = ['上','右','下','左'],</span><br><span class=\"line\">\t\t\tiMinIndex = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// console.table([aDirections,aDistance]);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\tfor (var i = 0; i &lt; aDistance.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tiMinIndex = aDistance[iMinIndex] &gt; aDistance[i] ? i : iMinIndex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\toBox.innerText = \"鼠标进入的方向是\" + aDirections[iMinIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.thisjs.com/github/mouseenter.png\" alt=\"进入方向\"></p>"},{"title":"javascript禁止鼠标右键防止拷贝","date":"2014-06-28T20:03:17.000Z","_content":"在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法\n\n* 禁止鼠标左右键代码/禁止网页选中/禁止另存为\n```\n<body oncontextmenu=\"return false\" onselectstart=\"return false\">\n<noscript><iframe src=\"/*.html>\";</iframe></noscript>\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n<!--more-->\n\n* 禁止鼠标左右键\n```\n<SCRIPT language=javascript>\n<!--\nif (window.Event)\ndocument.captureEvents(Event.MOUSEUP);\nfunction nocontextmenu(){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\nfunction norightclick(e){\nif (window.Event){\nif (e.which == 2 || e.which == 3)\nreturn false;\n}\nelse\nif (event.button == 2 || event.button == 3){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\n}\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</SCRIPT>\n```\n* 禁止选中代码\n\n```\n<SCRIPT language=JavaScript>\ndocument.oncontextmenu=new Function(\"event.returnValue=false;\");\ndocument.onselectstart=new Function(\"event.returnValue=false;\");\n</SCRIPT>\n```\n* 禁止另存为\n\n```\n <noscript>\n <iframe src=\"/*.htm\"></iframe>\n</noscript>\n\n```\n* 防拷贝/复制代码\n`<body leftmargin=0 topmargin=0 >`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\nomitformtagsomitformtags=omitformtags.join(\"|\")\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\nfunction reEnable(){\nreturn true\n}\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁止网页另存为\n`<noscript><iframe src=\"/*.html>\";</iframe></noscript>`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\n\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\n\nomitformtagsomitformtags=omitformtags.join(\"|\")\n\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\n\nfunction reEnable(){\nreturn true\n}\n\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁用右键\n```\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n* 真正的鼠标右键屏蔽\n```\n<script language=\"JavaScript\">\n<!--\n\nif (window.Event)\n document.captureEvents(Event.MOUSEUP);\n\nfunction nocontextmenu()\n{\nevent.cancelBubble = true\nevent.returnValue = false;\n\nreturn false;\n}\n\nfunction norightclick(e)\n{\nif (window.Event)\n{\n if (e.which == 2 || e.which == 3)\n return false;\n}\nelse\n if (event.button == 2 || event.button == 3)\n {\n event.cancelBubble = true\n event.returnValue = false;\n return false;\n }\n\n}\n\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</script>\n```\n\n","source":"_posts/JavaScript-right-mouse-button-to-prevent-copy.md","raw":"---\ntitle: javascript禁止鼠标右键防止拷贝\ndate: 2014-06-28 20:03:17\ntags: javascript\n---\n在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法\n\n* 禁止鼠标左右键代码/禁止网页选中/禁止另存为\n```\n<body oncontextmenu=\"return false\" onselectstart=\"return false\">\n<noscript><iframe src=\"/*.html>\";</iframe></noscript>\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n<!--more-->\n\n* 禁止鼠标左右键\n```\n<SCRIPT language=javascript>\n<!--\nif (window.Event)\ndocument.captureEvents(Event.MOUSEUP);\nfunction nocontextmenu(){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\nfunction norightclick(e){\nif (window.Event){\nif (e.which == 2 || e.which == 3)\nreturn false;\n}\nelse\nif (event.button == 2 || event.button == 3){\nevent.cancelBubble = true\nevent.returnValue = false;\nreturn false;\n}\n}\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</SCRIPT>\n```\n* 禁止选中代码\n\n```\n<SCRIPT language=JavaScript>\ndocument.oncontextmenu=new Function(\"event.returnValue=false;\");\ndocument.onselectstart=new Function(\"event.returnValue=false;\");\n</SCRIPT>\n```\n* 禁止另存为\n\n```\n <noscript>\n <iframe src=\"/*.htm\"></iframe>\n</noscript>\n\n```\n* 防拷贝/复制代码\n`<body leftmargin=0 topmargin=0 >`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\nomitformtagsomitformtags=omitformtags.join(\"|\")\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\nfunction reEnable(){\nreturn true\n}\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁止网页另存为\n`<noscript><iframe src=\"/*.html>\";</iframe></noscript>`\n\n* 禁止选择文本\n```\n<script type=\"text/javascript\">\n\nvar omitformtags=[\"input\", \"textarea\", \"select\"]\n\nomitformtagsomitformtags=omitformtags.join(\"|\")\n\nfunction disableselect(e){\nif (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)\nreturn false\n}\n\nfunction reEnable(){\nreturn true\n}\n\nif (typeof document.onselectstart!=\"undefined\")\ndocument.onselectstart=new Function (\"return false\")\nelse{\ndocument.onmousedown=disableselect\ndocument.onmouseup=reEnable\n}\n</script>\n```\n* 禁用右键\n```\n<script>\nfunction stop(){\nreturn false;\n}\ndocument.oncontextmenu=stop;\n</script>\n```\n* 真正的鼠标右键屏蔽\n```\n<script language=\"JavaScript\">\n<!--\n\nif (window.Event)\n document.captureEvents(Event.MOUSEUP);\n\nfunction nocontextmenu()\n{\nevent.cancelBubble = true\nevent.returnValue = false;\n\nreturn false;\n}\n\nfunction norightclick(e)\n{\nif (window.Event)\n{\n if (e.which == 2 || e.which == 3)\n return false;\n}\nelse\n if (event.button == 2 || event.button == 3)\n {\n event.cancelBubble = true\n event.returnValue = false;\n return false;\n }\n\n}\n\ndocument.oncontextmenu = nocontextmenu; // for IE5+\ndocument.onmousedown = norightclick; // for all others\n//-->\n</script>\n```\n\n","slug":"JavaScript-right-mouse-button-to-prevent-copy","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbuy00011h2uvdxron6r","content":"<p>在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法</p>\n<ul>\n<li>禁止鼠标左右键代码/禁止网页选中/禁止另存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;</span><br><span class=\"line\">&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function stop()&#123;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu=stop;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>禁止鼠标左右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=javascript&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\">document.captureEvents(Event.MOUSEUP);</span><br><span class=\"line\">function nocontextmenu()&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function norightclick(e)&#123;</span><br><span class=\"line\">if (window.Event)&#123;</span><br><span class=\"line\">if (e.which == 2 || e.which == 3)</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">if (event.button == 2 || event.button == 3)&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</span><br><span class=\"line\">document.onmousedown = norightclick; // for all others</span><br><span class=\"line\">//--&gt;</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止选中代码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=JavaScript&gt;</span><br><span class=\"line\">document.oncontextmenu=new Function(&quot;event.returnValue=false;&quot;);</span><br><span class=\"line\">document.onselectstart=new Function(&quot;event.returnValue=false;&quot;);</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>禁止另存为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;noscript&gt;</span><br><span class=\"line\"> &lt;iframe src=&quot;/*.htm&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;/noscript&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>防拷贝/复制代码<br><code>&lt;body leftmargin=0 topmargin=0 &gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</span><br><span class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</span><br><span class=\"line\">function disableselect(e)&#123;</span><br><span class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</span><br><span class=\"line\">return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function reEnable()&#123;</span><br><span class=\"line\">return true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</span><br><span class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">document.onmousedown=disableselect</span><br><span class=\"line\">document.onmouseup=reEnable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止网页另存为<br><code>&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">function disableselect(e)&#123;</span><br><span class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</span><br><span class=\"line\">return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reEnable()&#123;</span><br><span class=\"line\">return true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</span><br><span class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">document.onmousedown=disableselect</span><br><span class=\"line\">document.onmouseup=reEnable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁用右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function stop()&#123;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu=stop;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>真正的鼠标右键屏蔽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\"></span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\"> document.captureEvents(Event.MOUSEUP);</span><br><span class=\"line\"></span><br><span class=\"line\">function nocontextmenu()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\"></span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function norightclick(e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> if (e.which == 2 || e.which == 3)</span><br><span class=\"line\"> return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\"> if (event.button == 2 || event.button == 3)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> event.cancelBubble = true</span><br><span class=\"line\"> event.returnValue = false;</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</span><br><span class=\"line\">document.onmousedown = norightclick; // for all others</span><br><span class=\"line\">//--&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在使用TurnJs的时候，为了防止其他用户直接复制杂志的图片，需要加入禁止右键的功能，以下列出常用的方法</p>\n<ul>\n<li>禁止鼠标左右键代码/禁止网页选中/禁止另存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;</span><br><span class=\"line\">&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function stop()&#123;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu=stop;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>禁止鼠标左右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=javascript&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\">document.captureEvents(Event.MOUSEUP);</span><br><span class=\"line\">function nocontextmenu()&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function norightclick(e)&#123;</span><br><span class=\"line\">if (window.Event)&#123;</span><br><span class=\"line\">if (e.which == 2 || e.which == 3)</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">if (event.button == 2 || event.button == 3)&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</span><br><span class=\"line\">document.onmousedown = norightclick; // for all others</span><br><span class=\"line\">//--&gt;</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止选中代码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=JavaScript&gt;</span><br><span class=\"line\">document.oncontextmenu=new Function(&quot;event.returnValue=false;&quot;);</span><br><span class=\"line\">document.onselectstart=new Function(&quot;event.returnValue=false;&quot;);</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>禁止另存为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;noscript&gt;</span><br><span class=\"line\"> &lt;iframe src=&quot;/*.htm&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;/noscript&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>防拷贝/复制代码<br><code>&lt;body leftmargin=0 topmargin=0 &gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</span><br><span class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</span><br><span class=\"line\">function disableselect(e)&#123;</span><br><span class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</span><br><span class=\"line\">return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function reEnable()&#123;</span><br><span class=\"line\">return true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</span><br><span class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">document.onmousedown=disableselect</span><br><span class=\"line\">document.onmouseup=reEnable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止网页另存为<br><code>&lt;noscript&gt;&lt;iframe src=&quot;/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt;</code></p>\n</li>\n<li><p>禁止选择文本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var omitformtags=[&quot;input&quot;, &quot;textarea&quot;, &quot;select&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">omitformtagsomitformtags=omitformtags.join(&quot;|&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">function disableselect(e)&#123;</span><br><span class=\"line\">if (omitformtags.indexOf(e.target.tagName.toLowerCase())==-1)</span><br><span class=\"line\">return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reEnable()&#123;</span><br><span class=\"line\">return true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (typeof document.onselectstart!=&quot;undefined&quot;)</span><br><span class=\"line\">document.onselectstart=new Function (&quot;return false&quot;)</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">document.onmousedown=disableselect</span><br><span class=\"line\">document.onmouseup=reEnable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁用右键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function stop()&#123;</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.oncontextmenu=stop;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>真正的鼠标右键屏蔽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\"></span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\"> document.captureEvents(Event.MOUSEUP);</span><br><span class=\"line\"></span><br><span class=\"line\">function nocontextmenu()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">event.cancelBubble = true</span><br><span class=\"line\">event.returnValue = false;</span><br><span class=\"line\"></span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function norightclick(e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (window.Event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> if (e.which == 2 || e.which == 3)</span><br><span class=\"line\"> return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\"> if (event.button == 2 || event.button == 3)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> event.cancelBubble = true</span><br><span class=\"line\"> event.returnValue = false;</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">document.oncontextmenu = nocontextmenu; // for IE5+</span><br><span class=\"line\">document.onmousedown = norightclick; // for all others</span><br><span class=\"line\">//--&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"js获取表单提交的数据并修改其他表单笔记","date":"2014-05-29T16:08:15.000Z","_content":"首先在提交按钮上面加入一个点击事件\n`onclick=\"fun(); `\n这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。\n接下来是fun()的事件\n\n<!--more-->\n\n```js\nfunction fun(){  \n    var jine=parseInt(document.getElementById(\"ckje\").value);  \n    var lixi=jine*3.25/100;  \n    var benxi=lixi+jine;  \n    document.getElementById(\"lixi\").value=lixi;  \n    document.getElementById(\"benxi\").value=benxi;  \n}  \n\n```\n\n这样就实现了简单的计算，并且将计算结果输出到了页面上。","source":"_posts/Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes.md","raw":"---\ntitle: js获取表单提交的数据并修改其他表单笔记\ndate: 2014-05-29 16:08:15\ntags: javascript\n---\n首先在提交按钮上面加入一个点击事件\n`onclick=\"fun(); `\n这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。\n接下来是fun()的事件\n\n<!--more-->\n\n```js\nfunction fun(){  \n    var jine=parseInt(document.getElementById(\"ckje\").value);  \n    var lixi=jine*3.25/100;  \n    var benxi=lixi+jine;  \n    document.getElementById(\"lixi\").value=lixi;  \n    document.getElementById(\"benxi\").value=benxi;  \n}  \n\n```\n\n这样就实现了简单的计算，并且将计算结果输出到了页面上。","slug":"Js-Get-the-data-submitted-by-the-form-and-modify-the-other-form-notes","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbv300031h2uwjes5uwt","content":"<p>首先在提交按钮上面加入一个点击事件<br><code>onclick=&quot;fun();</code><br>这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。<br>接下来是fun()的事件</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> jine=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ckje\"</span>).value);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> lixi=jine*<span class=\"number\">3.25</span>/<span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> benxi=lixi+jine;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"lixi\"</span>).value=lixi;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"benxi\"</span>).value=benxi;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了简单的计算，并且将计算结果输出到了页面上。</p>\n","site":{"data":{}},"excerpt":"<p>首先在提交按钮上面加入一个点击事件<br><code>onclick=&quot;fun();</code><br>这样的好处是直接屏蔽掉提交的默认事件，否则需要屏蔽浏览器的默认事件来防止按钮的自动提交。<br>接下来是fun()的事件</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> jine=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ckje\"</span>).value);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> lixi=jine*<span class=\"number\">3.25</span>/<span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> benxi=lixi+jine;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"lixi\"</span>).value=lixi;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"benxi\"</span>).value=benxi;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了简单的计算，并且将计算结果输出到了页面上。</p>"},{"title":"php连接数据库的一个简单类","date":"2014-06-02T19:08:24.000Z","_content":"以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可\n\n<!--more-->\n\n```php\n<?php\nclass ConnectionMySQL{\n    //主机\n    private $host=\"localhost\";\n    //数据库的username\n    private $name=\"root\";\n    //数据库的password\n    private $pass=\"11111111\";\n    //数据库名称\n    private $table=\"table\";\n    //编码形式\n    private $ut=\"utf8\";\n\n\n    //构造函数\n    function __construct(){\n        $this->ut=$ut;\n        $this->connect();\n\n    }\n\n    //数据库的链接\n    function connect(){\n        $link=mysql_connect($this->host,$this->name,$this->pass) or die ($this->error());\n        mysql_select_db($this->table,$link) or die(\"没该数据库：\".$this->table);\n        mysql_query(\"SET NAMES 'utf8'\");\n\t\tmysql_query(\"set character_set_client=utf8\");\n\t\tmysql_query(\"set character_set_results=utf8\");\n           //中文乱码问题\n    }\n\n    function query($sql, $type = '') {\n        if(!($query = mysql_query($sql))) $query=null;\n        return $query;\n    }\n\n    function show($message = '', $sql = '') {\n        if(!$sql) echo $message;\n        else echo $message.'<br>'.$sql;\n    }\n\n    function affected_rows() {\n        return mysql_affected_rows();\n    }\n\n    function result($query, $row) {\n        return mysql_result($query, $row);\n    }\n\n    function num_rows($query) {\n        return @mysql_num_rows($query);\n    }\n\tfunction table_rows($table){\n\t\t$query=mysql_query(\"select * from $table\") or die(mysql_error());\n\t\treturn mysql_num_rows($query);\n\t\t}\n\n    function num_fields($query) {\n        return mysql_num_fields($query);\n    }\n\n    function free_result($query) {\n        return mysql_free_result($query);\n    }\n\n    function insert_id() {\n        return mysql_insert_id();\n    }\n\n    function fetch_row($query) {\n        return mysql_fetch_row($query);\n    }\n\n    function version() {\n        return mysql_get_server_info();\n    }\n\n    function close() {\n        return mysql_close();\n    }\n\n    //向$table表中插入值\n    function fn_insert($table,$name,$value){\n        $this->query(\"insert into $table ($name) values ($value)\");\n    }\n    //根据$id值删除表$table中的一条记录\n    function fn_delete($table,$id,$value){\n        $this->query(\"delete from $table where $id=$value\");\n        echo \"id为\". $id.\" 的记录被成功删除!\";\n    }\n    //根据$id值查询表中的记录\n    function fn_select($table,$id){\n        $fileinfo=$this->query(\"select * from $table where id=$id\");\n        return $fileinfo;\n    }\n\t\n}\n\n\n?>\n\n```","source":"_posts/a-simple-class-of-php-to-connect-to-the-database.md","raw":"---\ntitle: php连接数据库的一个简单类\ndate: 2014-06-02 19:08:24\ntags: php\n---\n以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可\n\n<!--more-->\n\n```php\n<?php\nclass ConnectionMySQL{\n    //主机\n    private $host=\"localhost\";\n    //数据库的username\n    private $name=\"root\";\n    //数据库的password\n    private $pass=\"11111111\";\n    //数据库名称\n    private $table=\"table\";\n    //编码形式\n    private $ut=\"utf8\";\n\n\n    //构造函数\n    function __construct(){\n        $this->ut=$ut;\n        $this->connect();\n\n    }\n\n    //数据库的链接\n    function connect(){\n        $link=mysql_connect($this->host,$this->name,$this->pass) or die ($this->error());\n        mysql_select_db($this->table,$link) or die(\"没该数据库：\".$this->table);\n        mysql_query(\"SET NAMES 'utf8'\");\n\t\tmysql_query(\"set character_set_client=utf8\");\n\t\tmysql_query(\"set character_set_results=utf8\");\n           //中文乱码问题\n    }\n\n    function query($sql, $type = '') {\n        if(!($query = mysql_query($sql))) $query=null;\n        return $query;\n    }\n\n    function show($message = '', $sql = '') {\n        if(!$sql) echo $message;\n        else echo $message.'<br>'.$sql;\n    }\n\n    function affected_rows() {\n        return mysql_affected_rows();\n    }\n\n    function result($query, $row) {\n        return mysql_result($query, $row);\n    }\n\n    function num_rows($query) {\n        return @mysql_num_rows($query);\n    }\n\tfunction table_rows($table){\n\t\t$query=mysql_query(\"select * from $table\") or die(mysql_error());\n\t\treturn mysql_num_rows($query);\n\t\t}\n\n    function num_fields($query) {\n        return mysql_num_fields($query);\n    }\n\n    function free_result($query) {\n        return mysql_free_result($query);\n    }\n\n    function insert_id() {\n        return mysql_insert_id();\n    }\n\n    function fetch_row($query) {\n        return mysql_fetch_row($query);\n    }\n\n    function version() {\n        return mysql_get_server_info();\n    }\n\n    function close() {\n        return mysql_close();\n    }\n\n    //向$table表中插入值\n    function fn_insert($table,$name,$value){\n        $this->query(\"insert into $table ($name) values ($value)\");\n    }\n    //根据$id值删除表$table中的一条记录\n    function fn_delete($table,$id,$value){\n        $this->query(\"delete from $table where $id=$value\");\n        echo \"id为\". $id.\" 的记录被成功删除!\";\n    }\n    //根据$id值查询表中的记录\n    function fn_select($table,$id){\n        $fileinfo=$this->query(\"select * from $table where id=$id\");\n        return $fileinfo;\n    }\n\t\n}\n\n\n?>\n\n```","slug":"a-simple-class-of-php-to-connect-to-the-database","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbv400041h2u2hjzmrk1","content":"<p>以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionMySQL</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//主机</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $host=<span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库的username</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name=<span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库的password</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $pass=<span class=\"string\">\"11111111\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $table=<span class=\"string\">\"table\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//编码形式</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $ut=<span class=\"string\">\"utf8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ut=$ut;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据库的链接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $link=mysql_connect(<span class=\"keyword\">$this</span>-&gt;host,<span class=\"keyword\">$this</span>-&gt;name,<span class=\"keyword\">$this</span>-&gt;pass) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span> (<span class=\"keyword\">$this</span>-&gt;error());</span><br><span class=\"line\">        mysql_select_db(<span class=\"keyword\">$this</span>-&gt;table,$link) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"没该数据库：\"</span>.<span class=\"keyword\">$this</span>-&gt;table);</span><br><span class=\"line\">        mysql_query(<span class=\"string\">\"SET NAMES 'utf8'\"</span>);</span><br><span class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_client=utf8\"</span>);</span><br><span class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_results=utf8\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//中文乱码问题</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql, $type = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!($query = mysql_query($sql))) $query=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $query;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">($message = <span class=\"string\">''</span>, $sql = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!$sql) <span class=\"keyword\">echo</span> $message;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> $message.<span class=\"string\">'&lt;br&gt;'</span>.$sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">affected_rows</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_affected_rows();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span><span class=\"params\">($query, $row)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_result($query, $row);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_rows</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> @mysql_num_rows($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_rows</span><span class=\"params\">($table)</span></span>&#123;</span><br><span class=\"line\">\t\t$query=mysql_query(<span class=\"string\">\"select * from $table\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(mysql_error());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_num_rows($query);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_fields</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_num_fields($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">free_result</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_free_result($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_insert_id();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch_row</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_fetch_row($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">version</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_get_server_info();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向$table表中插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_insert</span><span class=\"params\">($table,$name,$value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"insert into $table ($name) values ($value)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据$id值删除表$table中的一条记录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_delete</span><span class=\"params\">($table,$id,$value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"delete from $table where $id=$value\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"id为\"</span>. $id.<span class=\"string\">\" 的记录被成功删除!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据$id值查询表中的记录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_select</span><span class=\"params\">($table,$id)</span></span>&#123;</span><br><span class=\"line\">        $fileinfo=<span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"select * from $table where id=$id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $fileinfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>以下封装了php连接数据库常用的一些方法，可以在使用的时候直接生成新的对象，调用相应的方法即可</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionMySQL</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//主机</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $host=<span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库的username</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name=<span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库的password</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $pass=<span class=\"string\">\"11111111\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//数据库名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $table=<span class=\"string\">\"table\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//编码形式</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $ut=<span class=\"string\">\"utf8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ut=$ut;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据库的链接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        $link=mysql_connect(<span class=\"keyword\">$this</span>-&gt;host,<span class=\"keyword\">$this</span>-&gt;name,<span class=\"keyword\">$this</span>-&gt;pass) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span> (<span class=\"keyword\">$this</span>-&gt;error());</span><br><span class=\"line\">        mysql_select_db(<span class=\"keyword\">$this</span>-&gt;table,$link) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"没该数据库：\"</span>.<span class=\"keyword\">$this</span>-&gt;table);</span><br><span class=\"line\">        mysql_query(<span class=\"string\">\"SET NAMES 'utf8'\"</span>);</span><br><span class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_client=utf8\"</span>);</span><br><span class=\"line\">\t\tmysql_query(<span class=\"string\">\"set character_set_results=utf8\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//中文乱码问题</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql, $type = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!($query = mysql_query($sql))) $query=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $query;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">($message = <span class=\"string\">''</span>, $sql = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!$sql) <span class=\"keyword\">echo</span> $message;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> $message.<span class=\"string\">'&lt;br&gt;'</span>.$sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">affected_rows</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_affected_rows();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span><span class=\"params\">($query, $row)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_result($query, $row);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_rows</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> @mysql_num_rows($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_rows</span><span class=\"params\">($table)</span></span>&#123;</span><br><span class=\"line\">\t\t$query=mysql_query(<span class=\"string\">\"select * from $table\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(mysql_error());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_num_rows($query);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num_fields</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_num_fields($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">free_result</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_free_result($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_insert_id();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch_row</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_fetch_row($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">version</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_get_server_info();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向$table表中插入值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_insert</span><span class=\"params\">($table,$name,$value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"insert into $table ($name) values ($value)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据$id值删除表$table中的一条记录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_delete</span><span class=\"params\">($table,$id,$value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"delete from $table where $id=$value\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"id为\"</span>. $id.<span class=\"string\">\" 的记录被成功删除!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据$id值查询表中的记录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn_select</span><span class=\"params\">($table,$id)</span></span>&#123;</span><br><span class=\"line\">        $fileinfo=<span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"select * from $table where id=$id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $fileinfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Navicat清空Mysql表后让id自增再从1开始","date":"2014-05-31T12:02:44.000Z","_content":"在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用`alter table table_name AUTO_INCREMENT=n`(n为起始值)命令来重置自增字段的起始数字，\n\n<!--more-->\n\n当然，可以直接使用`truncate table table_name`清空表 id就会从1开始.","source":"_posts/after-the-empty-navicat-mysql-table-id-since-increased-from-1-again.md","raw":"---\ntitle: Navicat清空Mysql表后让id自增再从1开始\ndate: 2014-05-31 12:02:44\ntags: MySql\n---\n在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用`alter table table_name AUTO_INCREMENT=n`(n为起始值)命令来重置自增字段的起始数字，\n\n<!--more-->\n\n当然，可以直接使用`truncate table table_name`清空表 id就会从1开始.","slug":"after-the-empty-navicat-mysql-table-id-since-increased-from-1-again","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbv600051h2u88piq9ip","content":"<p>在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用<code>alter table table_name AUTO_INCREMENT=n</code>(n为起始值)命令来重置自增字段的起始数字，</p>\n<a id=\"more\"></a>\n<p>当然，可以直接使用<code>truncate table table_name</code>清空表 id就会从1开始.</p>\n","site":{"data":{}},"excerpt":"<p>在使用navicat清空了数据库的表之后，我们发现，数据依旧是从上次的字段最后一个值增加的，这时候需要使用<code>alter table table_name AUTO_INCREMENT=n</code>(n为起始值)命令来重置自增字段的起始数字，</p>","more":"<p>当然，可以直接使用<code>truncate table table_name</code>清空表 id就会从1开始.</p>"},{"title":"angular的unique过滤器","date":"2016-11-24T11:41:07.000Z","_content":"\n![Angular](https://cdn.thisjs.com/github/ngFilter.jpg)\n\nAngular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，\n只要有数据表达式的地方就能使用过滤器。\n除去使用默认的几个过滤器，我们还可以自己定义过滤器。\n\n其中`unique`是非常实用的一个过滤器，在`angular-ui`插件中，已经集成了`unique`方法，\n可以在[angular-ui/angular-ui-OLDREPO](https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js)\n中看到，代码如下\n\n<!--more-->\n\n```js\n/**\n * Filters out all duplicate items from an array by checking the specified key\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\n if the key is empty, the entire object will be compared\n if the key === false then no filtering will be performed\n * @return {array}\n */\nangular.module('ui.filters').filter('unique', function () {\n\n  return function (items, filterOn) {\n\n    if (filterOn === false) {\n      return items;\n    }\n\n    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n      var hashCheck = {}, newItems = [];\n\n      var extractValueToCompare = function (item) {\n        if (angular.isObject(item) && angular.isString(filterOn)) {\n          return item[filterOn];\n        } else {\n          return item;\n        }\n      };\n\n      angular.forEach(items, function (item) {\n        var valueToCheck, isDuplicate = false;\n\n        for (var i = 0; i < newItems.length; i++) {\n          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\n            isDuplicate = true;\n            break;\n          }\n        }\n        if (!isDuplicate) {\n          newItems.push(item);\n        }\n\n      });\n      items = newItems;\n    }\n    return items;\n  };\n});\n```\n\n同时，有一个angular插件，提供了不同的filter，[angular-filter](https://github.com/a8m/angular-filter#unique),\n可以直接注入该插件，实现我们需要的`unique`过滤器","source":"_posts/angular-unique-filter.md","raw":"---\ntitle: angular的unique过滤器\ndate: 2016-11-24 11:41:07\ntags: [javascript,angular]\n---\n\n![Angular](https://cdn.thisjs.com/github/ngFilter.jpg)\n\nAngular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，\n只要有数据表达式的地方就能使用过滤器。\n除去使用默认的几个过滤器，我们还可以自己定义过滤器。\n\n其中`unique`是非常实用的一个过滤器，在`angular-ui`插件中，已经集成了`unique`方法，\n可以在[angular-ui/angular-ui-OLDREPO](https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js)\n中看到，代码如下\n\n<!--more-->\n\n```js\n/**\n * Filters out all duplicate items from an array by checking the specified key\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\n if the key is empty, the entire object will be compared\n if the key === false then no filtering will be performed\n * @return {array}\n */\nangular.module('ui.filters').filter('unique', function () {\n\n  return function (items, filterOn) {\n\n    if (filterOn === false) {\n      return items;\n    }\n\n    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n      var hashCheck = {}, newItems = [];\n\n      var extractValueToCompare = function (item) {\n        if (angular.isObject(item) && angular.isString(filterOn)) {\n          return item[filterOn];\n        } else {\n          return item;\n        }\n      };\n\n      angular.forEach(items, function (item) {\n        var valueToCheck, isDuplicate = false;\n\n        for (var i = 0; i < newItems.length; i++) {\n          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\n            isDuplicate = true;\n            break;\n          }\n        }\n        if (!isDuplicate) {\n          newItems.push(item);\n        }\n\n      });\n      items = newItems;\n    }\n    return items;\n  };\n});\n```\n\n同时，有一个angular插件，提供了不同的filter，[angular-filter](https://github.com/a8m/angular-filter#unique),\n可以直接注入该插件，实现我们需要的`unique`过滤器","slug":"angular-unique-filter","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbv900081h2usbpuf4iw","content":"<p><img src=\"https://cdn.thisjs.com/github/ngFilter.jpg\" alt=\"Angular\"></p>\n<p>Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，<br>只要有数据表达式的地方就能使用过滤器。<br>除去使用默认的几个过滤器，我们还可以自己定义过滤器。</p>\n<p>其中<code>unique</code>是非常实用的一个过滤器，在<code>angular-ui</code>插件中，已经集成了<code>unique</code>方法，<br>可以在<a href=\"https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js\" target=\"_blank\" rel=\"noopener\">angular-ui/angular-ui-OLDREPO</a><br>中看到，代码如下</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Filters out all duplicate items from an array by checking the specified key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>[key] &#123;string&#125; the name of the attribute of each object to compare for uniqueness</span></span><br><span class=\"line\"><span class=\"comment\"> if the key is empty, the entire object will be compared</span></span><br><span class=\"line\"><span class=\"comment\"> if the key === false then no filtering will be performed</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'ui.filters'</span>).filter(<span class=\"string\">'unique'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items, filterOn</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filterOn === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((filterOn || angular.isUndefined(filterOn)) &amp;&amp; angular.isArray(items)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hashCheck = &#123;&#125;, newItems = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> extractValueToCompare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (angular.isObject(item) &amp;&amp; angular.isString(filterOn)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> item[filterOn];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      angular.forEach(items, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> valueToCheck, isDuplicate = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newItems.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) &#123;</span><br><span class=\"line\">            isDuplicate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isDuplicate) &#123;</span><br><span class=\"line\">          newItems.push(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      items = newItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同时，有一个angular插件，提供了不同的filter，<a href=\"https://github.com/a8m/angular-filter#unique\" target=\"_blank\" rel=\"noopener\">angular-filter</a>,<br>可以直接注入该插件，实现我们需要的<code>unique</code>过滤器</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/github/ngFilter.jpg\" alt=\"Angular\"></p>\n<p>Angular的过滤器是非常实用的一个功能，过滤器的功能是为了格式化数据，<br>只要有数据表达式的地方就能使用过滤器。<br>除去使用默认的几个过滤器，我们还可以自己定义过滤器。</p>\n<p>其中<code>unique</code>是非常实用的一个过滤器，在<code>angular-ui</code>插件中，已经集成了<code>unique</code>方法，<br>可以在<a href=\"https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/filters/unique/unique.js\" target=\"_blank\" rel=\"noopener\">angular-ui/angular-ui-OLDREPO</a><br>中看到，代码如下</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Filters out all duplicate items from an array by checking the specified key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>[key] &#123;string&#125; the name of the attribute of each object to compare for uniqueness</span></span><br><span class=\"line\"><span class=\"comment\"> if the key is empty, the entire object will be compared</span></span><br><span class=\"line\"><span class=\"comment\"> if the key === false then no filtering will be performed</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'ui.filters'</span>).filter(<span class=\"string\">'unique'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items, filterOn</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filterOn === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((filterOn || angular.isUndefined(filterOn)) &amp;&amp; angular.isArray(items)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hashCheck = &#123;&#125;, newItems = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> extractValueToCompare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (angular.isObject(item) &amp;&amp; angular.isString(filterOn)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> item[filterOn];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      angular.forEach(items, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> valueToCheck, isDuplicate = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newItems.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) &#123;</span><br><span class=\"line\">            isDuplicate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isDuplicate) &#123;</span><br><span class=\"line\">          newItems.push(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      items = newItems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同时，有一个angular插件，提供了不同的filter，<a href=\"https://github.com/a8m/angular-filter#unique\" target=\"_blank\" rel=\"noopener\">angular-filter</a>,<br>可以直接注入该插件，实现我们需要的<code>unique</code>过滤器</p>"},{"title":"angular为绑定数据的变化添加动画","date":"2016-11-30T16:07:07.000Z","_content":"\n在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子\n\n![datachangge](https://cdn.thisjs.com/github/ng-bind-3GIF.gif)\n\n在angular中，我们可以使用ngAnimate来实现对应的效果\n\n<!--more-->\n\n## 以数据为CLASS，监听样式变化\n\n在需要监听变化的数据前，加入一个以数据作为class名的样式\n\n```html\n<span class=\"my-example value-{{myValue}}\">{{myValue}}</span>\n```\n\n这时，当数据发生变化之后，会自动添加`新数据-add`,`旧数据-remove`,`新数据-add-active`,`旧数据-remove-active`样式\n\n![add](https://cdn.thisjs.com/github/ng-bind-type.png)\n\n这时，我们在SASS *(less)* 样式中，筛选包含`-add`的样式，为其添加变化中的效果\n\n```css\nspan.my-example{\n    display: inline-block;\n    padding: 0 3px;\n    background-color: #FFFFFF;\n    color: #48a8d6;\n    transition: background-color 0.5s linear 0s;\n    &[class*=\"-add\"] {\n        background-color: #48a8d6;\n        color: #FFFFFFF;\n    }\n}\n```\n\n这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。\n\n## 使用ngAnimateSwap\n\n在 *angular 1.5* 版本之后，可以使用ngAnimateSwap方法检测数据的变化\n\n```html\n<div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n    {{ number }}\n  </div>\n```\n详情参阅 [官方文档](https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap)\n\n## 监听数据变化，发生变化添加样式\n\n**HTML**\n\n```html\n<span animate-on-change=\"someValue\">{{someValue}}</span>\n```\n**Directive**\n\n```js\nmyModule.directive('animateOnChange', function($timeout) {\n  return function(scope, element, attr) {\n    scope.$watch(attr.animateOnChange, function(nv,ov) {\n      if (nv!=ov) {\n        element.addClass('changed');\n        $timeout(function() {\n          element.removeClass('changed');\n        }, 1000); // Could be enhanced to take duration as a parameter\n      }\n    });\n  };\n});\n```\n\n**CSS**\n\n```css\n[animate-on-change] {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n[animate-on-change].changed {\n  background-color: red;\n  transition: none;\n  -webkit-transition: none;\n}\n```\n\n\n> 参考资料： http://stackoverflow.com/a/25894670/4945494 \n> http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes","source":"_posts/animate-angular-data-change.md","raw":"---\ntitle: angular为绑定数据的变化添加动画\ndate: 2016-11-30 16:07:07\ntags: [angular,javascript]\n---\n\n在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子\n\n![datachangge](https://cdn.thisjs.com/github/ng-bind-3GIF.gif)\n\n在angular中，我们可以使用ngAnimate来实现对应的效果\n\n<!--more-->\n\n## 以数据为CLASS，监听样式变化\n\n在需要监听变化的数据前，加入一个以数据作为class名的样式\n\n```html\n<span class=\"my-example value-{{myValue}}\">{{myValue}}</span>\n```\n\n这时，当数据发生变化之后，会自动添加`新数据-add`,`旧数据-remove`,`新数据-add-active`,`旧数据-remove-active`样式\n\n![add](https://cdn.thisjs.com/github/ng-bind-type.png)\n\n这时，我们在SASS *(less)* 样式中，筛选包含`-add`的样式，为其添加变化中的效果\n\n```css\nspan.my-example{\n    display: inline-block;\n    padding: 0 3px;\n    background-color: #FFFFFF;\n    color: #48a8d6;\n    transition: background-color 0.5s linear 0s;\n    &[class*=\"-add\"] {\n        background-color: #48a8d6;\n        color: #FFFFFFF;\n    }\n}\n```\n\n这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。\n\n## 使用ngAnimateSwap\n\n在 *angular 1.5* 版本之后，可以使用ngAnimateSwap方法检测数据的变化\n\n```html\n<div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n    {{ number }}\n  </div>\n```\n详情参阅 [官方文档](https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap)\n\n## 监听数据变化，发生变化添加样式\n\n**HTML**\n\n```html\n<span animate-on-change=\"someValue\">{{someValue}}</span>\n```\n**Directive**\n\n```js\nmyModule.directive('animateOnChange', function($timeout) {\n  return function(scope, element, attr) {\n    scope.$watch(attr.animateOnChange, function(nv,ov) {\n      if (nv!=ov) {\n        element.addClass('changed');\n        $timeout(function() {\n          element.removeClass('changed');\n        }, 1000); // Could be enhanced to take duration as a parameter\n      }\n    });\n  };\n});\n```\n\n**CSS**\n\n```css\n[animate-on-change] {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n[animate-on-change].changed {\n  background-color: red;\n  transition: none;\n  -webkit-transition: none;\n}\n```\n\n\n> 参考资料： http://stackoverflow.com/a/25894670/4945494 \n> http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes","slug":"animate-angular-data-change","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvb00091h2u3pg3yfmo","content":"<p>在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子</p>\n<p><img src=\"https://cdn.thisjs.com/github/ng-bind-3GIF.gif\" alt=\"datachangge\"></p>\n<p>在angular中，我们可以使用ngAnimate来实现对应的效果</p>\n<a id=\"more\"></a>\n<h2 id=\"以数据为CLASS，监听样式变化\"><a href=\"#以数据为CLASS，监听样式变化\" class=\"headerlink\" title=\"以数据为CLASS，监听样式变化\"></a>以数据为CLASS，监听样式变化</h2><p>在需要监听变化的数据前，加入一个以数据作为class名的样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-example value-&#123;&#123;myValue&#125;&#125;\"</span>&gt;</span>&#123;&#123;myValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这时，当数据发生变化之后，会自动添加<code>新数据-add</code>,<code>旧数据-remove</code>,<code>新数据-add-active</code>,<code>旧数据-remove-active</code>样式</p>\n<p><img src=\"https://cdn.thisjs.com/github/ng-bind-type.png\" alt=\"add\"></p>\n<p>这时，我们在SASS <em>(less)</em> 样式中，筛选包含<code>-add</code>的样式，为其添加变化中的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-class\">.my-example</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#48a8d6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: background-color <span class=\"number\">0.5s</span> linear <span class=\"number\">0s</span>;</span><br><span class=\"line\">    &amp;[class*=\"-add\"] &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#48a8d6</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#FFFFFFF</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。</p>\n<h2 id=\"使用ngAnimateSwap\"><a href=\"#使用ngAnimateSwap\" class=\"headerlink\" title=\"使用ngAnimateSwap\"></a>使用ngAnimateSwap</h2><p>在 <em>angular 1.5</em> 版本之后，可以使用ngAnimateSwap方法检测数据的变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-animate-swap</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cell swap-animation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"colorClass(number)\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; number &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>详情参阅 <a href=\"https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"监听数据变化，发生变化添加样式\"><a href=\"#监听数据变化，发生变化添加样式\" class=\"headerlink\" title=\"监听数据变化，发生变化添加样式\"></a>监听数据变化，发生变化添加样式</h2><p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">animate-on-change</span>=<span class=\"string\">\"someValue\"</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule.directive(<span class=\"string\">'animateOnChange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attr</span>) </span>&#123;</span><br><span class=\"line\">    scope.$watch(attr.animateOnChange, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nv,ov</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nv!=ov) &#123;</span><br><span class=\"line\">        element.addClass(<span class=\"string\">'changed'</span>);</span><br><span class=\"line\">        $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          element.removeClass(<span class=\"string\">'changed'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// Could be enhanced to take duration as a parameter</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span><span class=\"selector-class\">.changed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料： <a href=\"http://stackoverflow.com/a/25894670/4945494\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/a/25894670/4945494</a><br><a href=\"http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在页面中，我们的数据可能是从服务器实时加载，或者动态变化的，假如我们希望在某些数据发生变化之后，提醒用户是这些数据产生了改变，那么我们可能会想到为这个数据的变化添加一个效果，例如下面这个样子</p>\n<p><img src=\"https://cdn.thisjs.com/github/ng-bind-3GIF.gif\" alt=\"datachangge\"></p>\n<p>在angular中，我们可以使用ngAnimate来实现对应的效果</p>","more":"<h2 id=\"以数据为CLASS，监听样式变化\"><a href=\"#以数据为CLASS，监听样式变化\" class=\"headerlink\" title=\"以数据为CLASS，监听样式变化\"></a>以数据为CLASS，监听样式变化</h2><p>在需要监听变化的数据前，加入一个以数据作为class名的样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-example value-&#123;&#123;myValue&#125;&#125;\"</span>&gt;</span>&#123;&#123;myValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这时，当数据发生变化之后，会自动添加<code>新数据-add</code>,<code>旧数据-remove</code>,<code>新数据-add-active</code>,<code>旧数据-remove-active</code>样式</p>\n<p><img src=\"https://cdn.thisjs.com/github/ng-bind-type.png\" alt=\"add\"></p>\n<p>这时，我们在SASS <em>(less)</em> 样式中，筛选包含<code>-add</code>的样式，为其添加变化中的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-class\">.my-example</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#48a8d6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: background-color <span class=\"number\">0.5s</span> linear <span class=\"number\">0s</span>;</span><br><span class=\"line\">    &amp;[class*=\"-add\"] &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#48a8d6</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#FFFFFFF</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时在每次数据变化，都会有0.5秒的效果，这样哪些数据发生变化就比较明显了。</p>\n<h2 id=\"使用ngAnimateSwap\"><a href=\"#使用ngAnimateSwap\" class=\"headerlink\" title=\"使用ngAnimateSwap\"></a>使用ngAnimateSwap</h2><p>在 <em>angular 1.5</em> 版本之后，可以使用ngAnimateSwap方法检测数据的变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-animate-swap</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cell swap-animation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"colorClass(number)\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; number &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>详情参阅 <a href=\"https://code.angularjs.org/1.5.8/docs/api/ngAnimate/directive/ngAnimateSwap\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"监听数据变化，发生变化添加样式\"><a href=\"#监听数据变化，发生变化添加样式\" class=\"headerlink\" title=\"监听数据变化，发生变化添加样式\"></a>监听数据变化，发生变化添加样式</h2><p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">animate-on-change</span>=<span class=\"string\">\"someValue\"</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule.directive(<span class=\"string\">'animateOnChange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attr</span>) </span>&#123;</span><br><span class=\"line\">    scope.$watch(attr.animateOnChange, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nv,ov</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nv!=ov) &#123;</span><br><span class=\"line\">        element.addClass(<span class=\"string\">'changed'</span>);</span><br><span class=\"line\">        $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          element.removeClass(<span class=\"string\">'changed'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// Could be enhanced to take duration as a parameter</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[animate-on-change]</span><span class=\"selector-class\">.changed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料： <a href=\"http://stackoverflow.com/a/25894670/4945494\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/a/25894670/4945494</a><br><a href=\"http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/20053557/ng-animate-animation-when-model-changes</a></p>\n</blockquote>"},{"title":"通过node搭建shadowsocks服务器","date":"2017-02-28T17:14:14.000Z","_content":"\n![shadowsocks](https://cdn.thisjs.com/github/ss.png)\n\n在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。\n\n安装过程如下，服务器已经安装好node服务，并且可以使用`npm`命令\n\n<!--more-->\n\n1. 全局安装shadowsocks模块\n```\nnpm install -g shadowsocks\n```\n2. 找到安装目录`C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks\n`，编辑`config.json`文件\n```\n { \n    \"server\":\"IP地址\", \n    \"server_port\":443, \n    \"local_address\":\"127.0.0.1\", \n    \"local_port\":1080, \n    \"password\":\"密码\", \n    \"timeout\":600, \n    \"method\":\"rc4-md5\"\n}\n```\n2. 启动服务，执行命令\n```\nssserver\n```\n","source":"_posts/build-shadowsocks-server-through-the-node.md","raw":"---\ntitle: 通过node搭建shadowsocks服务器\ndate: 2017-02-28 17:14:14\ntags: 'node'\n---\n\n![shadowsocks](https://cdn.thisjs.com/github/ss.png)\n\n在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。\n\n安装过程如下，服务器已经安装好node服务，并且可以使用`npm`命令\n\n<!--more-->\n\n1. 全局安装shadowsocks模块\n```\nnpm install -g shadowsocks\n```\n2. 找到安装目录`C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks\n`，编辑`config.json`文件\n```\n { \n    \"server\":\"IP地址\", \n    \"server_port\":443, \n    \"local_address\":\"127.0.0.1\", \n    \"local_port\":1080, \n    \"password\":\"密码\", \n    \"timeout\":600, \n    \"method\":\"rc4-md5\"\n}\n```\n2. 启动服务，执行命令\n```\nssserver\n```\n","slug":"build-shadowsocks-server-through-the-node","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvd000c1h2u5uix7oub","content":"<p><img src=\"https://cdn.thisjs.com/github/ss.png\" alt=\"shadowsocks\"></p>\n<p>在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。</p>\n<p>安装过程如下，服务器已经安装好node服务，并且可以使用<code>npm</code>命令</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>全局安装shadowsocks模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到安装目录<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks</code>，编辑<code>config.json</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123; </span><br><span class=\"line\">    &quot;server&quot;:&quot;IP地址&quot;, </span><br><span class=\"line\">    &quot;server_port&quot;:443, </span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, </span><br><span class=\"line\">    &quot;local_port&quot;:1080, </span><br><span class=\"line\">    &quot;password&quot;:&quot;密码&quot;, </span><br><span class=\"line\">    &quot;timeout&quot;:600, </span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/github/ss.png\" alt=\"shadowsocks\"></p>\n<p>在企业开发项目时候，有时需要通过外网网络访问内部服务器，这时候可以通过搭建一个shadowsocks服务器，然后通过shadowsocks客户端连接服务器，访问内网内容。</p>\n<p>安装过程如下，服务器已经安装好node服务，并且可以使用<code>npm</code>命令</p>","more":"<ol>\n<li><p>全局安装shadowsocks模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到安装目录<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\shadowsocks</code>，编辑<code>config.json</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123; </span><br><span class=\"line\">    &quot;server&quot;:&quot;IP地址&quot;, </span><br><span class=\"line\">    &quot;server_port&quot;:443, </span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, </span><br><span class=\"line\">    &quot;local_port&quot;:1080, </span><br><span class=\"line\">    &quot;password&quot;:&quot;密码&quot;, </span><br><span class=\"line\">    &quot;timeout&quot;:600, </span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"css3实现科技感的呼吸灯效果","date":"2016-11-18T16:16:19.000Z","_content":"\n呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。\n\n使用CSS3的`animation`方法可以实现很多迷人的网页动画特效。\n\n使用CSS3 配合`box-shadow`即可实现类似的效果\n\n![呼吸灯](https://cdn.thisjs.com/github/GIF.gif)\n\n<!--more-->\n\n样式代码如下\n\n```css\n .breathe-div {\n    width: 100px;\n    height: 100px;\n    border: 1px solid #2b92d4;\n    border-radius: 50%;\n    text-align: center;\n    cursor: pointer;\n    margin:150px auto;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n    overflow: hidden;\n    -webkit-animation-timing-function: ease-in-out;\n    -webkit-animation-name: breathe;\n    -webkit-animation-duration: 1500ms;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-direction: alternate;\n}\n\n@-webkit-keyframes breathe {\n    0% {\n        opacity: .4;\n        box-shadow: 0 1px 2px rgba(0, 147, 223, 0.4), 0 1px 1px rgba(0, 147, 223, 0.1) inset;\n    }\n\n    100% {\n        opacity: 1;\n        border: 1px solid rgba(59, 235, 235, 0.7);\n        box-shadow: 0 1px 30px #0093df, 0 1px 20px #0093df inset;\n    }\n}\n```\n\nHTML 代码\n\n```html\n<div class=\"breathe-div\"></div>\n```","source":"_posts/css3-breathing-lamp-effect.md","raw":"---\ntitle: css3实现科技感的呼吸灯效果\ndate: 2016-11-18 16:16:19\ntags: CSS3\n---\n\n呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。\n\n使用CSS3的`animation`方法可以实现很多迷人的网页动画特效。\n\n使用CSS3 配合`box-shadow`即可实现类似的效果\n\n![呼吸灯](https://cdn.thisjs.com/github/GIF.gif)\n\n<!--more-->\n\n样式代码如下\n\n```css\n .breathe-div {\n    width: 100px;\n    height: 100px;\n    border: 1px solid #2b92d4;\n    border-radius: 50%;\n    text-align: center;\n    cursor: pointer;\n    margin:150px auto;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n    overflow: hidden;\n    -webkit-animation-timing-function: ease-in-out;\n    -webkit-animation-name: breathe;\n    -webkit-animation-duration: 1500ms;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-direction: alternate;\n}\n\n@-webkit-keyframes breathe {\n    0% {\n        opacity: .4;\n        box-shadow: 0 1px 2px rgba(0, 147, 223, 0.4), 0 1px 1px rgba(0, 147, 223, 0.1) inset;\n    }\n\n    100% {\n        opacity: 1;\n        border: 1px solid rgba(59, 235, 235, 0.7);\n        box-shadow: 0 1px 30px #0093df, 0 1px 20px #0093df inset;\n    }\n}\n```\n\nHTML 代码\n\n```html\n<div class=\"breathe-div\"></div>\n```","slug":"css3-breathing-lamp-effect","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvf000d1h2uhj8ubzal","content":"<p>呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。</p>\n<p>使用CSS3的<code>animation</code>方法可以实现很多迷人的网页动画特效。</p>\n<p>使用CSS3 配合<code>box-shadow</code>即可实现类似的效果</p>\n<p><img src=\"https://cdn.thisjs.com/github/GIF.gif\" alt=\"呼吸灯\"></p>\n<a id=\"more\"></a>\n<p>样式代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.breathe-div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#2b92d4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-timing-function</span>: ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-name</span>: breathe;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-duration</span>: <span class=\"number\">1500ms</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-iteration-count</span>: infinite;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-direction</span>: alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> breathe &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: .<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">147</span>, <span class=\"number\">223</span>, <span class=\"number\">0.4</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">147</span>, <span class=\"number\">223</span>, <span class=\"number\">0.1</span>) inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgba</span>(<span class=\"number\">59</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">30px</span> <span class=\"number\">#0093df</span>, <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">20px</span> <span class=\"number\">#0093df</span> inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HTML 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breathe-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>呼吸灯效果是一种常见的灯光效果，比如网页的按钮，现实生活中比如电脑的开机按钮。</p>\n<p>使用CSS3的<code>animation</code>方法可以实现很多迷人的网页动画特效。</p>\n<p>使用CSS3 配合<code>box-shadow</code>即可实现类似的效果</p>\n<p><img src=\"https://cdn.thisjs.com/github/GIF.gif\" alt=\"呼吸灯\"></p>","more":"<p>样式代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.breathe-div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#2b92d4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-timing-function</span>: ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-name</span>: breathe;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-duration</span>: <span class=\"number\">1500ms</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-iteration-count</span>: infinite;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-direction</span>: alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> breathe &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: .<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">147</span>, <span class=\"number\">223</span>, <span class=\"number\">0.4</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">147</span>, <span class=\"number\">223</span>, <span class=\"number\">0.1</span>) inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgba</span>(<span class=\"number\">59</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">30px</span> <span class=\"number\">#0093df</span>, <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">20px</span> <span class=\"number\">#0093df</span> inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HTML 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"breathe-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"C#重载、C#重写和C#隐藏的区别","date":"2014-05-26T11:22:07.000Z","_content":"C#重载、C#重写和C#隐藏的定义\n\nC#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。\n\nC#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的\n\n<!--more-->\n\n例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.\n\nC#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。\n\nC#重载时，根据参数选择调用的方法；\n\nC#重写时，访问父类子类皆调用子类的重写方法；\n\nC#隐藏时，访问父类则调用父类的方法，子类子类的方法。\n\nC#隐藏(new)示例：\n\n```C#\nusing System;    \n   class A    \n   {    \n         public void F()      \n         {    \n            Console.WriteLine(\"A.F\");      \n         }    \n   }    \n   class B: A    \n   {    \n         new public void F()      \n         {      \n            Console.WriteLine(\"B.F\");      \n         }    \n   }    \n   class Test    \n   {    \n         static void Main(string[] args)  \n         {    \n               B b = new B();    \n               b.F();    \n               A a = b;      \n               a.F();    \n         }    \n   }   \n```\n 输出为 \n ```cmd\nB.F \nA.F \n```\n\nC#重写virtual(虚方法)示例  \n\n```C#\nusing System;    \n class A    \n {    \n       public virtual void F()      \n       {    \n          Console.WriteLine(\"A.F\");      \n       }    \n }    \n class B: A    \n {    \n       public override void F()      \n       {      \n          Console.WriteLine(\"B.F\");      \n       }    \n }    \n class Test    \n {    \n       static void Main()      \n       {    \n             B b = new B();    \n             b.F();    \n             A a = b;      \n             a.F();    \n       }    \n }  \n```\n输出为 \n```cmd\nB.F \nB.F\n```\n补充：重写override一般用于接口实现和继承类的方法改写，要注意\n\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n3. 覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n4. 被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\n[原文地址](http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/)","source":"_posts/difference-between-overloading-rewriting-and-hiding-in-c.md","raw":"---\ntitle: 'C#重载、C#重写和C#隐藏的区别'\ndate: 2014-05-26 11:22:07\ntags: C#\n---\nC#重载、C#重写和C#隐藏的定义\n\nC#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。\n\nC#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的\n\n<!--more-->\n\n例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.\n\nC#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。\n\nC#重载时，根据参数选择调用的方法；\n\nC#重写时，访问父类子类皆调用子类的重写方法；\n\nC#隐藏时，访问父类则调用父类的方法，子类子类的方法。\n\nC#隐藏(new)示例：\n\n```C#\nusing System;    \n   class A    \n   {    \n         public void F()      \n         {    \n            Console.WriteLine(\"A.F\");      \n         }    \n   }    \n   class B: A    \n   {    \n         new public void F()      \n         {      \n            Console.WriteLine(\"B.F\");      \n         }    \n   }    \n   class Test    \n   {    \n         static void Main(string[] args)  \n         {    \n               B b = new B();    \n               b.F();    \n               A a = b;      \n               a.F();    \n         }    \n   }   \n```\n 输出为 \n ```cmd\nB.F \nA.F \n```\n\nC#重写virtual(虚方法)示例  \n\n```C#\nusing System;    \n class A    \n {    \n       public virtual void F()      \n       {    \n          Console.WriteLine(\"A.F\");      \n       }    \n }    \n class B: A    \n {    \n       public override void F()      \n       {      \n          Console.WriteLine(\"B.F\");      \n       }    \n }    \n class Test    \n {    \n       static void Main()      \n       {    \n             B b = new B();    \n             b.F();    \n             A a = b;      \n             a.F();    \n       }    \n }  \n```\n输出为 \n```cmd\nB.F \nB.F\n```\n补充：重写override一般用于接口实现和继承类的方法改写，要注意\n\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n3. 覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n4. 被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\n[原文地址](http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/)","slug":"difference-between-overloading-rewriting-and-hiding-in-c","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvn000g1h2uy1j8y8hq","content":"<p>C#重载、C#重写和C#隐藏的定义</p>\n<p>C#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。</p>\n<p>C#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的</p>\n<a id=\"more\"></a>\n<p>例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.</p>\n<p>C#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。</p>\n<p>C#重载时，根据参数选择调用的方法；</p>\n<p>C#重写时，访问父类子类皆调用子类的重写方法；</p>\n<p>C#隐藏时，访问父类则调用父类的方法，子类子类的方法。</p>\n<p>C#隐藏(new)示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;    </span><br><span class=\"line\">   class A    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         public void F()      </span><br><span class=\"line\">         &#123;    </span><br><span class=\"line\">            Console.WriteLine(&quot;A.F&quot;);      </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   class B: A    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         new public void F()      </span><br><span class=\"line\">         &#123;      </span><br><span class=\"line\">            Console.WriteLine(&quot;B.F&quot;);      </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   class Test    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         static void Main(string[] args)  </span><br><span class=\"line\">         &#123;    </span><br><span class=\"line\">               B b = new B();    </span><br><span class=\"line\">               b.F();    </span><br><span class=\"line\">               A a = b;      </span><br><span class=\"line\">               a.F();    </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p> 输出为<br> <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.F </span><br><span class=\"line\">A.F</span><br></pre></td></tr></table></figure></p>\n<p>C#重写virtual(虚方法)示例  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;    </span><br><span class=\"line\"> class A    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       public virtual void F()      </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">          Console.WriteLine(&quot;A.F&quot;);      </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;    </span><br><span class=\"line\"> class B: A    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       public override void F()      </span><br><span class=\"line\">       &#123;      </span><br><span class=\"line\">          Console.WriteLine(&quot;B.F&quot;);      </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;    </span><br><span class=\"line\"> class Test    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       static void Main()      </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">             B b = new B();    </span><br><span class=\"line\">             b.F();    </span><br><span class=\"line\">             A a = b;      </span><br><span class=\"line\">             a.F();    </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>输出为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.F </span><br><span class=\"line\">B.F</span><br></pre></td></tr></table></figure></p>\n<p>补充：重写override一般用于接口实现和继承类的方法改写，要注意</p>\n<ol>\n<li>覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；</li>\n<li>覆盖的方法的返回值必须和被覆盖的方法的返回一致；</li>\n<li>覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；</li>\n<li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li>\n</ol>\n<p><a href=\"http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>C#重载、C#重写和C#隐藏的定义</p>\n<p>C#重载：同一个作用域内发生（比如一个类里面），定义一系列同名方法，但是方法的参数列表不同。这样才能通过传递不同的参数来决定到底调用哪一个。而返回值类型不同是不能构成重载的。</p>\n<p>C#重写：继承时发生，在子类中重新定义父类中的方法，子类中的方法和父类的方法是一样的</p>","more":"<p>例如:基类方法声明为virtual(虚方法)，派生类中使用override申明此方法的重写.</p>\n<p>C#隐藏：基类方法不做申明（默认为非虚方法），在派生类中使用new声明此方法的隐藏。</p>\n<p>C#重载时，根据参数选择调用的方法；</p>\n<p>C#重写时，访问父类子类皆调用子类的重写方法；</p>\n<p>C#隐藏时，访问父类则调用父类的方法，子类子类的方法。</p>\n<p>C#隐藏(new)示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;    </span><br><span class=\"line\">   class A    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         public void F()      </span><br><span class=\"line\">         &#123;    </span><br><span class=\"line\">            Console.WriteLine(&quot;A.F&quot;);      </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   class B: A    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         new public void F()      </span><br><span class=\"line\">         &#123;      </span><br><span class=\"line\">            Console.WriteLine(&quot;B.F&quot;);      </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;    </span><br><span class=\"line\">   class Test    </span><br><span class=\"line\">   &#123;    </span><br><span class=\"line\">         static void Main(string[] args)  </span><br><span class=\"line\">         &#123;    </span><br><span class=\"line\">               B b = new B();    </span><br><span class=\"line\">               b.F();    </span><br><span class=\"line\">               A a = b;      </span><br><span class=\"line\">               a.F();    </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p> 输出为<br> <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.F </span><br><span class=\"line\">A.F</span><br></pre></td></tr></table></figure></p>\n<p>C#重写virtual(虚方法)示例  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;    </span><br><span class=\"line\"> class A    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       public virtual void F()      </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">          Console.WriteLine(&quot;A.F&quot;);      </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;    </span><br><span class=\"line\"> class B: A    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       public override void F()      </span><br><span class=\"line\">       &#123;      </span><br><span class=\"line\">          Console.WriteLine(&quot;B.F&quot;);      </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;    </span><br><span class=\"line\"> class Test    </span><br><span class=\"line\"> &#123;    </span><br><span class=\"line\">       static void Main()      </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">             B b = new B();    </span><br><span class=\"line\">             b.F();    </span><br><span class=\"line\">             A a = b;      </span><br><span class=\"line\">             a.F();    </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>输出为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.F </span><br><span class=\"line\">B.F</span><br></pre></td></tr></table></figure></p>\n<p>补充：重写override一般用于接口实现和继承类的方法改写，要注意</p>\n<ol>\n<li>覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；</li>\n<li>覆盖的方法的返回值必须和被覆盖的方法的返回一致；</li>\n<li>覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；</li>\n<li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li>\n</ol>\n<p><a href=\"http://joeblackzqq.blog.163.com/blog/static/16259543220108394657747/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"探索无头浏览器的应用场景","date":"2017-09-16T10:27:09.000Z","_content":"\n![自动化操作](https://cdn.thisjs.com/blog/automateexpenses.jpg)\n\n[Headless browser](https://en.wikipedia.org/wiki/Headless_browser)会带给我非常亲切的感觉，因为总能让我回想起[按键精灵](http://www.anjian.com/)和[AutoHotKey](https://www.autohotkey.com/)这两款非常实用的小工具。\n\n<!--more-->\n\n能有这样的感觉，大概是因为它们都操作基于用户界面，但是在运行时，可以让用户忽略用户界面吧。\n\n无头浏览器有哪些实用的使用场景呢？\n\n# 1. 自动化E2E测试\n常用的E2E测试工具如`nightwatch`,`Karma`，都支持无头浏览器，这样在测试时，无需打开UI界面，即可完成对应的测试内容。\n\n# 2. 解决登录问题\n在使用一些网站API时，会遇到一些网站需要先登录的情况。\n\n标准的网站，允许使用Post方法发送用户名及密码，返回对应的Token，之后的请求即可使用该Token，这时候我们可以直接使用[Request](https://www.npmjs.com/package/request)包即可。\n\n但是遇到一些网站，并没有对外开放API接口，每次请求数据是通过登录后的Cookis进行判断。这时候我们也可以使用Request,截取`Set-Cookie` 头部信息即可。\n\n但是，还有一些网站，在登录时候，需要添加服务器发送给客户端的安全码，这个时候如果单单使用`Request`就有些费力了。\n![识别码](https://cdn.thisjs.com/random.png)\n\n这时，使用无头浏览器可以很好的解决这个问题，这里使用Google Chrome的[puppeteer](https://github.com/GoogleChrome/puppeteer)编写例子。\n\n```js\nconst puppeteer = require('puppeteer');\n\n(async () => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto('http://youruri/api?redirect=anotheruri');  // 进入对应的登录页面\n    /**\n     * 这里测试的页面用户名input为autofocus属性\n     * 不同页面可以使用选择器\n     */\n    await page.type('username');\n    await page.press('Tab');\n    await page.type('password');\n    await page.press('Enter');\n    page.on('response', res => {\n        if(res.hasOwnProperty('headers')){\n            for(let key in res.headers){\n                if(key === 'set-cookie'){\n                   // 在这里进行获取Cookie信息操作\n                }else{\n                    continue;\n                }\n            }\n        }\n    });\n    await page.waitForNavigation();\n    browser.close();\n})();\n```\n简单几步，就可以获取到对应的Cookie信息，将该Cookie信息保存起来，就可以在其他请求中使用了。\n\n# 3. 网络爬虫\n在爬取一些网页时，对于普通的网页，我们可以直接使用Request, 发送GET请求，获取页面内容，然后进行分析，获取其中的数据。\n\n但是这里有一个缺陷，即我们只能获取到网页的HTML内容，无法获取到页面XHR获取到的内容，即我们无法执行页面的JS。\n这就导致我们无法获取那些动态加载的数据，甚至大部分单页面APP。\n\n这时无头浏览器的作用就非常明显了，无头浏览器即没有用户界面的浏览器，浏览器功能全部存在，因此执行JS也不在话下。\n\n## 例：\n\n我们使用Request，get请求知乎某用户的关注列表[https://www.zhihu.com/people/zhang-shu-yuan-18/following](https://www.zhihu.com/people/zhang-shu-yuan-18/following),然后使用[Cheerio](https://www.npmjs.com/package/cheerio)获取关注的用户名。\n```js\nconst request = require('request');\nconst cheerio = require('cheerio');\n\nrequest.get('https://www.zhihu.com/people/zhang-shu-yuan-18/following', (error, res, body) => {\n    const $ = cheerio.load(body);\n    $('.UserLink-link').each((index, item) => {\n        console.log($(item).text());\n    })\n})\n```\n会发现只有三个结果\n```\n柳佳\n李沫霖\nJim Liu\n```\n这是因为剩余的内容需要Ajax加载，这时，我们使用[puppeteer](https://github.com/GoogleChrome/puppeteer)进行获取。\n\n```js\nconst puppeteer = require('puppeteer');\nconst cheerio = require('cheerio');\n(async function () {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto('https://www.zhihu.com/people/zhang-shu-yuan-18/following');\n    let pageContent =await page.content();\n    const $ = cheerio.load(pageContent);\n    $('.UserLink-link').each((index, item) => {\n        console.log($(item).text());\n    })\n    browser.close();\n})()\n```\n这时，一整页的数据全部加在进来了，打印`$('.UserLink-link').length`会发现有40条数据。\n\n> 当然，如果找到了该页面加载用户的API，直接使用该API请求数据是最方便的了\n\n# 4. SSR服务端渲染\n\n由于有些搜索引擎在抓取页面的时候，并不执行页面里的JS，因此会导致很多单页面APP的内容无法被搜索引擎更好的收录。\n\n这时，可以使用无头浏览器，做服务端渲染。在判断访问来路为`XXX-spider`之后，将页面内容，在服务端使用无头浏览器执行一遍，将执行后的HTML内容，返回给搜索引擎，这样搜索引擎就可以获取到执行JS后的内容了。\n\n> 最后，这里收集了一些常用的无头浏览器\n\n* [Phantomjs](http://phantomjs.org/) Webkit内核的无头浏览器，广泛应用于E2E测试\n* [SlimerJS](https://slimerjs.org/) 类似Phantomjs，使用Gecko内核\n* [puppeteer](https://github.com/GoogleChrome/puppeteer) Google Chrome团队推出的，可以直接在node中使用\n\n# 参考资料\n\n* [Headless Browser and scraping](https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions)\n* [使用Nightwatch进行端到端测试](http://www.infoq.com/cn/news/2014/02/nightwatch)\n* [运用phantomjs无头浏览器破解四种反爬虫技术](http://python.jobbole.com/86415/)","source":"_posts/explore-the-headless-browser-application-scenario.md","raw":"---\ntitle: 探索无头浏览器的应用场景\ndate: 2017-09-16 10:27:09\ntags: [无头浏览器, 爬虫]\n---\n\n![自动化操作](https://cdn.thisjs.com/blog/automateexpenses.jpg)\n\n[Headless browser](https://en.wikipedia.org/wiki/Headless_browser)会带给我非常亲切的感觉，因为总能让我回想起[按键精灵](http://www.anjian.com/)和[AutoHotKey](https://www.autohotkey.com/)这两款非常实用的小工具。\n\n<!--more-->\n\n能有这样的感觉，大概是因为它们都操作基于用户界面，但是在运行时，可以让用户忽略用户界面吧。\n\n无头浏览器有哪些实用的使用场景呢？\n\n# 1. 自动化E2E测试\n常用的E2E测试工具如`nightwatch`,`Karma`，都支持无头浏览器，这样在测试时，无需打开UI界面，即可完成对应的测试内容。\n\n# 2. 解决登录问题\n在使用一些网站API时，会遇到一些网站需要先登录的情况。\n\n标准的网站，允许使用Post方法发送用户名及密码，返回对应的Token，之后的请求即可使用该Token，这时候我们可以直接使用[Request](https://www.npmjs.com/package/request)包即可。\n\n但是遇到一些网站，并没有对外开放API接口，每次请求数据是通过登录后的Cookis进行判断。这时候我们也可以使用Request,截取`Set-Cookie` 头部信息即可。\n\n但是，还有一些网站，在登录时候，需要添加服务器发送给客户端的安全码，这个时候如果单单使用`Request`就有些费力了。\n![识别码](https://cdn.thisjs.com/random.png)\n\n这时，使用无头浏览器可以很好的解决这个问题，这里使用Google Chrome的[puppeteer](https://github.com/GoogleChrome/puppeteer)编写例子。\n\n```js\nconst puppeteer = require('puppeteer');\n\n(async () => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto('http://youruri/api?redirect=anotheruri');  // 进入对应的登录页面\n    /**\n     * 这里测试的页面用户名input为autofocus属性\n     * 不同页面可以使用选择器\n     */\n    await page.type('username');\n    await page.press('Tab');\n    await page.type('password');\n    await page.press('Enter');\n    page.on('response', res => {\n        if(res.hasOwnProperty('headers')){\n            for(let key in res.headers){\n                if(key === 'set-cookie'){\n                   // 在这里进行获取Cookie信息操作\n                }else{\n                    continue;\n                }\n            }\n        }\n    });\n    await page.waitForNavigation();\n    browser.close();\n})();\n```\n简单几步，就可以获取到对应的Cookie信息，将该Cookie信息保存起来，就可以在其他请求中使用了。\n\n# 3. 网络爬虫\n在爬取一些网页时，对于普通的网页，我们可以直接使用Request, 发送GET请求，获取页面内容，然后进行分析，获取其中的数据。\n\n但是这里有一个缺陷，即我们只能获取到网页的HTML内容，无法获取到页面XHR获取到的内容，即我们无法执行页面的JS。\n这就导致我们无法获取那些动态加载的数据，甚至大部分单页面APP。\n\n这时无头浏览器的作用就非常明显了，无头浏览器即没有用户界面的浏览器，浏览器功能全部存在，因此执行JS也不在话下。\n\n## 例：\n\n我们使用Request，get请求知乎某用户的关注列表[https://www.zhihu.com/people/zhang-shu-yuan-18/following](https://www.zhihu.com/people/zhang-shu-yuan-18/following),然后使用[Cheerio](https://www.npmjs.com/package/cheerio)获取关注的用户名。\n```js\nconst request = require('request');\nconst cheerio = require('cheerio');\n\nrequest.get('https://www.zhihu.com/people/zhang-shu-yuan-18/following', (error, res, body) => {\n    const $ = cheerio.load(body);\n    $('.UserLink-link').each((index, item) => {\n        console.log($(item).text());\n    })\n})\n```\n会发现只有三个结果\n```\n柳佳\n李沫霖\nJim Liu\n```\n这是因为剩余的内容需要Ajax加载，这时，我们使用[puppeteer](https://github.com/GoogleChrome/puppeteer)进行获取。\n\n```js\nconst puppeteer = require('puppeteer');\nconst cheerio = require('cheerio');\n(async function () {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto('https://www.zhihu.com/people/zhang-shu-yuan-18/following');\n    let pageContent =await page.content();\n    const $ = cheerio.load(pageContent);\n    $('.UserLink-link').each((index, item) => {\n        console.log($(item).text());\n    })\n    browser.close();\n})()\n```\n这时，一整页的数据全部加在进来了，打印`$('.UserLink-link').length`会发现有40条数据。\n\n> 当然，如果找到了该页面加载用户的API，直接使用该API请求数据是最方便的了\n\n# 4. SSR服务端渲染\n\n由于有些搜索引擎在抓取页面的时候，并不执行页面里的JS，因此会导致很多单页面APP的内容无法被搜索引擎更好的收录。\n\n这时，可以使用无头浏览器，做服务端渲染。在判断访问来路为`XXX-spider`之后，将页面内容，在服务端使用无头浏览器执行一遍，将执行后的HTML内容，返回给搜索引擎，这样搜索引擎就可以获取到执行JS后的内容了。\n\n> 最后，这里收集了一些常用的无头浏览器\n\n* [Phantomjs](http://phantomjs.org/) Webkit内核的无头浏览器，广泛应用于E2E测试\n* [SlimerJS](https://slimerjs.org/) 类似Phantomjs，使用Gecko内核\n* [puppeteer](https://github.com/GoogleChrome/puppeteer) Google Chrome团队推出的，可以直接在node中使用\n\n# 参考资料\n\n* [Headless Browser and scraping](https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions)\n* [使用Nightwatch进行端到端测试](http://www.infoq.com/cn/news/2014/02/nightwatch)\n* [运用phantomjs无头浏览器破解四种反爬虫技术](http://python.jobbole.com/86415/)","slug":"explore-the-headless-browser-application-scenario","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvr000h1h2us1a806vi","content":"<p><img src=\"https://cdn.thisjs.com/blog/automateexpenses.jpg\" alt=\"自动化操作\"></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Headless_browser\" target=\"_blank\" rel=\"noopener\">Headless browser</a>会带给我非常亲切的感觉，因为总能让我回想起<a href=\"http://www.anjian.com/\" target=\"_blank\" rel=\"noopener\">按键精灵</a>和<a href=\"https://www.autohotkey.com/\" target=\"_blank\" rel=\"noopener\">AutoHotKey</a>这两款非常实用的小工具。</p>\n<a id=\"more\"></a>\n<p>能有这样的感觉，大概是因为它们都操作基于用户界面，但是在运行时，可以让用户忽略用户界面吧。</p>\n<p>无头浏览器有哪些实用的使用场景呢？</p>\n<h1 id=\"1-自动化E2E测试\"><a href=\"#1-自动化E2E测试\" class=\"headerlink\" title=\"1. 自动化E2E测试\"></a>1. 自动化E2E测试</h1><p>常用的E2E测试工具如<code>nightwatch</code>,<code>Karma</code>，都支持无头浏览器，这样在测试时，无需打开UI界面，即可完成对应的测试内容。</p>\n<h1 id=\"2-解决登录问题\"><a href=\"#2-解决登录问题\" class=\"headerlink\" title=\"2. 解决登录问题\"></a>2. 解决登录问题</h1><p>在使用一些网站API时，会遇到一些网站需要先登录的情况。</p>\n<p>标准的网站，允许使用Post方法发送用户名及密码，返回对应的Token，之后的请求即可使用该Token，这时候我们可以直接使用<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"noopener\">Request</a>包即可。</p>\n<p>但是遇到一些网站，并没有对外开放API接口，每次请求数据是通过登录后的Cookis进行判断。这时候我们也可以使用Request,截取<code>Set-Cookie</code> 头部信息即可。</p>\n<p>但是，还有一些网站，在登录时候，需要添加服务器发送给客户端的安全码，这个时候如果单单使用<code>Request</code>就有些费力了。<br><img src=\"https://cdn.thisjs.com/random.png\" alt=\"识别码\"></p>\n<p>这时，使用无头浏览器可以很好的解决这个问题，这里使用Google Chrome的<a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a>编写例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'http://youruri/api?redirect=anotheruri'</span>);  <span class=\"comment\">// 进入对应的登录页面</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里测试的页面用户名input为autofocus属性</span></span><br><span class=\"line\"><span class=\"comment\">     * 不同页面可以使用选择器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.type(<span class=\"string\">'username'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.press(<span class=\"string\">'Tab'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.type(<span class=\"string\">'password'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.press(<span class=\"string\">'Enter'</span>);</span><br><span class=\"line\">    page.on(<span class=\"string\">'response'</span>, res =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.hasOwnProperty(<span class=\"string\">'headers'</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> res.headers)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key === <span class=\"string\">'set-cookie'</span>)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 在这里进行获取Cookie信息操作</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitForNavigation();</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>简单几步，就可以获取到对应的Cookie信息，将该Cookie信息保存起来，就可以在其他请求中使用了。</p>\n<h1 id=\"3-网络爬虫\"><a href=\"#3-网络爬虫\" class=\"headerlink\" title=\"3. 网络爬虫\"></a>3. 网络爬虫</h1><p>在爬取一些网页时，对于普通的网页，我们可以直接使用Request, 发送GET请求，获取页面内容，然后进行分析，获取其中的数据。</p>\n<p>但是这里有一个缺陷，即我们只能获取到网页的HTML内容，无法获取到页面XHR获取到的内容，即我们无法执行页面的JS。<br>这就导致我们无法获取那些动态加载的数据，甚至大部分单页面APP。</p>\n<p>这时无头浏览器的作用就非常明显了，无头浏览器即没有用户界面的浏览器，浏览器功能全部存在，因此执行JS也不在话下。</p>\n<h2 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a>例：</h2><p>我们使用Request，get请求知乎某用户的关注列表<a href=\"https://www.zhihu.com/people/zhang-shu-yuan-18/following\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/zhang-shu-yuan-18/following</a>,然后使用<a href=\"https://www.npmjs.com/package/cheerio\" target=\"_blank\" rel=\"noopener\">Cheerio</a>获取关注的用户名。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>, (error, res, body) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(body);</span><br><span class=\"line\">    $(<span class=\"string\">'.UserLink-link'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log($(item).text());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>会发现只有三个结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">柳佳</span><br><span class=\"line\">李沫霖</span><br><span class=\"line\">Jim Liu</span><br></pre></td></tr></table></figure></p>\n<p>这是因为剩余的内容需要Ajax加载，这时，我们使用<a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a>进行获取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pageContent =<span class=\"keyword\">await</span> page.content();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(pageContent);</span><br><span class=\"line\">    $(<span class=\"string\">'.UserLink-link'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log($(item).text());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这时，一整页的数据全部加在进来了，打印<code>$(&#39;.UserLink-link&#39;).length</code>会发现有40条数据。</p>\n<blockquote>\n<p>当然，如果找到了该页面加载用户的API，直接使用该API请求数据是最方便的了</p>\n</blockquote>\n<h1 id=\"4-SSR服务端渲染\"><a href=\"#4-SSR服务端渲染\" class=\"headerlink\" title=\"4. SSR服务端渲染\"></a>4. SSR服务端渲染</h1><p>由于有些搜索引擎在抓取页面的时候，并不执行页面里的JS，因此会导致很多单页面APP的内容无法被搜索引擎更好的收录。</p>\n<p>这时，可以使用无头浏览器，做服务端渲染。在判断访问来路为<code>XXX-spider</code>之后，将页面内容，在服务端使用无头浏览器执行一遍，将执行后的HTML内容，返回给搜索引擎，这样搜索引擎就可以获取到执行JS后的内容了。</p>\n<blockquote>\n<p>最后，这里收集了一些常用的无头浏览器</p>\n</blockquote>\n<ul>\n<li><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">Phantomjs</a> Webkit内核的无头浏览器，广泛应用于E2E测试</li>\n<li><a href=\"https://slimerjs.org/\" target=\"_blank\" rel=\"noopener\">SlimerJS</a> 类似Phantomjs，使用Gecko内核</li>\n<li><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a> Google Chrome团队推出的，可以直接在node中使用</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions\" target=\"_blank\" rel=\"noopener\">Headless Browser and scraping</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/02/nightwatch\" target=\"_blank\" rel=\"noopener\">使用Nightwatch进行端到端测试</a></li>\n<li><a href=\"http://python.jobbole.com/86415/\" target=\"_blank\" rel=\"noopener\">运用phantomjs无头浏览器破解四种反爬虫技术</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/blog/automateexpenses.jpg\" alt=\"自动化操作\"></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Headless_browser\" target=\"_blank\" rel=\"noopener\">Headless browser</a>会带给我非常亲切的感觉，因为总能让我回想起<a href=\"http://www.anjian.com/\" target=\"_blank\" rel=\"noopener\">按键精灵</a>和<a href=\"https://www.autohotkey.com/\" target=\"_blank\" rel=\"noopener\">AutoHotKey</a>这两款非常实用的小工具。</p>","more":"<p>能有这样的感觉，大概是因为它们都操作基于用户界面，但是在运行时，可以让用户忽略用户界面吧。</p>\n<p>无头浏览器有哪些实用的使用场景呢？</p>\n<h1 id=\"1-自动化E2E测试\"><a href=\"#1-自动化E2E测试\" class=\"headerlink\" title=\"1. 自动化E2E测试\"></a>1. 自动化E2E测试</h1><p>常用的E2E测试工具如<code>nightwatch</code>,<code>Karma</code>，都支持无头浏览器，这样在测试时，无需打开UI界面，即可完成对应的测试内容。</p>\n<h1 id=\"2-解决登录问题\"><a href=\"#2-解决登录问题\" class=\"headerlink\" title=\"2. 解决登录问题\"></a>2. 解决登录问题</h1><p>在使用一些网站API时，会遇到一些网站需要先登录的情况。</p>\n<p>标准的网站，允许使用Post方法发送用户名及密码，返回对应的Token，之后的请求即可使用该Token，这时候我们可以直接使用<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"noopener\">Request</a>包即可。</p>\n<p>但是遇到一些网站，并没有对外开放API接口，每次请求数据是通过登录后的Cookis进行判断。这时候我们也可以使用Request,截取<code>Set-Cookie</code> 头部信息即可。</p>\n<p>但是，还有一些网站，在登录时候，需要添加服务器发送给客户端的安全码，这个时候如果单单使用<code>Request</code>就有些费力了。<br><img src=\"https://cdn.thisjs.com/random.png\" alt=\"识别码\"></p>\n<p>这时，使用无头浏览器可以很好的解决这个问题，这里使用Google Chrome的<a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a>编写例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'http://youruri/api?redirect=anotheruri'</span>);  <span class=\"comment\">// 进入对应的登录页面</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里测试的页面用户名input为autofocus属性</span></span><br><span class=\"line\"><span class=\"comment\">     * 不同页面可以使用选择器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.type(<span class=\"string\">'username'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.press(<span class=\"string\">'Tab'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.type(<span class=\"string\">'password'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.press(<span class=\"string\">'Enter'</span>);</span><br><span class=\"line\">    page.on(<span class=\"string\">'response'</span>, res =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.hasOwnProperty(<span class=\"string\">'headers'</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> res.headers)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key === <span class=\"string\">'set-cookie'</span>)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 在这里进行获取Cookie信息操作</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitForNavigation();</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>简单几步，就可以获取到对应的Cookie信息，将该Cookie信息保存起来，就可以在其他请求中使用了。</p>\n<h1 id=\"3-网络爬虫\"><a href=\"#3-网络爬虫\" class=\"headerlink\" title=\"3. 网络爬虫\"></a>3. 网络爬虫</h1><p>在爬取一些网页时，对于普通的网页，我们可以直接使用Request, 发送GET请求，获取页面内容，然后进行分析，获取其中的数据。</p>\n<p>但是这里有一个缺陷，即我们只能获取到网页的HTML内容，无法获取到页面XHR获取到的内容，即我们无法执行页面的JS。<br>这就导致我们无法获取那些动态加载的数据，甚至大部分单页面APP。</p>\n<p>这时无头浏览器的作用就非常明显了，无头浏览器即没有用户界面的浏览器，浏览器功能全部存在，因此执行JS也不在话下。</p>\n<h2 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a>例：</h2><p>我们使用Request，get请求知乎某用户的关注列表<a href=\"https://www.zhihu.com/people/zhang-shu-yuan-18/following\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/zhang-shu-yuan-18/following</a>,然后使用<a href=\"https://www.npmjs.com/package/cheerio\" target=\"_blank\" rel=\"noopener\">Cheerio</a>获取关注的用户名。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>, (error, res, body) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(body);</span><br><span class=\"line\">    $(<span class=\"string\">'.UserLink-link'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log($(item).text());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>会发现只有三个结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">柳佳</span><br><span class=\"line\">李沫霖</span><br><span class=\"line\">Jim Liu</span><br></pre></td></tr></table></figure></p>\n<p>这是因为剩余的内容需要Ajax加载，这时，我们使用<a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a>进行获取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'https://www.zhihu.com/people/zhang-shu-yuan-18/following'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pageContent =<span class=\"keyword\">await</span> page.content();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(pageContent);</span><br><span class=\"line\">    $(<span class=\"string\">'.UserLink-link'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log($(item).text());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这时，一整页的数据全部加在进来了，打印<code>$(&#39;.UserLink-link&#39;).length</code>会发现有40条数据。</p>\n<blockquote>\n<p>当然，如果找到了该页面加载用户的API，直接使用该API请求数据是最方便的了</p>\n</blockquote>\n<h1 id=\"4-SSR服务端渲染\"><a href=\"#4-SSR服务端渲染\" class=\"headerlink\" title=\"4. SSR服务端渲染\"></a>4. SSR服务端渲染</h1><p>由于有些搜索引擎在抓取页面的时候，并不执行页面里的JS，因此会导致很多单页面APP的内容无法被搜索引擎更好的收录。</p>\n<p>这时，可以使用无头浏览器，做服务端渲染。在判断访问来路为<code>XXX-spider</code>之后，将页面内容，在服务端使用无头浏览器执行一遍，将执行后的HTML内容，返回给搜索引擎，这样搜索引擎就可以获取到执行JS后的内容了。</p>\n<blockquote>\n<p>最后，这里收集了一些常用的无头浏览器</p>\n</blockquote>\n<ul>\n<li><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">Phantomjs</a> Webkit内核的无头浏览器，广泛应用于E2E测试</li>\n<li><a href=\"https://slimerjs.org/\" target=\"_blank\" rel=\"noopener\">SlimerJS</a> 类似Phantomjs，使用Gecko内核</li>\n<li><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">puppeteer</a> Google Chrome团队推出的，可以直接在node中使用</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions\" target=\"_blank\" rel=\"noopener\">Headless Browser and scraping</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/02/nightwatch\" target=\"_blank\" rel=\"noopener\">使用Nightwatch进行端到端测试</a></li>\n<li><a href=\"http://python.jobbole.com/86415/\" target=\"_blank\" rel=\"noopener\">运用phantomjs无头浏览器破解四种反爬虫技术</a></li>\n</ul>"},{"title":"PHP中获取当前页面的完整URL","date":"2014-04-29T17:30:55.000Z","_content":"除了在javascript中使用`location.href`获取当前浏览地址之外\n还可以使用PHP直接获取网页的地址\n\n<!--more-->\n\n```php\n/获取域名或主机地址   \necho $_SERVER['HTTP_HOST'].\"<br>\"; #localhost  \n  \n//获取网页地址   \necho $_SERVER['PHP_SELF'].\"<br>\"; #/blog/testurl.php  \n  \n//获取网址参数   \necho $_SERVER[\"QUERY_STRING\"].\"<br>\"; #id=5  \n  \n//获取用户代理   \necho $_SERVER['HTTP_REFERER'].\"<br>\";   \n  \n//获取完整的url  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'];  \n#http://localhost/blog/testurl.php?id=5  \n  \n//包含端口号的完整url  \necho 'http://'.$_SERVER['SERVER_NAME'].':'.$_SERVER[\"SERVER_PORT\"].$_SERVER[\"REQUEST_URI\"];   \n#http://localhost:80/blog/testurl.php?id=5  \n  \n//只取路径  \n$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER[\"REQUEST_URI\"];   \necho dirname($url);  \n#http://localhost/blog  \n```","source":"_posts/gets-the-current-php-complete-url-of-the-page.md","raw":"---\ntitle: PHP中获取当前页面的完整URL\ndate: 2014-04-29 17:30:55\ntags: [PHP]\n---\n除了在javascript中使用`location.href`获取当前浏览地址之外\n还可以使用PHP直接获取网页的地址\n\n<!--more-->\n\n```php\n/获取域名或主机地址   \necho $_SERVER['HTTP_HOST'].\"<br>\"; #localhost  \n  \n//获取网页地址   \necho $_SERVER['PHP_SELF'].\"<br>\"; #/blog/testurl.php  \n  \n//获取网址参数   \necho $_SERVER[\"QUERY_STRING\"].\"<br>\"; #id=5  \n  \n//获取用户代理   \necho $_SERVER['HTTP_REFERER'].\"<br>\";   \n  \n//获取完整的url  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];  \necho 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'];  \n#http://localhost/blog/testurl.php?id=5  \n  \n//包含端口号的完整url  \necho 'http://'.$_SERVER['SERVER_NAME'].':'.$_SERVER[\"SERVER_PORT\"].$_SERVER[\"REQUEST_URI\"];   \n#http://localhost:80/blog/testurl.php?id=5  \n  \n//只取路径  \n$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER[\"REQUEST_URI\"];   \necho dirname($url);  \n#http://localhost/blog  \n```","slug":"gets-the-current-php-complete-url-of-the-page","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvu000j1h2u50sv74b0","content":"<p>除了在javascript中使用<code>location.href</code>获取当前浏览地址之外<br>还可以使用PHP直接获取网页的地址</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/获取域名或主机地址   </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#localhost  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取网页地址   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#/blog/testurl.php  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取网址参数   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">\"QUERY_STRING\"</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取用户代理   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_REFERER'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>;   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取完整的url  </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'REQUEST_URI'</span>];  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">'?'</span>.$_SERVER[<span class=\"string\">'QUERY_STRING'</span>];  </span><br><span class=\"line\"><span class=\"comment\">#http://localhost/blog/testurl.php?id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//包含端口号的完整url  </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].<span class=\"string\">':'</span>.$_SERVER[<span class=\"string\">\"SERVER_PORT\"</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </span><br><span class=\"line\"><span class=\"comment\">#http://localhost:80/blog/testurl.php?id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//只取路径  </span></span><br><span class=\"line\">$url=<span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname($url);  </span><br><span class=\"line\"><span class=\"comment\">#http://localhost/blog</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>除了在javascript中使用<code>location.href</code>获取当前浏览地址之外<br>还可以使用PHP直接获取网页的地址</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/获取域名或主机地址   </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#localhost  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取网页地址   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#/blog/testurl.php  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取网址参数   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">\"QUERY_STRING\"</span>].<span class=\"string\">\"&lt;br&gt;\"</span>; <span class=\"comment\">#id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取用户代理   </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_SERVER[<span class=\"string\">'HTTP_REFERER'</span>].<span class=\"string\">\"&lt;br&gt;\"</span>;   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//获取完整的url  </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'REQUEST_URI'</span>];  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].$_SERVER[<span class=\"string\">'PHP_SELF'</span>].<span class=\"string\">'?'</span>.$_SERVER[<span class=\"string\">'QUERY_STRING'</span>];  </span><br><span class=\"line\"><span class=\"comment\">#http://localhost/blog/testurl.php?id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//包含端口号的完整url  </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].<span class=\"string\">':'</span>.$_SERVER[<span class=\"string\">\"SERVER_PORT\"</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </span><br><span class=\"line\"><span class=\"comment\">#http://localhost:80/blog/testurl.php?id=5  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//只取路径  </span></span><br><span class=\"line\">$url=<span class=\"string\">'http://'</span>.$_SERVER[<span class=\"string\">'SERVER_NAME'</span>].$_SERVER[<span class=\"string\">\"REQUEST_URI\"</span>];   </span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname($url);  </span><br><span class=\"line\"><span class=\"comment\">#http://localhost/blog</span></span><br></pre></td></tr></table></figure>"},{"title":"go.js更新远程图片资源","date":"2016-10-27T11:28:44.000Z","_content":"[go.js](http://gojs.net/)允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题\n，需要动态更新当前选中node节点上引用的外部图片资源内容。\n\n我们知道，go.js在更新model时，需要使用Transactions API\n\n<!--more-->\n\n```javascript\n diagram.startTransaction(\"a trans\");\n    // 更新代码\n   \n diagram.commitTransaction(\"a trans\");\n```\n\n首先，获取当前选中节点的方法是\n\n```js\n var selnode = myDiagram.selection.first();\n ```\n\n 之后要进行对应的变化\n\n ```js\n  myDiagram.startTransaction(\"reload node svg\");\n   // 更新图片地址\n  myDiagram.model.setDataProperty(selnode.data, \"source\", \"newSourceUrl\");\n  // 完成 transaction\n  myDiagram.commitTransaction(\"reload node svg\");\n```\n\n**这里要注意两个地方**\n\n`setDataProperty`是作用在`myDiagram.model`上面的方法\n\n`setDataProperty`的第一个参数是`selnode.data`，因为我们变化的是data的数据内容，\n如果只填写`selnode`则会报错\n\n> *GraphLinksModel.setDataProperty is modifying a GraphObject, \"Node#21738(Picture)\" go.js:17\nIs that really your intent?*\n\n\n### 参考资源\n\nhttp://gojs.net/latest/intro/transactions.html\n\nhttps://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2","source":"_posts/go-js-update-remote-image-resources.md","raw":"---\ntitle: go.js更新远程图片资源\ndate: 2016-10-27 11:28:44\ntags: [gojs,javascript]\n---\n[go.js](http://gojs.net/)允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题\n，需要动态更新当前选中node节点上引用的外部图片资源内容。\n\n我们知道，go.js在更新model时，需要使用Transactions API\n\n<!--more-->\n\n```javascript\n diagram.startTransaction(\"a trans\");\n    // 更新代码\n   \n diagram.commitTransaction(\"a trans\");\n```\n\n首先，获取当前选中节点的方法是\n\n```js\n var selnode = myDiagram.selection.first();\n ```\n\n 之后要进行对应的变化\n\n ```js\n  myDiagram.startTransaction(\"reload node svg\");\n   // 更新图片地址\n  myDiagram.model.setDataProperty(selnode.data, \"source\", \"newSourceUrl\");\n  // 完成 transaction\n  myDiagram.commitTransaction(\"reload node svg\");\n```\n\n**这里要注意两个地方**\n\n`setDataProperty`是作用在`myDiagram.model`上面的方法\n\n`setDataProperty`的第一个参数是`selnode.data`，因为我们变化的是data的数据内容，\n如果只填写`selnode`则会报错\n\n> *GraphLinksModel.setDataProperty is modifying a GraphObject, \"Node#21738(Picture)\" go.js:17\nIs that really your intent?*\n\n\n### 参考资源\n\nhttp://gojs.net/latest/intro/transactions.html\n\nhttps://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2","slug":"go-js-update-remote-image-resources","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvw000l1h2ux5ngqw1s","content":"<p><a href=\"http://gojs.net/\" target=\"_blank\" rel=\"noopener\">go.js</a>允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题<br>，需要动态更新当前选中node节点上引用的外部图片资源内容。</p>\n<p>我们知道，go.js在更新model时，需要使用Transactions API</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diagram.startTransaction(<span class=\"string\">\"a trans\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 更新代码</span></span><br><span class=\"line\">  </span><br><span class=\"line\">diagram.commitTransaction(<span class=\"string\">\"a trans\"</span>);</span><br></pre></td></tr></table></figure>\n<p>首先，获取当前选中节点的方法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> selnode = myDiagram.selection.first();</span><br></pre></td></tr></table></figure>\n<p> 之后要进行对应的变化</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.startTransaction(<span class=\"string\">\"reload node svg\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 更新图片地址</span></span><br><span class=\"line\">myDiagram.model.setDataProperty(selnode.data, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"newSourceUrl\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 完成 transaction</span></span><br><span class=\"line\">myDiagram.commitTransaction(<span class=\"string\">\"reload node svg\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>这里要注意两个地方</strong></p>\n<p><code>setDataProperty</code>是作用在<code>myDiagram.model</code>上面的方法</p>\n<p><code>setDataProperty</code>的第一个参数是<code>selnode.data</code>，因为我们变化的是data的数据内容，<br>如果只填写<code>selnode</code>则会报错</p>\n<blockquote>\n<p><em>GraphLinksModel.setDataProperty is modifying a GraphObject, “Node#21738(Picture)” go.js:17<br>Is that really your intent?</em></p>\n</blockquote>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><p><a href=\"http://gojs.net/latest/intro/transactions.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/intro/transactions.html</a></p>\n<p><a href=\"https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2\" target=\"_blank\" rel=\"noopener\">https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://gojs.net/\" target=\"_blank\" rel=\"noopener\">go.js</a>允许用户使用外部的图片资源，但是最近在做项目的时候，遇到了一个问题<br>，需要动态更新当前选中node节点上引用的外部图片资源内容。</p>\n<p>我们知道，go.js在更新model时，需要使用Transactions API</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diagram.startTransaction(<span class=\"string\">\"a trans\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 更新代码</span></span><br><span class=\"line\">  </span><br><span class=\"line\">diagram.commitTransaction(<span class=\"string\">\"a trans\"</span>);</span><br></pre></td></tr></table></figure>\n<p>首先，获取当前选中节点的方法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> selnode = myDiagram.selection.first();</span><br></pre></td></tr></table></figure>\n<p> 之后要进行对应的变化</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.startTransaction(<span class=\"string\">\"reload node svg\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 更新图片地址</span></span><br><span class=\"line\">myDiagram.model.setDataProperty(selnode.data, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"newSourceUrl\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 完成 transaction</span></span><br><span class=\"line\">myDiagram.commitTransaction(<span class=\"string\">\"reload node svg\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>这里要注意两个地方</strong></p>\n<p><code>setDataProperty</code>是作用在<code>myDiagram.model</code>上面的方法</p>\n<p><code>setDataProperty</code>的第一个参数是<code>selnode.data</code>，因为我们变化的是data的数据内容，<br>如果只填写<code>selnode</code>则会报错</p>\n<blockquote>\n<p><em>GraphLinksModel.setDataProperty is modifying a GraphObject, “Node#21738(Picture)” go.js:17<br>Is that really your intent?</em></p>\n</blockquote>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><p><a href=\"http://gojs.net/latest/intro/transactions.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/intro/transactions.html</a></p>\n<p><a href=\"https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2\" target=\"_blank\" rel=\"noopener\">https://forum.nwoods.com/t/binding-picture-source-to-data-uri/5541/2</a></p>"},{"title":"实现元素在父元素中居中的方法","date":"2016-02-02T17:47:10.000Z","_content":"在网页制作中，常常会遇到需要将一个元素水平，垂直居中。  \n最常见的##水平##居中自然是行级元素`text-align:center`,块级元素在父级元素`text-align:center`之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。\n\n<!--more-->\n\n* 第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的`line-height=`元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。\n\n* 第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，`vertical-align: middle;`，设置图片的`vertical-align: middle;`即可\n\n* 第三：对于块级元素的居中，可以使用一下3种方法\n1. 父级元素设置`position:relative`,设置子元素\n    ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    transform:translate(-50%,-50%);\n    ```\n    这个思路也很简单，就是之前常用的\n     ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    margin-top:-图片宽度/2;\n    margin-left:-图片宽度/2;\n    ```\n    使用CSS3的变换，位移图片的一半\n    \n2. 使用弹性盒模型实现居中，父级元素定义为`display:-webkit-box`，设置子元素\n    ```css\n    -webkit-box-pack:center;\n\t-webkit-box-align:center;\n    ```\n    这种的使用范围比较窄\n    \n3. 设置父级元素`position:relative`，设置子元素\n    ```css\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:auto;\n    ```\n    \n**每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择**","source":"_posts/implementation-elements-in-the-parent-element-in-the-method.md","raw":"---\ntitle: 实现元素在父元素中居中的方法\ndate: 2016-02-02 17:47:10\ntags: css\n---\n在网页制作中，常常会遇到需要将一个元素水平，垂直居中。  \n最常见的##水平##居中自然是行级元素`text-align:center`,块级元素在父级元素`text-align:center`之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。\n\n<!--more-->\n\n* 第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的`line-height=`元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。\n\n* 第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，`vertical-align: middle;`，设置图片的`vertical-align: middle;`即可\n\n* 第三：对于块级元素的居中，可以使用一下3种方法\n1. 父级元素设置`position:relative`,设置子元素\n    ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    transform:translate(-50%,-50%);\n    ```\n    这个思路也很简单，就是之前常用的\n     ```css\n    position:absolute;\n    left:50%;\n    top:50%;\n    margin-top:-图片宽度/2;\n    margin-left:-图片宽度/2;\n    ```\n    使用CSS3的变换，位移图片的一半\n    \n2. 使用弹性盒模型实现居中，父级元素定义为`display:-webkit-box`，设置子元素\n    ```css\n    -webkit-box-pack:center;\n\t-webkit-box-align:center;\n    ```\n    这种的使用范围比较窄\n    \n3. 设置父级元素`position:relative`，设置子元素\n    ```css\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:auto;\n    ```\n    \n**每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择**","slug":"implementation-elements-in-the-parent-element-in-the-method","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvx000n1h2ue013iw5o","content":"<p>在网页制作中，常常会遇到需要将一个元素水平，垂直居中。<br>最常见的##水平##居中自然是行级元素<code>text-align:center</code>,块级元素在父级元素<code>text-align:center</code>之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的<code>line-height=</code>元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。</p>\n</li>\n<li><p>第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，<code>vertical-align: middle;</code>，设置图片的<code>vertical-align: middle;</code>即可</p>\n</li>\n<li><p>第三：对于块级元素的居中，可以使用一下3种方法</p>\n</li>\n</ul>\n<ol>\n<li><p>父级元素设置<code>position:relative</code>,设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</span><br></pre></td></tr></table></figure>\n<p> 这个思路也很简单，就是之前常用的</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">margin-top:-图片宽度/2;</span><br><span class=\"line\">margin-left:-图片宽度/2;</span><br></pre></td></tr></table></figure>\n<p> 使用CSS3的变换，位移图片的一半</p>\n</li>\n<li><p>使用弹性盒模型实现居中，父级元素定义为<code>display:-webkit-box</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</span><br></pre></td></tr></table></figure>\n<p> 这种的使用范围比较窄</p>\n</li>\n<li><p>设置父级元素<code>position:relative</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择</strong></p>\n","site":{"data":{}},"excerpt":"<p>在网页制作中，常常会遇到需要将一个元素水平，垂直居中。<br>最常见的##水平##居中自然是行级元素<code>text-align:center</code>,块级元素在父级元素<code>text-align:center</code>之后margin的左右值为auto。但是需要同时垂直居中的话，有以下5种不错的方法。</p>","more":"<ul>\n<li><p>第一：是行级元素的垂直水平居中，一般是文字的垂直居中，这时候，设置文字的<code>line-height=</code>元素的高度即可。这样一行文字就会占用整个容器的高度，自然实现了垂直居中。</p>\n</li>\n<li><p>第二：对于图片元素的垂直居中，首先定义一个空标签，设置高度为100%，宽度为0，<code>vertical-align: middle;</code>，设置图片的<code>vertical-align: middle;</code>即可</p>\n</li>\n<li><p>第三：对于块级元素的居中，可以使用一下3种方法</p>\n</li>\n</ul>\n<ol>\n<li><p>父级元素设置<code>position:relative</code>,设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</span><br></pre></td></tr></table></figure>\n<p> 这个思路也很简单，就是之前常用的</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span><br><span class=\"line\">margin-top:-图片宽度/2;</span><br><span class=\"line\">margin-left:-图片宽度/2;</span><br></pre></td></tr></table></figure>\n<p> 使用CSS3的变换，位移图片的一半</p>\n</li>\n<li><p>使用弹性盒模型实现居中，父级元素定义为<code>display:-webkit-box</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</span><br></pre></td></tr></table></figure>\n<p> 这种的使用范围比较窄</p>\n</li>\n<li><p>设置父级元素<code>position:relative</code>，设置子元素</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>每一种方法都有一些缺点，对于选择哪种，可以根据实际开发进行选择</strong></p>"},{"title":"jQuery弹出Div窗口居中显示、滚动跟随、关闭按钮以及几秒后自动消失","date":"2014-06-18T13:23:02.000Z","_content":"要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。\n\n<!--more-->\n\n```html\n <DIV id=\"closeLayer\"  onClick=\"closeMe()\"><IMG src=\"jiuye/close.gif\" width=\"15\" height=\"13\"></DIV>  \n  <div id =\"jiuye\"><img src=\"jiuye/jiuye1.jpg\" id=\"jiuyeImage\" style=\"cursor:hand\"/></div>  \n  <style type=\"text/css\">  \n  #jiuye{  \n      position:absolute;  \n      left:16px;  \n      top:129px;  \n      width:600px;  \n      height:540px;  \n      z-index:1;  \n        \n  }  \n  #closeLayer{  \n      position:absolute;      \n      left:580px;     \n      top:143px;      \n      width:24px;     \n      height:19px;  \n      z-index:2;  \n  }  \n  </style>  \n<script src=\"jiuye/jquery-1.7.0.js\" type=\"text/javascript\"></script>  \n<script type=\"text/javascript\">  \n    \nfunction closeMe(){  \n    document.getElementById(\"closeLayer\").style.display=\"none\";  \n    document.getElementById(\"jiuye\").style.display=\"none\";  \n    $(window).unbind();  \n}  \n  // 居中  \nfunction center() {  \n    var obj=$(\"#jiuye\");  \n    var closeObj=$(\"#closeLayer\");  \n    var screenWidth = $(window).width(), screenHeight = $(window).height(); //当前浏览器窗口的 宽高  \n    var scrolltop = $(document).scrollTop();//获取当前窗口距离页面顶部高度  \n    var objLeft = (screenWidth - obj.width())/2 ;  \n    var objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n      \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    //浏览器窗口大小改变时  \n    $(window).resize(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n    //浏览器有滚动条时的操作、  \n    $(window).scroll(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n}   \ncenter();  \n$('#closeLayer').show(300).delay(3000).fadeOut(\"slow\");  \n$('#jiuye').show(300).delay(3000).fadeOut(\"slow\",function(){     \n   //隐藏时把元素删除     \n  $(window).unbind();  \n});     \n</script>  \n\n```","source":"_posts/jquery-pop-up-Div-window-center-display.md","raw":"---\ntitle: jQuery弹出Div窗口居中显示、滚动跟随、关闭按钮以及几秒后自动消失\ndate: 2014-06-18 13:23:02\ntags: [jQuery,javascript]\n---\n要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。\n\n<!--more-->\n\n```html\n <DIV id=\"closeLayer\"  onClick=\"closeMe()\"><IMG src=\"jiuye/close.gif\" width=\"15\" height=\"13\"></DIV>  \n  <div id =\"jiuye\"><img src=\"jiuye/jiuye1.jpg\" id=\"jiuyeImage\" style=\"cursor:hand\"/></div>  \n  <style type=\"text/css\">  \n  #jiuye{  \n      position:absolute;  \n      left:16px;  \n      top:129px;  \n      width:600px;  \n      height:540px;  \n      z-index:1;  \n        \n  }  \n  #closeLayer{  \n      position:absolute;      \n      left:580px;     \n      top:143px;      \n      width:24px;     \n      height:19px;  \n      z-index:2;  \n  }  \n  </style>  \n<script src=\"jiuye/jquery-1.7.0.js\" type=\"text/javascript\"></script>  \n<script type=\"text/javascript\">  \n    \nfunction closeMe(){  \n    document.getElementById(\"closeLayer\").style.display=\"none\";  \n    document.getElementById(\"jiuye\").style.display=\"none\";  \n    $(window).unbind();  \n}  \n  // 居中  \nfunction center() {  \n    var obj=$(\"#jiuye\");  \n    var closeObj=$(\"#closeLayer\");  \n    var screenWidth = $(window).width(), screenHeight = $(window).height(); //当前浏览器窗口的 宽高  \n    var scrolltop = $(document).scrollTop();//获取当前窗口距离页面顶部高度  \n    var objLeft = (screenWidth - obj.width())/2 ;  \n    var objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n      \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    //浏览器窗口大小改变时  \n    $(window).resize(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n    //浏览器有滚动条时的操作、  \n    $(window).scroll(function() {  \n    screenWidth = $(window).width();  \n    screenHeight = $(window).height();  \n    scrolltop = $(document).scrollTop();  \n    objLeft = (screenWidth - obj.width())/2 ;  \n    objTop = (screenHeight - obj.height())/2 + scrolltop;  \n    obj.css({left: objLeft + 'px', top: objTop + 'px','display': 'block'});  \n    var closeObjLeft = (screenWidth + obj.width())/2-closeObj.width()-2 ;  \n    var closeObjTop = (screenHeight - obj.height())/2 + scrolltop+12;  \n    closeObj.css({left: closeObjLeft + 'px', top: closeObjTop + 'px','display': 'block'});  \n    });  \n}   \ncenter();  \n$('#closeLayer').show(300).delay(3000).fadeOut(\"slow\");  \n$('#jiuye').show(300).delay(3000).fadeOut(\"slow\",function(){     \n   //隐藏时把元素删除     \n  $(window).unbind();  \n});     \n</script>  \n\n```","slug":"jquery-pop-up-Div-window-center-display","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbvz000p1h2uzrjj8gf5","content":"<p>要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">DIV</span> <span class=\"attr\">id</span>=<span class=\"string\">\"closeLayer\"</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">\"closeMe()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">IMG</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/close.gif\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"15\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"13\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"jiuye\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jiuye1.jpg\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jiuyeImage\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor:hand\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#jiuye</span>&#123;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:16px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:129px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:600px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:540px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">z-index</span><span class=\"selector-pseudo\">:1</span>;  </span></span><br><span class=\"line\">        </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#closeLayer</span>&#123;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;      </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:580px</span>;     </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:143px</span>;      </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:24px</span>;     </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:19px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">z-index</span><span class=\"selector-pseudo\">:2</span>;  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jquery-1.7.0.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span>  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeMe</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeLayer\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jiuye\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).unbind();  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 居中  </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">center</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> obj=$(<span class=\"string\">\"#jiuye\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObj=$(<span class=\"string\">\"#closeLayer\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> screenWidth = $(<span class=\"built_in\">window</span>).width(), screenHeight = $(<span class=\"built_in\">window</span>).height(); <span class=\"comment\">//当前浏览器窗口的 宽高  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();<span class=\"comment\">//获取当前窗口距离页面顶部高度  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </span></span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//浏览器窗口大小改变时  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </span></span><br><span class=\"line\"><span class=\"javascript\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </span></span><br><span class=\"line\">    objLeft = (screenWidth - obj.width())/2 ;  </span><br><span class=\"line\">    objTop = (screenHeight - obj.height())/2 + scrolltop;  </span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//浏览器有滚动条时的操作、  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </span></span><br><span class=\"line\"><span class=\"javascript\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </span></span><br><span class=\"line\">    objLeft = (screenWidth - obj.width())/2 ;  </span><br><span class=\"line\">    objTop = (screenHeight - obj.height())/2 + scrolltop;  </span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">center();  </span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'#closeLayer'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'#jiuye'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"comment\">//隐藏时把元素删除     </span></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"built_in\">window</span>).unbind();  </span></span><br><span class=\"line\">&#125;);     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>要实现一个弹出窗口，在弹出窗口中进行操作，例如帐号的注册，或者用户登录，需要弹出一个窗口。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">DIV</span> <span class=\"attr\">id</span>=<span class=\"string\">\"closeLayer\"</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">\"closeMe()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">IMG</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/close.gif\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"15\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"13\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"jiuye\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jiuye1.jpg\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jiuyeImage\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor:hand\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#jiuye</span>&#123;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:16px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:129px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:600px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:540px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">z-index</span><span class=\"selector-pseudo\">:1</span>;  </span></span><br><span class=\"line\">        </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#closeLayer</span>&#123;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;      </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:580px</span>;     </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:143px</span>;      </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:24px</span>;     </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:19px</span>;  </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">z-index</span><span class=\"selector-pseudo\">:2</span>;  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jiuye/jquery-1.7.0.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span>  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeMe</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeLayer\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jiuye\"</span>).style.display=<span class=\"string\">\"none\"</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).unbind();  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 居中  </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">center</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> obj=$(<span class=\"string\">\"#jiuye\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObj=$(<span class=\"string\">\"#closeLayer\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> screenWidth = $(<span class=\"built_in\">window</span>).width(), screenHeight = $(<span class=\"built_in\">window</span>).height(); <span class=\"comment\">//当前浏览器窗口的 宽高  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();<span class=\"comment\">//获取当前窗口距离页面顶部高度  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> objLeft = (screenWidth - obj.width())/<span class=\"number\">2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> objTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop;  </span></span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//浏览器窗口大小改变时  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </span></span><br><span class=\"line\"><span class=\"javascript\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </span></span><br><span class=\"line\">    objLeft = (screenWidth - obj.width())/2 ;  </span><br><span class=\"line\">    objTop = (screenHeight - obj.height())/2 + scrolltop;  </span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//浏览器有滚动条时的操作、  </span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenWidth = $(<span class=\"built_in\">window</span>).width();  </span></span><br><span class=\"line\"><span class=\"javascript\">    screenHeight = $(<span class=\"built_in\">window</span>).height();  </span></span><br><span class=\"line\"><span class=\"javascript\">    scrolltop = $(<span class=\"built_in\">document</span>).scrollTop();  </span></span><br><span class=\"line\">    objLeft = (screenWidth - obj.width())/2 ;  </span><br><span class=\"line\">    objTop = (screenHeight - obj.height())/2 + scrolltop;  </span><br><span class=\"line\"><span class=\"javascript\">    obj.css(&#123;<span class=\"attr\">left</span>: objLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: objTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjLeft = (screenWidth + obj.width())/<span class=\"number\">2</span>-closeObj.width()<span class=\"number\">-2</span> ;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> closeObjTop = (screenHeight - obj.height())/<span class=\"number\">2</span> + scrolltop+<span class=\"number\">12</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    closeObj.css(&#123;<span class=\"attr\">left</span>: closeObjLeft + <span class=\"string\">'px'</span>, <span class=\"attr\">top</span>: closeObjTop + <span class=\"string\">'px'</span>,<span class=\"string\">'display'</span>: <span class=\"string\">'block'</span>&#125;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">center();  </span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'#closeLayer'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'#jiuye'</span>).show(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeOut(<span class=\"string\">\"slow\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"comment\">//隐藏时把元素删除     </span></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"built_in\">window</span>).unbind();  </span></span><br><span class=\"line\">&#125;);     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"js判断图片是否加载完成并获取图片的宽度","date":"2014-06-15T19:28:09.000Z","_content":"在使用[turnJS](http://www.turnjs.com/)的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。\n\n<!--more-->\n\n* 第一中方法，通过onload事件，比如：\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"https://cdn.thisjs.com/github/ngFilter.jpg\";\nobj.onload=function(){\n\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```\n* 第二种方法，使用 onreadystatechange 来判断\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"https://cdn.thisjs.com/github/ngFilter.jpg\";\nobj.onreadystatechange=function(){\n\tif(this.readyState==\"complete\"){\n\t\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\t\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n\t}\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```","source":"_posts/js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture.md","raw":"---\ntitle: js判断图片是否加载完成并获取图片的宽度\ndate: 2014-06-15 19:28:09\ntags: javascript\n---\n在使用[turnJS](http://www.turnjs.com/)的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。\n\n<!--more-->\n\n* 第一中方法，通过onload事件，比如：\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"https://cdn.thisjs.com/github/ngFilter.jpg\";\nobj.onload=function(){\n\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```\n* 第二种方法，使用 onreadystatechange 来判断\n```html\n<script type=\"text/javascript\">\nvar obj=new Image();\nobj.src=\"https://cdn.thisjs.com/github/ngFilter.jpg\";\nobj.onreadystatechange=function(){\n\tif(this.readyState==\"complete\"){\n\t\talert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);\n\t\tdocument.getElementById(\"mypic\").innnerHTML=\"<img src='\"+this.src+\"' />\";\n\t}\n}\n</script>\n<div id=\"mypic\">onloading……</div>\n```","slug":"js-to-determine-whether-the-image-is-loaded-and-get-the-width-of-the-picture","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbw0000r1h2ugy702qll","content":"<p>在使用<a href=\"http://www.turnjs.com/\" target=\"_blank\" rel=\"noopener\">turnJS</a>的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>第一中方法，通过onload事件，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">obj.src=<span class=\"string\">\"https://cdn.thisjs.com/github/ngFilter.jpg\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">obj.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法，使用 onreadystatechange 来判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">obj.src=<span class=\"string\">\"https://cdn.thisjs.com/github/ngFilter.jpg\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">obj.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState==<span class=\"string\">\"complete\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在使用<a href=\"http://www.turnjs.com/\" target=\"_blank\" rel=\"noopener\">turnJS</a>的时候，遇到了加载的图片大小撑破了界面的问题，所以采取了一些方法来解决获取到图片的宽度不一的情况，js处理图片主要是利用javascript中Image对象，通过 onload 事件和 onreadystatechange 来进行判断。</p>","more":"<ul>\n<li><p>第一中方法，通过onload事件，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">obj.src=<span class=\"string\">\"https://cdn.thisjs.com/github/ngFilter.jpg\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">obj.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法，使用 onreadystatechange 来判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">obj.src=<span class=\"string\">\"https://cdn.thisjs.com/github/ngFilter.jpg\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">obj.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState==<span class=\"string\">\"complete\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\talert(<span class=\"string\">'图片的宽度为：'</span>+obj.width+<span class=\"string\">'；图片的高度为：'</span>+obj.height);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mypic\"</span>).innnerHTML=<span class=\"string\">\"&lt;img src='\"</span>+<span class=\"keyword\">this</span>.src+<span class=\"string\">\"' /&gt;\"</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mypic\"</span>&gt;</span>onloading……<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"JSP生成有彩色条纹的验证码","date":"2013-07-21T16:31:15.000Z","_content":"使用jsp直接生成有彩色条纹的验证码，代码如下\n\n<!--more-->\n\n```jsp\n<%@ page contentType=\"image/jpeg\" import=\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\" %>\n<%!\nColor getRandColor(int fc,int bc){//给定范围获得随机颜色\nRandom random = new Random();\nif(fc>255) fc=255;\nif(bc>255) bc=255;\nint r=fc+random.nextInt(bc-fc);\nint g=fc+random.nextInt(bc-fc);\nint b=fc+random.nextInt(bc-fc);\nreturn new Color(r,g,b);\n}\n%>\n<%\n//设置页面不缓存\nresponse.setHeader(\"Pragma\",\"No-cache\");\nresponse.setHeader(\"Cache-Control\",\"no-cache\");\nresponse.setDateHeader(\"Expires\", 0);\n\n// 在内存中创建图象\nint width=60, height=20;\nBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n// 获取图形上下文\nGraphics g = image.getGraphics();\n\n//生成随机类\nRandom random = new Random();\n\n// 设定背景色\ng.setColor(getRandColor(200,250));\ng.fillRect(0, 0, width, height);\n\n//设定字体\ng.setFont(new Font(\"Times New Roman\",Font.PLAIN,18));\n\n//画边框\ng.setColor(new Color(255,255,255));\ng.drawRect(0,0,width-1,height-1);\n\n// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到\ng.setColor(getRandColor(160,200));\nfor (int i=0;i<155;i++)\n{\nint x = random.nextInt(width);\nint y = random.nextInt(height);\nint xl = random.nextInt(12);\nint yl = random.nextInt(12);\ng.drawLine(x,y,x+xl,y+yl);\n}\n\n// 取随机产生的认证码(4位数字)\nString sRand=\"\";\nfor (int i=0;i<4;i++){\nString rand=String.valueOf(random.nextInt(10));\nsRand+=rand;\n// 将认证码显示到图象中\ng.setColor(new Color(20+random.nextInt(110),20+random.nextInt(110),20+random.nextInt(110)));\n//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成\ng.drawString(rand,13*i+6,16);\n}\n\n// 将认证码存入SESSION\nsession.setAttribute(\"rand\",sRand);\n\n// 图象生效\ng.dispose();\n\n// 输出图象到页面\nImageIO.write(image, \"JPEG\", response.getOutputStream());\n\n%>\n```","source":"_posts/jsp-generates-a-color-stripe-verification-code.md","raw":"---\ntitle: JSP生成有彩色条纹的验证码\ndate: 2013-07-21 16:31:15\ntags: [jsp]\n---\n使用jsp直接生成有彩色条纹的验证码，代码如下\n\n<!--more-->\n\n```jsp\n<%@ page contentType=\"image/jpeg\" import=\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\" %>\n<%!\nColor getRandColor(int fc,int bc){//给定范围获得随机颜色\nRandom random = new Random();\nif(fc>255) fc=255;\nif(bc>255) bc=255;\nint r=fc+random.nextInt(bc-fc);\nint g=fc+random.nextInt(bc-fc);\nint b=fc+random.nextInt(bc-fc);\nreturn new Color(r,g,b);\n}\n%>\n<%\n//设置页面不缓存\nresponse.setHeader(\"Pragma\",\"No-cache\");\nresponse.setHeader(\"Cache-Control\",\"no-cache\");\nresponse.setDateHeader(\"Expires\", 0);\n\n// 在内存中创建图象\nint width=60, height=20;\nBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n// 获取图形上下文\nGraphics g = image.getGraphics();\n\n//生成随机类\nRandom random = new Random();\n\n// 设定背景色\ng.setColor(getRandColor(200,250));\ng.fillRect(0, 0, width, height);\n\n//设定字体\ng.setFont(new Font(\"Times New Roman\",Font.PLAIN,18));\n\n//画边框\ng.setColor(new Color(255,255,255));\ng.drawRect(0,0,width-1,height-1);\n\n// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到\ng.setColor(getRandColor(160,200));\nfor (int i=0;i<155;i++)\n{\nint x = random.nextInt(width);\nint y = random.nextInt(height);\nint xl = random.nextInt(12);\nint yl = random.nextInt(12);\ng.drawLine(x,y,x+xl,y+yl);\n}\n\n// 取随机产生的认证码(4位数字)\nString sRand=\"\";\nfor (int i=0;i<4;i++){\nString rand=String.valueOf(random.nextInt(10));\nsRand+=rand;\n// 将认证码显示到图象中\ng.setColor(new Color(20+random.nextInt(110),20+random.nextInt(110),20+random.nextInt(110)));\n//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成\ng.drawString(rand,13*i+6,16);\n}\n\n// 将认证码存入SESSION\nsession.setAttribute(\"rand\",sRand);\n\n// 图象生效\ng.dispose();\n\n// 输出图象到页面\nImageIO.write(image, \"JPEG\", response.getOutputStream());\n\n%>\n```","slug":"jsp-generates-a-color-stripe-verification-code","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbw2000t1h2ula3vbg8f","content":"<p>使用jsp直接生成有彩色条纹的验证码，代码如下</p>\n<a id=\"more\"></a>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"image/jpeg\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\"</span> %&gt;</span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\"><span class=\"function\">Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc,<span class=\"keyword\">int</span> bc)</span></span>&#123;<span class=\"comment\">//给定范围获得随机颜色</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(fc&gt;<span class=\"number\">255</span>) fc=<span class=\"number\">255</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(bc&gt;<span class=\"number\">255</span>) bc=<span class=\"number\">255</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> r=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">int</span> g=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r,g,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"comment\">//设置页面不缓存</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Pragma\"</span>,<span class=\"string\">\"No-cache\"</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Cache-Control\"</span>,<span class=\"string\">\"no-cache\"</span>);</span><br><span class=\"line\">response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在内存中创建图象</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> width=<span class=\"number\">60</span>, height=<span class=\"number\">20</span>;</span><br><span class=\"line\">BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取图形上下文</span></span><br><span class=\"line\">Graphics g = image.getGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成随机类</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定背景色</span></span><br><span class=\"line\">g.setColor(getRandColor(<span class=\"number\">200</span>,<span class=\"number\">250</span>));</span><br><span class=\"line\">g.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设定字体</span></span><br><span class=\"line\">g.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"Times New Roman\"</span>,Font.PLAIN,<span class=\"number\">18</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//画边框</span></span><br><span class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>));</span><br><span class=\"line\">g.drawRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width-<span class=\"number\">1</span>,height-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></span><br><span class=\"line\">g.setColor(getRandColor(<span class=\"number\">160</span>,<span class=\"number\">200</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">155</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x = random.nextInt(width);</span><br><span class=\"line\"><span class=\"keyword\">int</span> y = random.nextInt(height);</span><br><span class=\"line\"><span class=\"keyword\">int</span> xl = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> yl = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">g.drawLine(x,y,x+xl,y+yl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取随机产生的认证码(4位数字)</span></span><br><span class=\"line\">String sRand=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">String rand=String.valueOf(random.nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">sRand+=rand;</span><br><span class=\"line\"><span class=\"comment\">// 将认证码显示到图象中</span></span><br><span class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>)));</span><br><span class=\"line\"><span class=\"comment\">//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></span><br><span class=\"line\">g.drawString(rand,<span class=\"number\">13</span>*i+<span class=\"number\">6</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将认证码存入SESSION</span></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"rand\"</span>,sRand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 图象生效</span></span><br><span class=\"line\">g.dispose();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出图象到页面</span></span><br><span class=\"line\">ImageIO.write(image, <span class=\"string\">\"JPEG\"</span>, response.getOutputStream());</span><br><span class=\"line\"></span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>使用jsp直接生成有彩色条纹的验证码，代码如下</p>","more":"<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"image/jpeg\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.awt.*,java.awt.image.*,java.util.*,javax.imageio.*\"</span> %&gt;</span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\"><span class=\"function\">Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc,<span class=\"keyword\">int</span> bc)</span></span>&#123;<span class=\"comment\">//给定范围获得随机颜色</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(fc&gt;<span class=\"number\">255</span>) fc=<span class=\"number\">255</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(bc&gt;<span class=\"number\">255</span>) bc=<span class=\"number\">255</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> r=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">int</span> g=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b=fc+random.nextInt(bc-fc);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r,g,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"comment\">//设置页面不缓存</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Pragma\"</span>,<span class=\"string\">\"No-cache\"</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Cache-Control\"</span>,<span class=\"string\">\"no-cache\"</span>);</span><br><span class=\"line\">response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在内存中创建图象</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> width=<span class=\"number\">60</span>, height=<span class=\"number\">20</span>;</span><br><span class=\"line\">BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取图形上下文</span></span><br><span class=\"line\">Graphics g = image.getGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成随机类</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定背景色</span></span><br><span class=\"line\">g.setColor(getRandColor(<span class=\"number\">200</span>,<span class=\"number\">250</span>));</span><br><span class=\"line\">g.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设定字体</span></span><br><span class=\"line\">g.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"Times New Roman\"</span>,Font.PLAIN,<span class=\"number\">18</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//画边框</span></span><br><span class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>));</span><br><span class=\"line\">g.drawRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width-<span class=\"number\">1</span>,height-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></span><br><span class=\"line\">g.setColor(getRandColor(<span class=\"number\">160</span>,<span class=\"number\">200</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">155</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x = random.nextInt(width);</span><br><span class=\"line\"><span class=\"keyword\">int</span> y = random.nextInt(height);</span><br><span class=\"line\"><span class=\"keyword\">int</span> xl = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> yl = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">g.drawLine(x,y,x+xl,y+yl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取随机产生的认证码(4位数字)</span></span><br><span class=\"line\">String sRand=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">String rand=String.valueOf(random.nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">sRand+=rand;</span><br><span class=\"line\"><span class=\"comment\">// 将认证码显示到图象中</span></span><br><span class=\"line\">g.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>),<span class=\"number\">20</span>+random.nextInt(<span class=\"number\">110</span>)));</span><br><span class=\"line\"><span class=\"comment\">//调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></span><br><span class=\"line\">g.drawString(rand,<span class=\"number\">13</span>*i+<span class=\"number\">6</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将认证码存入SESSION</span></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"rand\"</span>,sRand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 图象生效</span></span><br><span class=\"line\">g.dispose();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出图象到页面</span></span><br><span class=\"line\">ImageIO.write(image, <span class=\"string\">\"JPEG\"</span>, response.getOutputStream());</span><br><span class=\"line\"></span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>"},{"title":"让vs2015忽略某个文件夹","date":"2017-02-24T10:09:28.000Z","_content":"\n<img src=\"https://cdn.thisjs.com/thisjs/images.png\" width=\"500\" alt=\"Vs2015\" />\n\n在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。\n但是`node_modules`，`bower_components`的文件夹嵌套，会严重影响扫描的速度\n\n<!--more-->\n\n暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录\n\n","source":"_posts/let-vs-2015-ignore-a-folder.md","raw":"---\ntitle: 让vs2015忽略某个文件夹\ndate: 2017-02-24 10:09:28\ntags: [vs2015,开发工具]\n---\n\n<img src=\"https://cdn.thisjs.com/thisjs/images.png\" width=\"500\" alt=\"Vs2015\" />\n\n在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。\n但是`node_modules`，`bower_components`的文件夹嵌套，会严重影响扫描的速度\n\n<!--more-->\n\n暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录\n\n","slug":"let-vs-2015-ignore-a-folder","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbw3000w1h2ufh635oux","content":"<p><img src=\"https://cdn.thisjs.com/thisjs/images.png\" width=\"500\" alt=\"Vs2015\"></p>\n<p>在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。<br>但是<code>node_modules</code>，<code>bower_components</code>的文件夹嵌套，会严重影响扫描的速度</p>\n<a id=\"more\"></a>\n<p>暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/thisjs/images.png\" width=\"500\" alt=\"Vs2015\"></p>\n<p>在使用vs2015开发前端项目的时候，将整个网站项目引用进解决方案之后，软件会扫描全部的文件夹。<br>但是<code>node_modules</code>，<code>bower_components</code>的文件夹嵌套，会严重影响扫描的速度</p>","more":"<p>暂时的解决方案是，将不需要被扫描的文件夹隐藏即可，但是要取消掉隐藏二级目录</p>"},{"title":"管理github上的Star","date":"2016-11-28T10:29:51.000Z","_content":"\n![github](https://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png)\n\nGithub Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，\n查找自己的star就会非常的方便。\n\n<!--more-->\n\n第一个不错的网站是[AStral](https://astralapp.com/)，非常漂亮的界面，可以直接浏览\n项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。\n\n![astral](https://astralapp.com/dist/images/features-overview.png)\n\n>地址 https://astralapp.com/\n\n第二个网站是[gitconstellation](http://gitconstellation.com/),简洁的界面，可以添加分类以及标签，管理方便\n\n![gitStar](https://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png)\n\n>地址 http://gitconstellation.com/\n\n第三个是一个app，[OhMyStar](http://www.ohmystarapp.com/)，但是只有苹果系统可以用。\n\n![gitStar](https://www.ohmystarapp.com/images/oms-app-bg.png)\n\n> 地址 http://www.ohmystarapp.com/","source":"_posts/manage-the-star-on-the-lot.md","raw":"---\ntitle: 管理github上的Star\ndate: 2016-11-28 10:29:51\ntags: [应用,工具]\n---\n\n![github](https://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png)\n\nGithub Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，\n查找自己的star就会非常的方便。\n\n<!--more-->\n\n第一个不错的网站是[AStral](https://astralapp.com/)，非常漂亮的界面，可以直接浏览\n项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。\n\n![astral](https://astralapp.com/dist/images/features-overview.png)\n\n>地址 https://astralapp.com/\n\n第二个网站是[gitconstellation](http://gitconstellation.com/),简洁的界面，可以添加分类以及标签，管理方便\n\n![gitStar](https://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png)\n\n>地址 http://gitconstellation.com/\n\n第三个是一个app，[OhMyStar](http://www.ohmystarapp.com/)，但是只有苹果系统可以用。\n\n![gitStar](https://www.ohmystarapp.com/images/oms-app-bg.png)\n\n> 地址 http://www.ohmystarapp.com/","slug":"manage-the-star-on-the-lot","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbw9000y1h2ux2ab6fnp","content":"<p><img src=\"https://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png\" alt=\"github\"></p>\n<p>Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，<br>查找自己的star就会非常的方便。</p>\n<a id=\"more\"></a>\n<p>第一个不错的网站是<a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"noopener\">AStral</a>，非常漂亮的界面，可以直接浏览<br>项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。</p>\n<p><img src=\"https://astralapp.com/dist/images/features-overview.png\" alt=\"astral\"></p>\n<blockquote>\n<p>地址 <a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"noopener\">https://astralapp.com/</a></p>\n</blockquote>\n<p>第二个网站是<a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"noopener\">gitconstellation</a>,简洁的界面，可以添加分类以及标签，管理方便</p>\n<p><img src=\"https://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"noopener\">http://gitconstellation.com/</a></p>\n</blockquote>\n<p>第三个是一个app，<a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"noopener\">OhMyStar</a>，但是只有苹果系统可以用。</p>\n<p><img src=\"https://www.ohmystarapp.com/images/oms-app-bg.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"noopener\">http://www.ohmystarapp.com/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://7u2t66.com1.z0.glb.clouddn.com/github/stargit.png\" alt=\"github\"></p>\n<p>Github Star很多项目之后，下次再寻找就会非常的麻烦，所以需要一些工具来帮我们进行分类管理，<br>查找自己的star就会非常的方便。</p>","more":"<p>第一个不错的网站是<a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"noopener\">AStral</a>，非常漂亮的界面，可以直接浏览<br>项目的Readme文档，查看介绍非常方便，可以为每个项目添加标签以及介绍，分类方便。</p>\n<p><img src=\"https://astralapp.com/dist/images/features-overview.png\" alt=\"astral\"></p>\n<blockquote>\n<p>地址 <a href=\"https://astralapp.com/\" target=\"_blank\" rel=\"noopener\">https://astralapp.com/</a></p>\n</blockquote>\n<p>第二个网站是<a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"noopener\">gitconstellation</a>,简洁的界面，可以添加分类以及标签，管理方便</p>\n<p><img src=\"https://7u2t66.com1.z0.glb.clouddn.com/github/stargitstar2.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://gitconstellation.com/\" target=\"_blank\" rel=\"noopener\">http://gitconstellation.com/</a></p>\n</blockquote>\n<p>第三个是一个app，<a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"noopener\">OhMyStar</a>，但是只有苹果系统可以用。</p>\n<p><img src=\"https://www.ohmystarapp.com/images/oms-app-bg.png\" alt=\"gitStar\"></p>\n<blockquote>\n<p>地址 <a href=\"http://www.ohmystarapp.com/\" target=\"_blank\" rel=\"noopener\">http://www.ohmystarapp.com/</a></p>\n</blockquote>"},{"title":"移动应用展示收纳效果","date":"2017-04-24T16:51:55.000Z","_content":"\n<img src=\"https://cdn.thisjs.com/demo/phone/appshowcase.png\" alt=\"手机展示效果\" title=\"手机展示效果\" />\n\n最近在阅读[Codrops][1]时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。\n\n<!--more-->\n\n整体思路不是很复杂，即旋转整体，展示图片\n\n主要用到的CSS3属性有\n\n* [perspective][2]  // 这是为了让手机旋转的时候，有3D效果\n* [perspective-origin][3]  // 设置观察消失点\n* transition // 设置过渡效果\n* transform  // 变换\n\n## 整个手机设备的transform效果\n\n```css\ntransform: rotateY(50deg) rotateX(20deg) translateZ(-$dv-height/2 + $depth);\n```\n\n## 宣传图像的变换效果\n\n```css\n@for $i from 1 through 5 {\n\t.expand-view .page-#{$i} {\n\t\ttransform: translateZ($depth/2 + $screengap * $i);\n\t}\n}\n```\n\n## 为图像添加鼠标滑过效果\n\n> 在页面展开之后，鼠标滑过每个图层，其他图层透明度为0.1\n\n1. 获取鼠标滑过的图层的兄弟节点，设置他们的style\n\n```js\nArray.prototype.filter.call(el.parentNode.children, function(child){\n  return child !== el;\n});\n```\n2. 为鼠标滑过的图层添加`active` Class，通过css :not()选择器，选择非`.active` Class的元素，设置他们的透明度\n\n这里采用的是**第二种**方法。\n\n## 最终效果预览\n\n<script async src=\"//jsrun.net/YxkKp/embed/all/light/\"></script>\n\n\n[1]: (https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)\n[2]: (https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective)\n[3]: (https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin)","source":"_posts/mobile-app-showcase-effect.md","raw":"---\ntitle: 移动应用展示收纳效果\ndate: 2017-04-24 16:51:55\ntags: css3\n---\n\n<img src=\"https://cdn.thisjs.com/demo/phone/appshowcase.png\" alt=\"手机展示效果\" title=\"手机展示效果\" />\n\n最近在阅读[Codrops][1]时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。\n\n<!--more-->\n\n整体思路不是很复杂，即旋转整体，展示图片\n\n主要用到的CSS3属性有\n\n* [perspective][2]  // 这是为了让手机旋转的时候，有3D效果\n* [perspective-origin][3]  // 设置观察消失点\n* transition // 设置过渡效果\n* transform  // 变换\n\n## 整个手机设备的transform效果\n\n```css\ntransform: rotateY(50deg) rotateX(20deg) translateZ(-$dv-height/2 + $depth);\n```\n\n## 宣传图像的变换效果\n\n```css\n@for $i from 1 through 5 {\n\t.expand-view .page-#{$i} {\n\t\ttransform: translateZ($depth/2 + $screengap * $i);\n\t}\n}\n```\n\n## 为图像添加鼠标滑过效果\n\n> 在页面展开之后，鼠标滑过每个图层，其他图层透明度为0.1\n\n1. 获取鼠标滑过的图层的兄弟节点，设置他们的style\n\n```js\nArray.prototype.filter.call(el.parentNode.children, function(child){\n  return child !== el;\n});\n```\n2. 为鼠标滑过的图层添加`active` Class，通过css :not()选择器，选择非`.active` Class的元素，设置他们的透明度\n\n这里采用的是**第二种**方法。\n\n## 最终效果预览\n\n<script async src=\"//jsrun.net/YxkKp/embed/all/light/\"></script>\n\n\n[1]: (https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)\n[2]: (https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective)\n[3]: (https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin)","slug":"mobile-app-showcase-effect","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwa00101h2ul80u8j4m","content":"<p><img src=\"https://cdn.thisjs.com/demo/phone/appshowcase.png\" alt=\"手机展示效果\" title=\"手机展示效果\"></p>\n<p>最近在阅读<a href=\"(https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)\">Codrops</a>时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。</p>\n<a id=\"more\"></a>\n<p>整体思路不是很复杂，即旋转整体，展示图片</p>\n<p>主要用到的CSS3属性有</p>\n<ul>\n<li><a href=\"(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective)\">perspective</a>  // 这是为了让手机旋转的时候，有3D效果</li>\n<li><a href=\"(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin)\">perspective-origin</a>  // 设置观察消失点</li>\n<li>transition // 设置过渡效果</li>\n<li>transform  // 变换</li>\n</ul>\n<h2 id=\"整个手机设备的transform效果\"><a href=\"#整个手机设备的transform效果\" class=\"headerlink\" title=\"整个手机设备的transform效果\"></a>整个手机设备的transform效果</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform: rotateY(50deg) rotateX(20deg) translateZ(-$dv-height/2 + $depth);</span><br></pre></td></tr></table></figure>\n<h2 id=\"宣传图像的变换效果\"><a href=\"#宣传图像的变换效果\" class=\"headerlink\" title=\"宣传图像的变换效果\"></a>宣传图像的变换效果</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t.expand-view .page-#&#123;$i&#125; &#123;</span><br><span class=\"line\">\t\ttransform: translateZ($depth/2 + $screengap * $i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为图像添加鼠标滑过效果\"><a href=\"#为图像添加鼠标滑过效果\" class=\"headerlink\" title=\"为图像添加鼠标滑过效果\"></a>为图像添加鼠标滑过效果</h2><blockquote>\n<p>在页面展开之后，鼠标滑过每个图层，其他图层透明度为0.1</p>\n</blockquote>\n<ol>\n<li>获取鼠标滑过的图层的兄弟节点，设置他们的style</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.filter.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child !== el;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>为鼠标滑过的图层添加<code>active</code> Class，通过css :not()选择器，选择非<code>.active</code> Class的元素，设置他们的透明度</li>\n</ol>\n<p>这里采用的是<strong>第二种</strong>方法。</p>\n<h2 id=\"最终效果预览\"><a href=\"#最终效果预览\" class=\"headerlink\" title=\"最终效果预览\"></a>最终效果预览</h2><script async src=\"//jsrun.net/YxkKp/embed/all/light/\"></script>\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/demo/phone/appshowcase.png\" alt=\"手机展示效果\" title=\"手机展示效果\"></p>\n<p>最近在阅读<a href=\"(https://tympanus.net/codrops/2013/08/01/3d-effect-for-mobile-app-showcase/)\">Codrops</a>时，遇到了一个不错的手机APP效果，想着可以用在视差滚动宣传页中，便尝试着也制作了一下。</p>","more":"<p>整体思路不是很复杂，即旋转整体，展示图片</p>\n<p>主要用到的CSS3属性有</p>\n<ul>\n<li><a href=\"(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective)\">perspective</a>  // 这是为了让手机旋转的时候，有3D效果</li>\n<li><a href=\"(https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin)\">perspective-origin</a>  // 设置观察消失点</li>\n<li>transition // 设置过渡效果</li>\n<li>transform  // 变换</li>\n</ul>\n<h2 id=\"整个手机设备的transform效果\"><a href=\"#整个手机设备的transform效果\" class=\"headerlink\" title=\"整个手机设备的transform效果\"></a>整个手机设备的transform效果</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform: rotateY(50deg) rotateX(20deg) translateZ(-$dv-height/2 + $depth);</span><br></pre></td></tr></table></figure>\n<h2 id=\"宣传图像的变换效果\"><a href=\"#宣传图像的变换效果\" class=\"headerlink\" title=\"宣传图像的变换效果\"></a>宣传图像的变换效果</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t.expand-view .page-#&#123;$i&#125; &#123;</span><br><span class=\"line\">\t\ttransform: translateZ($depth/2 + $screengap * $i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为图像添加鼠标滑过效果\"><a href=\"#为图像添加鼠标滑过效果\" class=\"headerlink\" title=\"为图像添加鼠标滑过效果\"></a>为图像添加鼠标滑过效果</h2><blockquote>\n<p>在页面展开之后，鼠标滑过每个图层，其他图层透明度为0.1</p>\n</blockquote>\n<ol>\n<li>获取鼠标滑过的图层的兄弟节点，设置他们的style</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.filter.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child !== el;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>为鼠标滑过的图层添加<code>active</code> Class，通过css :not()选择器，选择非<code>.active</code> Class的元素，设置他们的透明度</li>\n</ol>\n<p>这里采用的是<strong>第二种</strong>方法。</p>\n<h2 id=\"最终效果预览\"><a href=\"#最终效果预览\" class=\"headerlink\" title=\"最终效果预览\"></a>最终效果预览</h2><script async src=\"//jsrun.net/YxkKp/embed/all/light/\"></script>"},{"title":"MongoDB在x86系统上的启动错误解决","date":"2016-04-05T14:12:53.000Z","_content":"\n在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。\n\n在对应的bin目录启动MongoDB服务\n\n> mongod.exe --dbpath  C:\\database\\db\n\n<!--more-->\n\n但是启动出现了错误，提示了\n\n`Cannot start server. The default storage engine 'wiredTiger' is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -`\n\n原来是默认的wiredTiger引擎不支持x86系统\n\n在官方网站上就有对应的说明\n\n> Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.\n\n这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入`--storageEngine=mmapv1\n`就可以了\n\n所以完整的启动服务方法就是\n\n`mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1`","source":"_posts/mongo-on-x-86-system-startup-errors.md","raw":"---\ntitle: MongoDB在x86系统上的启动错误解决\ndate: 2016-04-05 14:12:53\ntags: MongoDB\n---\n\n在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。\n\n在对应的bin目录启动MongoDB服务\n\n> mongod.exe --dbpath  C:\\database\\db\n\n<!--more-->\n\n但是启动出现了错误，提示了\n\n`Cannot start server. The default storage engine 'wiredTiger' is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -`\n\n原来是默认的wiredTiger引擎不支持x86系统\n\n在官方网站上就有对应的说明\n\n> Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.\n\n这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入`--storageEngine=mmapv1\n`就可以了\n\n所以完整的启动服务方法就是\n\n`mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1`","slug":"mongo-on-x-86-system-startup-errors","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwc00131h2ux84myx3q","content":"<p>在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。</p>\n<p>在对应的bin目录启动MongoDB服务</p>\n<blockquote>\n<p>mongod.exe –dbpath  C:\\database\\db</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>但是启动出现了错误，提示了</p>\n<p><code>Cannot start server. The default storage engine &#39;wiredTiger&#39; is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -</code></p>\n<p>原来是默认的wiredTiger引擎不支持x86系统</p>\n<p>在官方网站上就有对应的说明</p>\n<blockquote>\n<p>Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.</p>\n</blockquote>\n<p>这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入<code>--storageEngine=mmapv1</code>就可以了</p>\n<p>所以完整的启动服务方法就是</p>\n<p><code>mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1</code></p>\n","site":{"data":{}},"excerpt":"<p>在帮别人的电脑上安装MongoDB的时候，发现出现了无法启动服务的错误。</p>\n<p>在对应的bin目录启动MongoDB服务</p>\n<blockquote>\n<p>mongod.exe –dbpath  C:\\database\\db</p>\n</blockquote>","more":"<p>但是启动出现了错误，提示了</p>\n<p><code>Cannot start server. The default storage engine &#39;wiredTiger&#39; is not available with this build of mongod. Please specify a different storage engine explicitly, e.g. -</code></p>\n<p>原来是默认的wiredTiger引擎不支持x86系统</p>\n<p>在官方网站上就有对应的说明</p>\n<blockquote>\n<p>Starting in MongoDB 3.0, the WiredTiger storage engine is available in the 64-bit builds.</p>\n</blockquote>\n<p>这样将存储引擎换成mmapv1就可以正常使用了，所以在启动服务的时候，在后面加入<code>--storageEngine=mmapv1</code>就可以了</p>\n<p>所以完整的启动服务方法就是</p>\n<p><code>mongod.exe --dbpath  C:\\database\\db --storageEngine=mmapv1</code></p>"},{"title":"一个前端眼中的斐波那契数列","date":"2017-09-21T15:29:01.000Z","_content":"![斐波那契数字游戏](https://cdn.thisjs.com/blog/fibonacci.jpeg)\n\n大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。\n\n<!--more-->\n\n现在，成为一名前端工程师之后，再看这个问题，要考虑的情况，也变得更广泛了，可以用的方法也更多了。所以现在希望应用自己了解的知识，再计算一次斐波那契数列。\n\n![格式](https://cdn.thisjs.com/blog/46c741e0cab6469d7e1c54bc054947c9_b.jpg)\n\n首先，斐波那契数列从第0个开始，分别是\n```\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……\n```\n因此要根据该规则，返回第n个斐波那契数\n\n# 递归法\n\n首先，先把之前的递归方法再再再实现一遍。\n```js\nfunction fibonacci(n){\n    if(n === 1 || n === 0 ) return n;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n```\n递归的思路很简单，即不断调用自身方法，直到n为1或0之后，开始一层层返回数据。\n\n使用递归计算大数字时，性能会特别低，原因有以下2点：\n\n① 在递归过程中，每创建一个新函数，解释器都会创建一个新的函数栈帧，并且压在当前函数的栈帧上，这就形成了调用栈。因而，当递归层数过大之后，就可能造成调用栈占用内存过大或者溢出。\n\n另外，我们在return前加入以下语句，打印一下递归的计算过程。\n```js\nconsole.log(`fibonacci(${n-1}) + fibonacci(${n-2})`)\n```\n当，n为6时，得到的结果为\n```cmd\nfibonacci(5) + fibonacci(4)\nfibonacci(4) + fibonacci(3)\nfibonacci(3) + fibonacci(2)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(1) + fibonacci(0)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(3) + fibonacci(2)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(1) + fibonacci(0)\n```\n② 分析可以发现，递归造成了大量的重复计算。\n\n递归的以上两种缺点，我们可以使用**尾调用优化**和**递推法**来解决。\n\n# 尾调用优化\n\n首先，什么是尾调用。\n\n> **尾调用**是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。WikiPad[[1]][a]\n\n用代码来说，就是B函数的返回值被A函数返回了。\n```js\nfunction B() {\n    return 1;\n}\nfunction A() {\n    return B();  // return 1\n}\n```\n\n什么时候会执行尾调用优化呢？\n\n在ES6中，strict模式下，满足以下条件，尾调用优化会开启，此时引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用：[[2]][b]\n\n1. 尾调用函数不需要访问当前栈帧中的变量\n\n2. 尾调用返回后，函数没有语句需要继续执行\n\n3. 尾调用的结果就是函数的返回值\n\n举例说明：\n\n以下函数即可开启尾调用优化\n```js\n\"use strict\";\nfunction doA() {\n    return doB();\n}\n```\n以下函数无法开启尾调用优化\n```js\n\"use strict\";\nfunction doC() {\n    doD();  // 尾调用的结果不是函数的返回值\n}\n```\n```js\n\"use strict\";\nfunction doE() {\n    return 1 + doF(); // 尾调用返回后，函数仍然有语句要运行\n}\n```\n\n我们使用尾调用优化，重写函数。\n```js\n'use strict'\nfunction fibonacci(n, current, next) {\n    if(n === 1) return next;\n    if(n === 0) return 0;\n    return fibonacci(n - 1, next, current + next);\n}\n```\n我们可以使用如下方法调用该函数\n```js\nfibonacci(6, 0, 1);\n```\n这时，在执行该函数时，由于`引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用`，就不会出现内存占用过大的情况了。\n\n得益于ES2015的`默认参数`特性，我们可以将以上函数改写。\n```js\n'use strict'\nfunction fibonacci(n, current = 0, next = 1) {\n    if(n === 1) return next;\n    if(n === 0) return 0;\n    return fibonacci(n - 1, next, current + next);\n}\n```\n这样在调用时，只需要传递一个参数即可\n```js\nfibonacci(6);\n```\n这时，我们在return语句之前，打印其调用过程\n```js\nconsole.log(`fibonacci(${n}, ${next}, ${current + next})`);\n```\n会发现调用过程大大减少\n```\nfibonacci(6, 1, 1)\nfibonacci(5, 1, 2)\nfibonacci(4, 2, 3)\nfibonacci(3, 3, 5)\nfibonacci(2, 5, 8)\n```\n\n> **注意:** 在ES 2015中，只有在strict模式下，才会开启尾调用优化\n\n# 递推法\n递推法的思路非常符合计算思路，即，f(0)开始，一个个计算下去，直到加到我们需要的值。\n```js\nfunction fibonacci(n) {\n    const aFi = new Array(n+1);\n    aFi[0] = 0; aFi[1] = 1;\n    for(let i=2; i<= n; i++){\n        aFi[i] = aFi[i-1] + aFi[i-2];\n    }\n\n    return aFi[n];\n}\n```\n这里我们定义了一个数组来容纳**所有**的计算结果，但是实际上，我们仅仅需要`f(n-1)`和`f(n-2)`两个值，因此我们可以用两个变量存储这两个值来减少内存开销。\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    let temp;\n    for(let i = 0; i < n; i++){\n        temp = current;\n        current = next;\n        next += temp;\n    }\n    return current;\n}\n```\n基于此思路，我们对此使用不同的方法进行改写。\n\n## 变种一 ES2015 结构赋值法\n\n结构赋值[[3]][e]允许我们将值直接从数组中提取到不同变量中。因此我们可以用结构赋值，省略temp中间变量。\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    for(let i = 0; i < n; i++){\n        [current, next] = [next, current + next];\n    }\n    return current;\n}\n```\n## 变种二 while的-->形式\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    while(n --> 0){\n        [current, next] = [next, current + next];\n    }\n    return current;\n}\n```\n这里的`-->`并不是limit运算符，这只是两个操作符的缩写。即--和>。\n\n这里的\n```js\nwhile(n --> 0){}\n```\n可以改写为\n```js\nwhile(n>0) {n--}\n```\n这里解释一下为什么是这样。\n\nn先进行--操作，n自身的值变为n-1。\n\n然后使用n--的**返回值**与0进行比较大小，而**n--的返回值是n**。\n\n所以，只要`n>0`，那么就会执行`n--`\n\n## 变种三 高级函数\n```js\nfunction fibonacci(n){\n\tlet seed = 1;\n\treturn [...Array(n)].reduce(p => {\n\t\tconst temp = p + seed; \n\t\tseed = p;\n\t\treturn temp;\n\t},0)\n}\n```\n这里利用Reduce高级函数[[5]][g]的特性，第一个参数为上一次计算的值，因此这里的pp保存F(\bn-1)值，而seed则保存F(n-2)的值。\n\n## 变种四 \bGenerator生成器\n\b\nGenerator是ES2015的新特性，得益于该特性，我们可以使用生成器方法，制作一个斐波那契数列生成器。\n```js\nfunction* fibonacci(){\n    let current = 0;\n    let next = 1;\n    yield current;\n    yield next;\n\n    while(true) {\n        [current, next] = [next, current + next];\n        yield next;\n    }\n}\n```\n使用方法即\n```js\nconst fibo = fibonacci();\nfor(let i=0; i< 10;i ++){\n    console.log(fibo.next().value);\n}\n```\n但是这一个\b生成器并不是可以生成指定n的函数，详细实现方法，以及可能遇到的坑可以参阅这篇文章[我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事][i]。\n\n\n# 通项公式法\n\n![通项公式](https://cdn.thisjs.com/blog/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg)\n\n\b斐波那契的通项公式证明，可以参阅[百度百科][h]。比照该公式，可以实现如下代码[[8]][j]：\n\n```js\nfunction fibonacci(n) {\n    const SQRT_FIVE = Math.sqrt(5);\n    return Math.round(1/SQRT_FIVE * (Math.pow(0.5 + SQRT_FIVE/2, n) - Math.pow(0.5 - SQRT_FIVE/2, n)));\n}\n\n```\n\n以上，便是我当前学习到的解决方案。如果你有更好的解决方案，或者对一些方法有异议，也希望可以在评论区不吝赐教。\n\n\n# 参考资料\n\n[1] [尾调用 - 维基百科，自由的百科全书][a]\n\n[2] [《理解 ES6》阅读整理：函数（Functions）（八）Tail Call Optimization][b]\n\n[3] [解构赋值 - JavaScript | MDN][e]\n\n[4] [关于-->的运算顺序问题][f]\n\n[5] [Array.prototype.reduce() - JavaScript | MDN][g]\n\n[6] [斐波那契数列_百度百科][h]\n\n[7] [我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事][i]\n\n[8] [斐波那契数列求和的js方案以及优化][j]\n\n[9] [尾调用优化 - 阮一峰的网络日志][c]\n\n[10] [斐波那契数列算法优化][d]\n\n[a]: https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\n[b]: http://www.cnblogs.com/xfshen/p/6001581.html\n[c]: http://www.ruanyifeng.com/blog/2015/04/tail-call.html\n[d]: http://www.cnblogs.com/myoleole/archive/2012/12/01/2797709.html\n[e]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n[f]: https://www.zhihu.com/question/65662523/answer/233405655\n[g]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n[h]: https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\n[i]: http://www.zcfy.cc/article/473\n[j]: https://segmentfault.com/a/1190000007115162","source":"_posts/my-view-of-fibonacci.md","raw":"---\ntitle: 一个前端眼中的斐波那契数列\ndate: 2017-09-21 15:29:01\ntags: [Javascript]\n---\n![斐波那契数字游戏](https://cdn.thisjs.com/blog/fibonacci.jpeg)\n\n大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。\n\n<!--more-->\n\n现在，成为一名前端工程师之后，再看这个问题，要考虑的情况，也变得更广泛了，可以用的方法也更多了。所以现在希望应用自己了解的知识，再计算一次斐波那契数列。\n\n![格式](https://cdn.thisjs.com/blog/46c741e0cab6469d7e1c54bc054947c9_b.jpg)\n\n首先，斐波那契数列从第0个开始，分别是\n```\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……\n```\n因此要根据该规则，返回第n个斐波那契数\n\n# 递归法\n\n首先，先把之前的递归方法再再再实现一遍。\n```js\nfunction fibonacci(n){\n    if(n === 1 || n === 0 ) return n;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n```\n递归的思路很简单，即不断调用自身方法，直到n为1或0之后，开始一层层返回数据。\n\n使用递归计算大数字时，性能会特别低，原因有以下2点：\n\n① 在递归过程中，每创建一个新函数，解释器都会创建一个新的函数栈帧，并且压在当前函数的栈帧上，这就形成了调用栈。因而，当递归层数过大之后，就可能造成调用栈占用内存过大或者溢出。\n\n另外，我们在return前加入以下语句，打印一下递归的计算过程。\n```js\nconsole.log(`fibonacci(${n-1}) + fibonacci(${n-2})`)\n```\n当，n为6时，得到的结果为\n```cmd\nfibonacci(5) + fibonacci(4)\nfibonacci(4) + fibonacci(3)\nfibonacci(3) + fibonacci(2)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(1) + fibonacci(0)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(3) + fibonacci(2)\nfibonacci(2) + fibonacci(1)\nfibonacci(1) + fibonacci(0)\nfibonacci(1) + fibonacci(0)\n```\n② 分析可以发现，递归造成了大量的重复计算。\n\n递归的以上两种缺点，我们可以使用**尾调用优化**和**递推法**来解决。\n\n# 尾调用优化\n\n首先，什么是尾调用。\n\n> **尾调用**是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。WikiPad[[1]][a]\n\n用代码来说，就是B函数的返回值被A函数返回了。\n```js\nfunction B() {\n    return 1;\n}\nfunction A() {\n    return B();  // return 1\n}\n```\n\n什么时候会执行尾调用优化呢？\n\n在ES6中，strict模式下，满足以下条件，尾调用优化会开启，此时引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用：[[2]][b]\n\n1. 尾调用函数不需要访问当前栈帧中的变量\n\n2. 尾调用返回后，函数没有语句需要继续执行\n\n3. 尾调用的结果就是函数的返回值\n\n举例说明：\n\n以下函数即可开启尾调用优化\n```js\n\"use strict\";\nfunction doA() {\n    return doB();\n}\n```\n以下函数无法开启尾调用优化\n```js\n\"use strict\";\nfunction doC() {\n    doD();  // 尾调用的结果不是函数的返回值\n}\n```\n```js\n\"use strict\";\nfunction doE() {\n    return 1 + doF(); // 尾调用返回后，函数仍然有语句要运行\n}\n```\n\n我们使用尾调用优化，重写函数。\n```js\n'use strict'\nfunction fibonacci(n, current, next) {\n    if(n === 1) return next;\n    if(n === 0) return 0;\n    return fibonacci(n - 1, next, current + next);\n}\n```\n我们可以使用如下方法调用该函数\n```js\nfibonacci(6, 0, 1);\n```\n这时，在执行该函数时，由于`引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用`，就不会出现内存占用过大的情况了。\n\n得益于ES2015的`默认参数`特性，我们可以将以上函数改写。\n```js\n'use strict'\nfunction fibonacci(n, current = 0, next = 1) {\n    if(n === 1) return next;\n    if(n === 0) return 0;\n    return fibonacci(n - 1, next, current + next);\n}\n```\n这样在调用时，只需要传递一个参数即可\n```js\nfibonacci(6);\n```\n这时，我们在return语句之前，打印其调用过程\n```js\nconsole.log(`fibonacci(${n}, ${next}, ${current + next})`);\n```\n会发现调用过程大大减少\n```\nfibonacci(6, 1, 1)\nfibonacci(5, 1, 2)\nfibonacci(4, 2, 3)\nfibonacci(3, 3, 5)\nfibonacci(2, 5, 8)\n```\n\n> **注意:** 在ES 2015中，只有在strict模式下，才会开启尾调用优化\n\n# 递推法\n递推法的思路非常符合计算思路，即，f(0)开始，一个个计算下去，直到加到我们需要的值。\n```js\nfunction fibonacci(n) {\n    const aFi = new Array(n+1);\n    aFi[0] = 0; aFi[1] = 1;\n    for(let i=2; i<= n; i++){\n        aFi[i] = aFi[i-1] + aFi[i-2];\n    }\n\n    return aFi[n];\n}\n```\n这里我们定义了一个数组来容纳**所有**的计算结果，但是实际上，我们仅仅需要`f(n-1)`和`f(n-2)`两个值，因此我们可以用两个变量存储这两个值来减少内存开销。\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    let temp;\n    for(let i = 0; i < n; i++){\n        temp = current;\n        current = next;\n        next += temp;\n    }\n    return current;\n}\n```\n基于此思路，我们对此使用不同的方法进行改写。\n\n## 变种一 ES2015 结构赋值法\n\n结构赋值[[3]][e]允许我们将值直接从数组中提取到不同变量中。因此我们可以用结构赋值，省略temp中间变量。\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    for(let i = 0; i < n; i++){\n        [current, next] = [next, current + next];\n    }\n    return current;\n}\n```\n## 变种二 while的-->形式\n```js\nfunction fibonacci(n) {\n    let current = 0;\n    let next = 1;\n    while(n --> 0){\n        [current, next] = [next, current + next];\n    }\n    return current;\n}\n```\n这里的`-->`并不是limit运算符，这只是两个操作符的缩写。即--和>。\n\n这里的\n```js\nwhile(n --> 0){}\n```\n可以改写为\n```js\nwhile(n>0) {n--}\n```\n这里解释一下为什么是这样。\n\nn先进行--操作，n自身的值变为n-1。\n\n然后使用n--的**返回值**与0进行比较大小，而**n--的返回值是n**。\n\n所以，只要`n>0`，那么就会执行`n--`\n\n## 变种三 高级函数\n```js\nfunction fibonacci(n){\n\tlet seed = 1;\n\treturn [...Array(n)].reduce(p => {\n\t\tconst temp = p + seed; \n\t\tseed = p;\n\t\treturn temp;\n\t},0)\n}\n```\n这里利用Reduce高级函数[[5]][g]的特性，第一个参数为上一次计算的值，因此这里的pp保存F(\bn-1)值，而seed则保存F(n-2)的值。\n\n## 变种四 \bGenerator生成器\n\b\nGenerator是ES2015的新特性，得益于该特性，我们可以使用生成器方法，制作一个斐波那契数列生成器。\n```js\nfunction* fibonacci(){\n    let current = 0;\n    let next = 1;\n    yield current;\n    yield next;\n\n    while(true) {\n        [current, next] = [next, current + next];\n        yield next;\n    }\n}\n```\n使用方法即\n```js\nconst fibo = fibonacci();\nfor(let i=0; i< 10;i ++){\n    console.log(fibo.next().value);\n}\n```\n但是这一个\b生成器并不是可以生成指定n的函数，详细实现方法，以及可能遇到的坑可以参阅这篇文章[我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事][i]。\n\n\n# 通项公式法\n\n![通项公式](https://cdn.thisjs.com/blog/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg)\n\n\b斐波那契的通项公式证明，可以参阅[百度百科][h]。比照该公式，可以实现如下代码[[8]][j]：\n\n```js\nfunction fibonacci(n) {\n    const SQRT_FIVE = Math.sqrt(5);\n    return Math.round(1/SQRT_FIVE * (Math.pow(0.5 + SQRT_FIVE/2, n) - Math.pow(0.5 - SQRT_FIVE/2, n)));\n}\n\n```\n\n以上，便是我当前学习到的解决方案。如果你有更好的解决方案，或者对一些方法有异议，也希望可以在评论区不吝赐教。\n\n\n# 参考资料\n\n[1] [尾调用 - 维基百科，自由的百科全书][a]\n\n[2] [《理解 ES6》阅读整理：函数（Functions）（八）Tail Call Optimization][b]\n\n[3] [解构赋值 - JavaScript | MDN][e]\n\n[4] [关于-->的运算顺序问题][f]\n\n[5] [Array.prototype.reduce() - JavaScript | MDN][g]\n\n[6] [斐波那契数列_百度百科][h]\n\n[7] [我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事][i]\n\n[8] [斐波那契数列求和的js方案以及优化][j]\n\n[9] [尾调用优化 - 阮一峰的网络日志][c]\n\n[10] [斐波那契数列算法优化][d]\n\n[a]: https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\n[b]: http://www.cnblogs.com/xfshen/p/6001581.html\n[c]: http://www.ruanyifeng.com/blog/2015/04/tail-call.html\n[d]: http://www.cnblogs.com/myoleole/archive/2012/12/01/2797709.html\n[e]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n[f]: https://www.zhihu.com/question/65662523/answer/233405655\n[g]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n[h]: https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\n[i]: http://www.zcfy.cc/article/473\n[j]: https://segmentfault.com/a/1190000007115162","slug":"my-view-of-fibonacci","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwd00151h2upxyvztmx","content":"<p><img src=\"https://cdn.thisjs.com/blog/fibonacci.jpeg\" alt=\"斐波那契数字游戏\"></p>\n<p>大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。</p>\n<a id=\"more\"></a>\n<p>现在，成为一名前端工程师之后，再看这个问题，要考虑的情况，也变得更广泛了，可以用的方法也更多了。所以现在希望应用自己了解的知识，再计算一次斐波那契数列。</p>\n<p><img src=\"https://cdn.thisjs.com/blog/46c741e0cab6469d7e1c54bc054947c9_b.jpg\" alt=\"格式\"></p>\n<p>首先，斐波那契数列从第0个开始，分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</span><br></pre></td></tr></table></figure></p>\n<p>因此要根据该规则，返回第n个斐波那契数</p>\n<h1 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h1><p>首先，先把之前的递归方法再再再实现一遍。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span> || n === <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>递归的思路很简单，即不断调用自身方法，直到n为1或0之后，开始一层层返回数据。</p>\n<p>使用递归计算大数字时，性能会特别低，原因有以下2点：</p>\n<p>① 在递归过程中，每创建一个新函数，解释器都会创建一个新的函数栈帧，并且压在当前函数的栈帧上，这就形成了调用栈。因而，当递归层数过大之后，就可能造成调用栈占用内存过大或者溢出。</p>\n<p>另外，我们在return前加入以下语句，打印一下递归的计算过程。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`fibonacci(<span class=\"subst\">$&#123;n<span class=\"number\">-1</span>&#125;</span>) + fibonacci(<span class=\"subst\">$&#123;n<span class=\"number\">-2</span>&#125;</span>)`</span>)</span><br></pre></td></tr></table></figure></p>\n<p>当，n为6时，得到的结果为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">5</span>) + fibonacci(<span class=\"number\">4</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">4</span>) + fibonacci(<span class=\"number\">3</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">3</span>) + fibonacci(<span class=\"number\">2</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">3</span>) + fibonacci(<span class=\"number\">2</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>② 分析可以发现，递归造成了大量的重复计算。</p>\n<p>递归的以上两种缺点，我们可以使用<strong>尾调用优化</strong>和<strong>递推法</strong>来解决。</p>\n<h1 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h1><p>首先，什么是尾调用。</p>\n<blockquote>\n<p><strong>尾调用</strong>是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。WikiPad<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">[1]</a></p>\n</blockquote>\n<p>用代码来说，就是B函数的返回值被A函数返回了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B();  <span class=\"comment\">// return 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>什么时候会执行尾调用优化呢？</p>\n<p>在ES6中，strict模式下，满足以下条件，尾调用优化会开启，此时引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用：<a href=\"http://www.cnblogs.com/xfshen/p/6001581.html\" target=\"_blank\" rel=\"noopener\">[2]</a></p>\n<ol>\n<li><p>尾调用函数不需要访问当前栈帧中的变量</p>\n</li>\n<li><p>尾调用返回后，函数没有语句需要继续执行</p>\n</li>\n<li><p>尾调用的结果就是函数的返回值</p>\n</li>\n</ol>\n<p>举例说明：</p>\n<p>以下函数即可开启尾调用优化<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以下函数无法开启尾调用优化<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doC</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    doD();  <span class=\"comment\">// 尾调用的结果不是函数的返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + doF(); <span class=\"comment\">// 尾调用返回后，函数仍然有语句要运行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用尾调用优化，重写函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, current, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, next, current + next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以使用如下方法调用该函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这时，在执行该函数时，由于<code>引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用</code>，就不会出现内存占用过大的情况了。</p>\n<p>得益于ES2015的<code>默认参数</code>特性，我们可以将以上函数改写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, current = <span class=\"number\">0</span>, next = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, next, current + next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样在调用时，只需要传递一个参数即可<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这时，我们在return语句之前，打印其调用过程<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`fibonacci(<span class=\"subst\">$&#123;n&#125;</span>, <span class=\"subst\">$&#123;next&#125;</span>, <span class=\"subst\">$&#123;current + next&#125;</span>)`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>会发现调用过程大大减少<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(6, 1, 1)</span><br><span class=\"line\">fibonacci(5, 1, 2)</span><br><span class=\"line\">fibonacci(4, 2, 3)</span><br><span class=\"line\">fibonacci(3, 3, 5)</span><br><span class=\"line\">fibonacci(2, 5, 8)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意:</strong> 在ES 2015中，只有在strict模式下，才会开启尾调用优化</p>\n</blockquote>\n<h1 id=\"递推法\"><a href=\"#递推法\" class=\"headerlink\" title=\"递推法\"></a>递推法</h1><p>递推法的思路非常符合计算思路，即，f(0)开始，一个个计算下去，直到加到我们需要的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> aFi = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    aFi[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; aFi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>; i&lt;= n; i++)&#123;</span><br><span class=\"line\">        aFi[i] = aFi[i<span class=\"number\">-1</span>] + aFi[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> aFi[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们定义了一个数组来容纳<strong>所有</strong>的计算结果，但是实际上，我们仅仅需要<code>f(n-1)</code>和<code>f(n-2)</code>两个值，因此我们可以用两个变量存储这两个值来减少内存开销。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        temp = current;</span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">        next += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基于此思路，我们对此使用不同的方法进行改写。</p>\n<h2 id=\"变种一-ES2015-结构赋值法\"><a href=\"#变种一-ES2015-结构赋值法\" class=\"headerlink\" title=\"变种一 ES2015 结构赋值法\"></a>变种一 ES2015 结构赋值法</h2><p>结构赋值<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">[3]</a>允许我们将值直接从数组中提取到不同变量中。因此我们可以用结构赋值，省略temp中间变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"变种二-while的–-gt-形式\"><a href=\"#变种二-while的–-gt-形式\" class=\"headerlink\" title=\"变种二 while的–&gt;形式\"></a>变种二 while的–&gt;形式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --&gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>--&gt;</code>并不是limit运算符，这只是两个操作符的缩写。即–和&gt;。</p>\n<p>这里的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n --&gt; <span class=\"number\">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以改写为<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) &#123;n--&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里解释一下为什么是这样。</p>\n<p>n先进行–操作，n自身的值变为n-1。</p>\n<p>然后使用n–的<strong>返回值</strong>与0进行比较大小，而<strong>n–的返回值是n</strong>。</p>\n<p>所以，只要<code>n&gt;0</code>，那么就会执行<code>n--</code></p>\n<h2 id=\"变种三-高级函数\"><a href=\"#变种三-高级函数\" class=\"headerlink\" title=\"变种三 高级函数\"></a>变种三 高级函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> seed = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [...Array(n)].reduce(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = p + seed; </span><br><span class=\"line\">\t\tseed = p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里利用Reduce高级函数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">[5]</a>的特性，第一个参数为上一次计算的值，因此这里的pp保存F(\bn-1)值，而seed则保存F(n-2)的值。</p>\n<h2 id=\"变种四-Generator生成器\"><a href=\"#变种四-Generator生成器\" class=\"headerlink\" title=\"变种四 \bGenerator生成器\"></a>变种四 \bGenerator生成器</h2><p>\b<br>Generator是ES2015的新特性，得益于该特性，我们可以使用生成器方法，制作一个斐波那契数列生成器。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> current;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用方法即<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibo = fibonacci();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>;i ++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fibo.next().value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是这一个\b生成器并不是可以生成指定n的函数，详细实现方法，以及可能遇到的坑可以参阅这篇文章<a href=\"http://www.zcfy.cc/article/473\" target=\"_blank\" rel=\"noopener\">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a>。</p>\n<h1 id=\"通项公式法\"><a href=\"#通项公式法\" class=\"headerlink\" title=\"通项公式法\"></a>通项公式法</h1><p><img src=\"https://cdn.thisjs.com/blog/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg\" alt=\"通项公式\"></p>\n<p>\b斐波那契的通项公式证明，可以参阅<a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">百度百科</a>。比照该公式，可以实现如下代码<a href=\"https://segmentfault.com/a/1190000007115162\" target=\"_blank\" rel=\"noopener\">[8]</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> SQRT_FIVE = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(<span class=\"number\">1</span>/SQRT_FIVE * (<span class=\"built_in\">Math</span>.pow(<span class=\"number\">0.5</span> + SQRT_FIVE/<span class=\"number\">2</span>, n) - <span class=\"built_in\">Math</span>.pow(<span class=\"number\">0.5</span> - SQRT_FIVE/<span class=\"number\">2</span>, n)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上，便是我当前学习到的解决方案。如果你有更好的解决方案，或者对一些方法有异议，也希望可以在评论区不吝赐教。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">尾调用 - 维基百科，自由的百科全书</a></p>\n<p>[2] <a href=\"http://www.cnblogs.com/xfshen/p/6001581.html\" target=\"_blank\" rel=\"noopener\">《理解 ES6》阅读整理：函数（Functions）（八）Tail Call Optimization</a></p>\n<p>[3] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">解构赋值 - JavaScript | MDN</a></p>\n<p>[4] <a href=\"https://www.zhihu.com/question/65662523/answer/233405655\" target=\"_blank\" rel=\"noopener\">关于–&gt;的运算顺序问题</a></p>\n<p>[5] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">Array.prototype.reduce() - JavaScript | MDN</a></p>\n<p>[6] <a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">斐波那契数列_百度百科</a></p>\n<p>[7] <a href=\"http://www.zcfy.cc/article/473\" target=\"_blank\" rel=\"noopener\">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a></p>\n<p>[8] <a href=\"https://segmentfault.com/a/1190000007115162\" target=\"_blank\" rel=\"noopener\">斐波那契数列求和的js方案以及优化</a></p>\n<p>[9] <a href=\"http://www.ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">尾调用优化 - 阮一峰的网络日志</a></p>\n<p>[10] <a href=\"http://www.cnblogs.com/myoleole/archive/2012/12/01/2797709.html\" target=\"_blank\" rel=\"noopener\">斐波那契数列算法优化</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/blog/fibonacci.jpeg\" alt=\"斐波那契数字游戏\"></p>\n<p>大学时期，每学习一门新编程语言，就会被要求重新实现一遍斐波那契数列算法。那时，常用的方法即递归法和递推法。那时只对结果感兴趣，只要结果出来了，其他的仿佛就无所谓了。</p>","more":"<p>现在，成为一名前端工程师之后，再看这个问题，要考虑的情况，也变得更广泛了，可以用的方法也更多了。所以现在希望应用自己了解的知识，再计算一次斐波那契数列。</p>\n<p><img src=\"https://cdn.thisjs.com/blog/46c741e0cab6469d7e1c54bc054947c9_b.jpg\" alt=\"格式\"></p>\n<p>首先，斐波那契数列从第0个开始，分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</span><br></pre></td></tr></table></figure></p>\n<p>因此要根据该规则，返回第n个斐波那契数</p>\n<h1 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h1><p>首先，先把之前的递归方法再再再实现一遍。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span> || n === <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>递归的思路很简单，即不断调用自身方法，直到n为1或0之后，开始一层层返回数据。</p>\n<p>使用递归计算大数字时，性能会特别低，原因有以下2点：</p>\n<p>① 在递归过程中，每创建一个新函数，解释器都会创建一个新的函数栈帧，并且压在当前函数的栈帧上，这就形成了调用栈。因而，当递归层数过大之后，就可能造成调用栈占用内存过大或者溢出。</p>\n<p>另外，我们在return前加入以下语句，打印一下递归的计算过程。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`fibonacci(<span class=\"subst\">$&#123;n<span class=\"number\">-1</span>&#125;</span>) + fibonacci(<span class=\"subst\">$&#123;n<span class=\"number\">-2</span>&#125;</span>)`</span>)</span><br></pre></td></tr></table></figure></p>\n<p>当，n为6时，得到的结果为<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">5</span>) + fibonacci(<span class=\"number\">4</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">4</span>) + fibonacci(<span class=\"number\">3</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">3</span>) + fibonacci(<span class=\"number\">2</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">3</span>) + fibonacci(<span class=\"number\">2</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">2</span>) + fibonacci(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br><span class=\"line\">fibonacci(<span class=\"number\">1</span>) + fibonacci(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>② 分析可以发现，递归造成了大量的重复计算。</p>\n<p>递归的以上两种缺点，我们可以使用<strong>尾调用优化</strong>和<strong>递推法</strong>来解决。</p>\n<h1 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h1><p>首先，什么是尾调用。</p>\n<blockquote>\n<p><strong>尾调用</strong>是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。WikiPad<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">[1]</a></p>\n</blockquote>\n<p>用代码来说，就是B函数的返回值被A函数返回了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B();  <span class=\"comment\">// return 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>什么时候会执行尾调用优化呢？</p>\n<p>在ES6中，strict模式下，满足以下条件，尾调用优化会开启，此时引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用：<a href=\"http://www.cnblogs.com/xfshen/p/6001581.html\" target=\"_blank\" rel=\"noopener\">[2]</a></p>\n<ol>\n<li><p>尾调用函数不需要访问当前栈帧中的变量</p>\n</li>\n<li><p>尾调用返回后，函数没有语句需要继续执行</p>\n</li>\n<li><p>尾调用的结果就是函数的返回值</p>\n</li>\n</ol>\n<p>举例说明：</p>\n<p>以下函数即可开启尾调用优化<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以下函数无法开启尾调用优化<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doC</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    doD();  <span class=\"comment\">// 尾调用的结果不是函数的返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + doF(); <span class=\"comment\">// 尾调用返回后，函数仍然有语句要运行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用尾调用优化，重写函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, current, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, next, current + next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以使用如下方法调用该函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这时，在执行该函数时，由于<code>引擎不会创建一个新的栈帧，而是清除当前栈帧的数据并复用</code>，就不会出现内存占用过大的情况了。</p>\n<p>得益于ES2015的<code>默认参数</code>特性，我们可以将以上函数改写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, current = <span class=\"number\">0</span>, next = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, next, current + next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样在调用时，只需要传递一个参数即可<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(<span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这时，我们在return语句之前，打印其调用过程<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`fibonacci(<span class=\"subst\">$&#123;n&#125;</span>, <span class=\"subst\">$&#123;next&#125;</span>, <span class=\"subst\">$&#123;current + next&#125;</span>)`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>会发现调用过程大大减少<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fibonacci(6, 1, 1)</span><br><span class=\"line\">fibonacci(5, 1, 2)</span><br><span class=\"line\">fibonacci(4, 2, 3)</span><br><span class=\"line\">fibonacci(3, 3, 5)</span><br><span class=\"line\">fibonacci(2, 5, 8)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意:</strong> 在ES 2015中，只有在strict模式下，才会开启尾调用优化</p>\n</blockquote>\n<h1 id=\"递推法\"><a href=\"#递推法\" class=\"headerlink\" title=\"递推法\"></a>递推法</h1><p>递推法的思路非常符合计算思路，即，f(0)开始，一个个计算下去，直到加到我们需要的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> aFi = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    aFi[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; aFi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>; i&lt;= n; i++)&#123;</span><br><span class=\"line\">        aFi[i] = aFi[i<span class=\"number\">-1</span>] + aFi[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> aFi[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们定义了一个数组来容纳<strong>所有</strong>的计算结果，但是实际上，我们仅仅需要<code>f(n-1)</code>和<code>f(n-2)</code>两个值，因此我们可以用两个变量存储这两个值来减少内存开销。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        temp = current;</span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">        next += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基于此思路，我们对此使用不同的方法进行改写。</p>\n<h2 id=\"变种一-ES2015-结构赋值法\"><a href=\"#变种一-ES2015-结构赋值法\" class=\"headerlink\" title=\"变种一 ES2015 结构赋值法\"></a>变种一 ES2015 结构赋值法</h2><p>结构赋值<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">[3]</a>允许我们将值直接从数组中提取到不同变量中。因此我们可以用结构赋值，省略temp中间变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"变种二-while的–-gt-形式\"><a href=\"#变种二-while的–-gt-形式\" class=\"headerlink\" title=\"变种二 while的–&gt;形式\"></a>变种二 while的–&gt;形式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --&gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>--&gt;</code>并不是limit运算符，这只是两个操作符的缩写。即–和&gt;。</p>\n<p>这里的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n --&gt; <span class=\"number\">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以改写为<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) &#123;n--&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里解释一下为什么是这样。</p>\n<p>n先进行–操作，n自身的值变为n-1。</p>\n<p>然后使用n–的<strong>返回值</strong>与0进行比较大小，而<strong>n–的返回值是n</strong>。</p>\n<p>所以，只要<code>n&gt;0</code>，那么就会执行<code>n--</code></p>\n<h2 id=\"变种三-高级函数\"><a href=\"#变种三-高级函数\" class=\"headerlink\" title=\"变种三 高级函数\"></a>变种三 高级函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> seed = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [...Array(n)].reduce(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> temp = p + seed; </span><br><span class=\"line\">\t\tseed = p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里利用Reduce高级函数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">[5]</a>的特性，第一个参数为上一次计算的值，因此这里的pp保存F(\bn-1)值，而seed则保存F(n-2)的值。</p>\n<h2 id=\"变种四-Generator生成器\"><a href=\"#变种四-Generator生成器\" class=\"headerlink\" title=\"变种四 \bGenerator生成器\"></a>变种四 \bGenerator生成器</h2><p>\b<br>Generator是ES2015的新特性，得益于该特性，我们可以使用生成器方法，制作一个斐波那契数列生成器。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> current;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        [current, next] = [next, current + next];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用方法即<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibo = fibonacci();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>;i ++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fibo.next().value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是这一个\b生成器并不是可以生成指定n的函数，详细实现方法，以及可能遇到的坑可以参阅这篇文章<a href=\"http://www.zcfy.cc/article/473\" target=\"_blank\" rel=\"noopener\">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a>。</p>\n<h1 id=\"通项公式法\"><a href=\"#通项公式法\" class=\"headerlink\" title=\"通项公式法\"></a>通项公式法</h1><p><img src=\"https://cdn.thisjs.com/blog/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg\" alt=\"通项公式\"></p>\n<p>\b斐波那契的通项公式证明，可以参阅<a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">百度百科</a>。比照该公式，可以实现如下代码<a href=\"https://segmentfault.com/a/1190000007115162\" target=\"_blank\" rel=\"noopener\">[8]</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> SQRT_FIVE = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(<span class=\"number\">1</span>/SQRT_FIVE * (<span class=\"built_in\">Math</span>.pow(<span class=\"number\">0.5</span> + SQRT_FIVE/<span class=\"number\">2</span>, n) - <span class=\"built_in\">Math</span>.pow(<span class=\"number\">0.5</span> - SQRT_FIVE/<span class=\"number\">2</span>, n)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上，便是我当前学习到的解决方案。如果你有更好的解决方案，或者对一些方法有异议，也希望可以在评论区不吝赐教。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">尾调用 - 维基百科，自由的百科全书</a></p>\n<p>[2] <a href=\"http://www.cnblogs.com/xfshen/p/6001581.html\" target=\"_blank\" rel=\"noopener\">《理解 ES6》阅读整理：函数（Functions）（八）Tail Call Optimization</a></p>\n<p>[3] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">解构赋值 - JavaScript | MDN</a></p>\n<p>[4] <a href=\"https://www.zhihu.com/question/65662523/answer/233405655\" target=\"_blank\" rel=\"noopener\">关于–&gt;的运算顺序问题</a></p>\n<p>[5] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">Array.prototype.reduce() - JavaScript | MDN</a></p>\n<p>[6] <a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">斐波那契数列_百度百科</a></p>\n<p>[7] <a href=\"http://www.zcfy.cc/article/473\" target=\"_blank\" rel=\"noopener\">我从用 JavaScript 写斐波那契生成器中学到的令人惊讶的 7 件事</a></p>\n<p>[8] <a href=\"https://segmentfault.com/a/1190000007115162\" target=\"_blank\" rel=\"noopener\">斐波那契数列求和的js方案以及优化</a></p>\n<p>[9] <a href=\"http://www.ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">尾调用优化 - 阮一峰的网络日志</a></p>\n<p>[10] <a href=\"http://www.cnblogs.com/myoleole/archive/2012/12/01/2797709.html\" target=\"_blank\" rel=\"noopener\">斐波那契数列算法优化</a></p>"},{"title":"优化一次INSERT查询，插入多行记录","date":"2014-06-10T10:14:36.000Z","_content":"如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：\n`INSERT INTO tbl_name (col1,col2) VALUES (15,16);`\n 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：\n ```php\n $a = 1;\n$b = 1;\nwhile (5 == $a)\n{\n    $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    mysql_query($sql);\n    $a++;\n    $b++;\n}\n```\n<!--more-->\n\n但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。\n在查看其他的sql备份导入软件之后发现，他们使用的方法如下。\n```php\nINSERT INTO `userTable` (`user_id`, `user_name`) VALUES\n(1, 'dsf'),\n(2, 'fgy'),\n(3, 'faad');\n```\n\n  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:\n\n  ```php\n  $a = 1;\nwhile (5 == $a)\n{\n    if (1 == $a)\n        $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    else\n        $sql .= \",($a,$b)\";\n\n    $a++;\n    $b++;\n}\nmysql_query($sql);\n```","source":"_posts/optimization-of-an-insert-query-insert-more-rows.md","raw":"---\ntitle: 优化一次INSERT查询，插入多行记录\ndate: 2014-06-10 10:14:36\ntags: [PHP,MySql]\n---\n如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：\n`INSERT INTO tbl_name (col1,col2) VALUES (15,16);`\n 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：\n ```php\n $a = 1;\n$b = 1;\nwhile (5 == $a)\n{\n    $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    mysql_query($sql);\n    $a++;\n    $b++;\n}\n```\n<!--more-->\n\n但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。\n在查看其他的sql备份导入软件之后发现，他们使用的方法如下。\n```php\nINSERT INTO `userTable` (`user_id`, `user_name`) VALUES\n(1, 'dsf'),\n(2, 'fgy'),\n(3, 'faad');\n```\n\n  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:\n\n  ```php\n  $a = 1;\nwhile (5 == $a)\n{\n    if (1 == $a)\n        $sql = \"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\";\n    else\n        $sql .= \",($a,$b)\";\n\n    $a++;\n    $b++;\n}\nmysql_query($sql);\n```","slug":"optimization-of-an-insert-query-insert-more-rows","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwf00171h2usc7mhxsf","content":"<p>如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：<br><code>INSERT INTO tbl_name (col1,col2) VALUES (15,16);</code><br> 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $a = <span class=\"number\">1</span>;</span><br><span class=\"line\">$b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</span><br><span class=\"line\">    mysql_query($sql);</span><br><span class=\"line\">    $a++;</span><br><span class=\"line\">    $b++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。<br>在查看其他的sql备份导入软件之后发现，他们使用的方法如下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO `userTable` (`user_id`, `user_name`) VALUES</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'dsf'</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"string\">'fgy'</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"string\">'faad'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  $a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == $a)</span><br><span class=\"line\">        $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        $sql .= <span class=\"string\">\",($a,$b)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $a++;</span><br><span class=\"line\">    $b++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mysql_query($sql);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>如果我们想往数据库表中插入一行记录，可以使用以下SQL语句：<br><code>INSERT INTO tbl_name (col1,col2) VALUES (15,16);</code><br> 那如果我们想插入多行记录呢？可能你会想到多次运行INSERT语句即可，就像下面的php代码示例：<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $a = <span class=\"number\">1</span>;</span><br><span class=\"line\">$b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</span><br><span class=\"line\">    mysql_query($sql);</span><br><span class=\"line\">    $a++;</span><br><span class=\"line\">    $b++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>但是这样执行的效率太低，尤其是在执行数量过大的情况下，会大大的占用服务器的资源。<br>在查看其他的sql备份导入软件之后发现，他们使用的方法如下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO `userTable` (`user_id`, `user_name`) VALUES</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'dsf'</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"string\">'fgy'</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"string\">'faad'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  这样只需执行一次SQL查询，即可插入多行记录，大大提高了效率，使用php编程的时候，可以使用字符串连接的方式连接sql语句即可:</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  $a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">5</span> == $a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == $a)</span><br><span class=\"line\">        $sql = <span class=\"string\">\"INSERT INTO tbl_name (col1,col2) VALUES ($a,$b)\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        $sql .= <span class=\"string\">\",($a,$b)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $a++;</span><br><span class=\"line\">    $b++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mysql_query($sql);</span><br></pre></td></tr></table></figure>"},{"title":"OS X中使用brew管理多个node版本","date":"2017-04-18T21:58:16.000Z","_content":"<img src=\"https://cdn.thisjs.com/thisjs/nodejs_header-03e90275ca.svg\" width = \"1050\" alt=\"node list\" align=center />\n\n在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的[**NVM**(Node Version Manager)](https://github.com/creationix/nvm)可以帮助我们很好的进行版本管理。\n\n在OS X系统中，**HomeBrew**也是一个很方便的Node版本切换工具。\n\n以下是使用HomeBrew管理Node的一些操作\n\n<!--more-->\n\n## 查看可用版本\n\n```bash\n$ brew search node\n```\n即可看到当前可用的版本\n\n <img src=\"https://cdn.thisjs.com/thisjs/brew%20list.png\" width = \"680\"  alt=\"node list\" align=center />\n\n\n## 安装需要版本\n\n```bash\n$ brew install node@6\n```\n如果需要6.x.x中最新版本，可以使用\n\n```bash\n$ brew install node6-lts\n```\n\n## 切换版本\n\n* 首先取消当前版本\n\n```bash\n$ brew unlink node\n```\n\n* 切换到需要的版本\n\n```bash\n$ brew link node@6 [--force]\n```\n\n> 注意：在切换版本的时候，可能会需要用到 --force命令，强制执行。\n\n在切换版本时，可能会有一些文件需要删除，注意提示内容，执行即可\n\n**例如：**\n\n```bash\n$ rm '/usr/local/include/node/pthread-fixes.h'\n```\n## 检查切换是否成功\n\n```bash\n$ node -v\n```\n\n## 添加Path\n\n```bash\n$ which node # => /usr/local/bin/node\n$ export NODE_PATH='/usr/local/lib/node_modules' # <--- add this ~/.bashrc\n```\n\n## 删除所有Node\n\n```bash\n$ brew uninstall node\n# 或者 `brew uninstall --force node` 移除所有版本\n$ brew prune\n$ rm -f /usr/local/bin/npm /usr/local/lib/dtrace/node.d\n$ rm -rf ~/.npm\n```\n\n## 写在最后\n\n出现这个问题是在安装Yarn的时候遇到的。在使用`HomeBrew`安装`Yarn`的时候，需要`brew link node`，但是link之后的版本是最新的7.9。\n\n本来新版本的Node带来了更多的特性，然而在使用`ng-cli`生成的项目中，打包的时候，`node-sass`一直出问题，因此需要工具来管理Node版本，固有此总结。\n\n同时，Yarn也是一个很方便的包管理器，推荐在安装包时尝试一下`Yarn`\n\n## 参考文章\n\n> [`brew link node` required for Yarn install #1505](https://github.com/yarnpkg/yarn/issues/1505)\n\n> [How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)](http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x)\n\n> [How do I downgrade node or install a specific previous version using homebrew?](https://apple.stackexchange.com/questions/171530/how-do-i-downgrade-node-or-install-a-specific-previous-version-using-homebrew)\n\n\n","source":"_posts/osx-using-the-brew-to-manage-multiple-node-version.md","raw":"---\ntitle: OS X中使用brew管理多个node版本\ndate: 2017-04-18 21:58:16\ntags: [node,osx]\n---\n<img src=\"https://cdn.thisjs.com/thisjs/nodejs_header-03e90275ca.svg\" width = \"1050\" alt=\"node list\" align=center />\n\n在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的[**NVM**(Node Version Manager)](https://github.com/creationix/nvm)可以帮助我们很好的进行版本管理。\n\n在OS X系统中，**HomeBrew**也是一个很方便的Node版本切换工具。\n\n以下是使用HomeBrew管理Node的一些操作\n\n<!--more-->\n\n## 查看可用版本\n\n```bash\n$ brew search node\n```\n即可看到当前可用的版本\n\n <img src=\"https://cdn.thisjs.com/thisjs/brew%20list.png\" width = \"680\"  alt=\"node list\" align=center />\n\n\n## 安装需要版本\n\n```bash\n$ brew install node@6\n```\n如果需要6.x.x中最新版本，可以使用\n\n```bash\n$ brew install node6-lts\n```\n\n## 切换版本\n\n* 首先取消当前版本\n\n```bash\n$ brew unlink node\n```\n\n* 切换到需要的版本\n\n```bash\n$ brew link node@6 [--force]\n```\n\n> 注意：在切换版本的时候，可能会需要用到 --force命令，强制执行。\n\n在切换版本时，可能会有一些文件需要删除，注意提示内容，执行即可\n\n**例如：**\n\n```bash\n$ rm '/usr/local/include/node/pthread-fixes.h'\n```\n## 检查切换是否成功\n\n```bash\n$ node -v\n```\n\n## 添加Path\n\n```bash\n$ which node # => /usr/local/bin/node\n$ export NODE_PATH='/usr/local/lib/node_modules' # <--- add this ~/.bashrc\n```\n\n## 删除所有Node\n\n```bash\n$ brew uninstall node\n# 或者 `brew uninstall --force node` 移除所有版本\n$ brew prune\n$ rm -f /usr/local/bin/npm /usr/local/lib/dtrace/node.d\n$ rm -rf ~/.npm\n```\n\n## 写在最后\n\n出现这个问题是在安装Yarn的时候遇到的。在使用`HomeBrew`安装`Yarn`的时候，需要`brew link node`，但是link之后的版本是最新的7.9。\n\n本来新版本的Node带来了更多的特性，然而在使用`ng-cli`生成的项目中，打包的时候，`node-sass`一直出问题，因此需要工具来管理Node版本，固有此总结。\n\n同时，Yarn也是一个很方便的包管理器，推荐在安装包时尝试一下`Yarn`\n\n## 参考文章\n\n> [`brew link node` required for Yarn install #1505](https://github.com/yarnpkg/yarn/issues/1505)\n\n> [How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)](http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x)\n\n> [How do I downgrade node or install a specific previous version using homebrew?](https://apple.stackexchange.com/questions/171530/how-do-i-downgrade-node-or-install-a-specific-previous-version-using-homebrew)\n\n\n","slug":"osx-using-the-brew-to-manage-multiple-node-version","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwg00191h2u64gph60x","content":"<p><img src=\"https://cdn.thisjs.com/thisjs/nodejs_header-03e90275ca.svg\" width=\"1050\" alt=\"node list\" align=\"center\"></p>\n<p>在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\"><strong>NVM</strong>(Node Version Manager)</a>可以帮助我们很好的进行版本管理。</p>\n<p>在OS X系统中，<strong>HomeBrew</strong>也是一个很方便的Node版本切换工具。</p>\n<p>以下是使用HomeBrew管理Node的一些操作</p>\n<a id=\"more\"></a>\n<h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew search node</span><br></pre></td></tr></table></figure>\n<p>即可看到当前可用的版本</p>\n<p> <img src=\"https://cdn.thisjs.com/thisjs/brew%20list.png\" width=\"680\" alt=\"node list\" align=\"center\"></p>\n<h2 id=\"安装需要版本\"><a href=\"#安装需要版本\" class=\"headerlink\" title=\"安装需要版本\"></a>安装需要版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node@6</span><br></pre></td></tr></table></figure>\n<p>如果需要6.x.x中最新版本，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node6-lts</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h2><ul>\n<li>首先取消当前版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew unlink node</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换到需要的版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew link node@6 [--force]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在切换版本的时候，可能会需要用到 –force命令，强制执行。</p>\n</blockquote>\n<p>在切换版本时，可能会有一些文件需要删除，注意提示内容，执行即可</p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm <span class=\"string\">'/usr/local/include/node/pthread-fixes.h'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查切换是否成功\"><a href=\"#检查切换是否成功\" class=\"headerlink\" title=\"检查切换是否成功\"></a>检查切换是否成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加Path\"><a href=\"#添加Path\" class=\"headerlink\" title=\"添加Path\"></a>添加Path</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">which</span> node <span class=\"comment\"># =&gt; /usr/local/bin/node</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> NODE_PATH=<span class=\"string\">'/usr/local/lib/node_modules'</span> <span class=\"comment\"># &lt;--- add this ~/.bashrc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"删除所有Node\"><a href=\"#删除所有Node\" class=\"headerlink\" title=\"删除所有Node\"></a>删除所有Node</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew uninstall node</span><br><span class=\"line\"><span class=\"comment\"># 或者 `brew uninstall --force node` 移除所有版本</span></span><br><span class=\"line\">$ brew prune</span><br><span class=\"line\">$ rm -f /usr/<span class=\"built_in\">local</span>/bin/npm /usr/<span class=\"built_in\">local</span>/lib/dtrace/node.d</span><br><span class=\"line\">$ rm -rf ~/.npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>出现这个问题是在安装Yarn的时候遇到的。在使用<code>HomeBrew</code>安装<code>Yarn</code>的时候，需要<code>brew link node</code>，但是link之后的版本是最新的7.9。</p>\n<p>本来新版本的Node带来了更多的特性，然而在使用<code>ng-cli</code>生成的项目中，打包的时候，<code>node-sass</code>一直出问题，因此需要工具来管理Node版本，固有此总结。</p>\n<p>同时，Yarn也是一个很方便的包管理器，推荐在安装包时尝试一下<code>Yarn</code></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://github.com/yarnpkg/yarn/issues/1505\" target=\"_blank\" rel=\"noopener\"><code>brew link node</code> required for Yarn install #1505</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x\" target=\"_blank\" rel=\"noopener\">How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://apple.stackexchange.com/questions/171530/how-do-i-downgrade-node-or-install-a-specific-previous-version-using-homebrew\" target=\"_blank\" rel=\"noopener\">How do I downgrade node or install a specific previous version using homebrew?</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/thisjs/nodejs_header-03e90275ca.svg\" width=\"1050\" alt=\"node list\" align=\"center\"></p>\n<p>在使用Node进行开发的时候，有时候需要在不同的Node版本中进行切换。首先，跨平台的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\"><strong>NVM</strong>(Node Version Manager)</a>可以帮助我们很好的进行版本管理。</p>\n<p>在OS X系统中，<strong>HomeBrew</strong>也是一个很方便的Node版本切换工具。</p>\n<p>以下是使用HomeBrew管理Node的一些操作</p>","more":"<h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew search node</span><br></pre></td></tr></table></figure>\n<p>即可看到当前可用的版本</p>\n<p> <img src=\"https://cdn.thisjs.com/thisjs/brew%20list.png\" width=\"680\" alt=\"node list\" align=\"center\"></p>\n<h2 id=\"安装需要版本\"><a href=\"#安装需要版本\" class=\"headerlink\" title=\"安装需要版本\"></a>安装需要版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node@6</span><br></pre></td></tr></table></figure>\n<p>如果需要6.x.x中最新版本，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node6-lts</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h2><ul>\n<li>首先取消当前版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew unlink node</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换到需要的版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew link node@6 [--force]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在切换版本的时候，可能会需要用到 –force命令，强制执行。</p>\n</blockquote>\n<p>在切换版本时，可能会有一些文件需要删除，注意提示内容，执行即可</p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm <span class=\"string\">'/usr/local/include/node/pthread-fixes.h'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查切换是否成功\"><a href=\"#检查切换是否成功\" class=\"headerlink\" title=\"检查切换是否成功\"></a>检查切换是否成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加Path\"><a href=\"#添加Path\" class=\"headerlink\" title=\"添加Path\"></a>添加Path</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">which</span> node <span class=\"comment\"># =&gt; /usr/local/bin/node</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> NODE_PATH=<span class=\"string\">'/usr/local/lib/node_modules'</span> <span class=\"comment\"># &lt;--- add this ~/.bashrc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"删除所有Node\"><a href=\"#删除所有Node\" class=\"headerlink\" title=\"删除所有Node\"></a>删除所有Node</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew uninstall node</span><br><span class=\"line\"><span class=\"comment\"># 或者 `brew uninstall --force node` 移除所有版本</span></span><br><span class=\"line\">$ brew prune</span><br><span class=\"line\">$ rm -f /usr/<span class=\"built_in\">local</span>/bin/npm /usr/<span class=\"built_in\">local</span>/lib/dtrace/node.d</span><br><span class=\"line\">$ rm -rf ~/.npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>出现这个问题是在安装Yarn的时候遇到的。在使用<code>HomeBrew</code>安装<code>Yarn</code>的时候，需要<code>brew link node</code>，但是link之后的版本是最新的7.9。</p>\n<p>本来新版本的Node带来了更多的特性，然而在使用<code>ng-cli</code>生成的项目中，打包的时候，<code>node-sass</code>一直出问题，因此需要工具来管理Node版本，固有此总结。</p>\n<p>同时，Yarn也是一个很方便的包管理器，推荐在安装包时尝试一下<code>Yarn</code></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://github.com/yarnpkg/yarn/issues/1505\" target=\"_blank\" rel=\"noopener\"><code>brew link node</code> required for Yarn install #1505</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x\" target=\"_blank\" rel=\"noopener\">How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://apple.stackexchange.com/questions/171530/how-do-i-downgrade-node-or-install-a-specific-previous-version-using-homebrew\" target=\"_blank\" rel=\"noopener\">How do I downgrade node or install a specific previous version using homebrew?</a></p>\n</blockquote>"},{"title":"php实现分页的简单方法","date":"2014-05-18T10:51:28.000Z","_content":"实现分页的控制代码\n\n<!--more-->\n\n```php\n<?\n//获得总页及设定每页显示贴子,开始分页显示\n$list_num=5;\n$result1=mysql_query(\"select count(*) from news\");\n$rs=mysql_fetch_array($result1);\n$num=$rs[0];\n$pagenumber=ceil($num/$list_num);\n$page=$_GET[page];\nif($page<2)\n{\n\t$page=0;\n}\nelse\n{\n\t $page=$page-1;\n}\n$startnum=$page*5;\n//获得总页及设定每页显示贴子\n  //循环获取数据开始\n  $result = mysql_query(\"SELECT * FROM news order by date desc limit $startnum,5\");\n  while($row = mysql_fetch_array($result))\n  {\n  ?>\n ```\n 实现分页\n ```php\n  //页码显示\nfor ($i=1;$i<=($pagenumber);$i++){\necho \"<a href=\\\"news fenye.php?page=$i\\\">$i</a> \";\n}\n //页码显示\n?>\n```","source":"_posts/php-implementation-simple-method-of-paging.md","raw":"---\ntitle: php实现分页的简单方法\ndate: 2014-05-18 10:51:28\ntags: php\n---\n实现分页的控制代码\n\n<!--more-->\n\n```php\n<?\n//获得总页及设定每页显示贴子,开始分页显示\n$list_num=5;\n$result1=mysql_query(\"select count(*) from news\");\n$rs=mysql_fetch_array($result1);\n$num=$rs[0];\n$pagenumber=ceil($num/$list_num);\n$page=$_GET[page];\nif($page<2)\n{\n\t$page=0;\n}\nelse\n{\n\t $page=$page-1;\n}\n$startnum=$page*5;\n//获得总页及设定每页显示贴子\n  //循环获取数据开始\n  $result = mysql_query(\"SELECT * FROM news order by date desc limit $startnum,5\");\n  while($row = mysql_fetch_array($result))\n  {\n  ?>\n ```\n 实现分页\n ```php\n  //页码显示\nfor ($i=1;$i<=($pagenumber);$i++){\necho \"<a href=\\\"news fenye.php?page=$i\\\">$i</a> \";\n}\n //页码显示\n?>\n```","slug":"php-implementation-simple-method-of-paging","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwh001b1h2uc47a2n89","content":"<p>实现分页的控制代码</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span></span><br><span class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子,开始分页显示</span></span><br><span class=\"line\">$list_num=<span class=\"number\">5</span>;</span><br><span class=\"line\">$result1=mysql_query(<span class=\"string\">\"select count(*) from news\"</span>);</span><br><span class=\"line\">$rs=mysql_fetch_array($result1);</span><br><span class=\"line\">$num=$rs[<span class=\"number\">0</span>];</span><br><span class=\"line\">$pagenumber=ceil($num/$list_num);</span><br><span class=\"line\">$page=$_GET[page];</span><br><span class=\"line\"><span class=\"keyword\">if</span>($page&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$page=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t $page=$page<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$startnum=$page*<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子</span></span><br><span class=\"line\">  <span class=\"comment\">//循环获取数据开始</span></span><br><span class=\"line\">  $result = mysql_query(<span class=\"string\">\"SELECT * FROM news order by date desc limit $startnum,5\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 实现分页<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//页码显示</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>;$i&lt;=($pagenumber);$i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href=\\\"news fenye.php?page=$i\\\"&gt;$i&lt;/a&gt; \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//页码显示</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>实现分页的控制代码</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span></span><br><span class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子,开始分页显示</span></span><br><span class=\"line\">$list_num=<span class=\"number\">5</span>;</span><br><span class=\"line\">$result1=mysql_query(<span class=\"string\">\"select count(*) from news\"</span>);</span><br><span class=\"line\">$rs=mysql_fetch_array($result1);</span><br><span class=\"line\">$num=$rs[<span class=\"number\">0</span>];</span><br><span class=\"line\">$pagenumber=ceil($num/$list_num);</span><br><span class=\"line\">$page=$_GET[page];</span><br><span class=\"line\"><span class=\"keyword\">if</span>($page&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$page=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t $page=$page<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$startnum=$page*<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">//获得总页及设定每页显示贴子</span></span><br><span class=\"line\">  <span class=\"comment\">//循环获取数据开始</span></span><br><span class=\"line\">  $result = mysql_query(<span class=\"string\">\"SELECT * FROM news order by date desc limit $startnum,5\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 实现分页<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//页码显示</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>;$i&lt;=($pagenumber);$i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href=\\\"news fenye.php?page=$i\\\"&gt;$i&lt;/a&gt; \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//页码显示</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"php时间戳转换差8小时问题","date":"2014-05-17T11:56:31.000Z","_content":"PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) \n\n所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. \n\n正常日期类型是保存为DATE型的. \n\n这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. \n\n像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! \n\n<!--more-->\n\n所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date('Y-m-d');,关于里面参数的 意思,如不懂就查一下php的手册了. \n\n好,言归正传,把1228348800转成2008-12-4格式代码如下： \n\n`$date3=date('Y-m-d H:i:s',\"1228348800\"); `\n\n这样就OK了,如还想得到小时,分钟秒,只要把'Y-m-d'改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. \n\n时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： \n\n```php\n$year=((int)substr(\"2008-12-04\",0,4));//取得年份 \n\n$month=((int)substr(\"2008-12-04\",5,2));//取得月份 \n\n$day=((int)substr(\"2008-12-04\",8,2));//取得几号 \n\necho mktime(0,0,0,$month,$day,$year); \n\n```\n\n这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, \n\n注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下 \n1、最简单的方法就是不要用php5.1以上的版本--显然这是不可取的方法！！！ \n\n2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可--缺点就是如果程序 \n放到别人的服务器上，不能修改php.ini，那就奈何不得了。 \n\n3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(\"Asia/Shanghai\"); ”这个可以由程序员任意设置，我的推 \n荐。 \n时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin \n港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北） \n还有新加坡：Asia/Singapore \n澳大利亚：Australia/Sydney \n\n[原文地址](http://hailinhe1986-163-com.javaeye.com/blog/484538)","source":"_posts/php-timestamp-conversion-problem-eight-hours.md","raw":"---\ntitle: php时间戳转换差8小时问题\ndate: 2014-05-17 11:56:31\ntags: php\n---\nPHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) \n\n所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. \n\n正常日期类型是保存为DATE型的. \n\n这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. \n\n像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! \n\n<!--more-->\n\n所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date('Y-m-d');,关于里面参数的 意思,如不懂就查一下php的手册了. \n\n好,言归正传,把1228348800转成2008-12-4格式代码如下： \n\n`$date3=date('Y-m-d H:i:s',\"1228348800\"); `\n\n这样就OK了,如还想得到小时,分钟秒,只要把'Y-m-d'改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. \n\n时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： \n\n```php\n$year=((int)substr(\"2008-12-04\",0,4));//取得年份 \n\n$month=((int)substr(\"2008-12-04\",5,2));//取得月份 \n\n$day=((int)substr(\"2008-12-04\",8,2));//取得几号 \n\necho mktime(0,0,0,$month,$day,$year); \n\n```\n\n这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, \n\n注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下 \n1、最简单的方法就是不要用php5.1以上的版本--显然这是不可取的方法！！！ \n\n2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可--缺点就是如果程序 \n放到别人的服务器上，不能修改php.ini，那就奈何不得了。 \n\n3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(\"Asia/Shanghai\"); ”这个可以由程序员任意设置，我的推 \n荐。 \n时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin \n港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北） \n还有新加坡：Asia/Singapore \n澳大利亚：Australia/Sydney \n\n[原文地址](http://hailinhe1986-163-com.javaeye.com/blog/484538)","slug":"php-timestamp-conversion-problem-eight-hours","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwk001d1h2uusmbtgc0","content":"<p>PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) </p>\n<p>所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. </p>\n<p>正常日期类型是保存为DATE型的. </p>\n<p>这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. </p>\n<p>像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! </p>\n<a id=\"more\"></a>\n<p>所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date(‘Y-m-d’);,关于里面参数的 意思,如不懂就查一下php的手册了. </p>\n<p>好,言归正传,把1228348800转成2008-12-4格式代码如下： </p>\n<p><code>$date3=date(&#39;Y-m-d H:i:s&#39;,&quot;1228348800&quot;);</code></p>\n<p>这样就OK了,如还想得到小时,分钟秒,只要把’Y-m-d’改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. </p>\n<p>时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$year=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));<span class=\"comment\">//取得年份 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$month=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得月份 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$day=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得几号 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> mktime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$month,$day,$year);</span><br></pre></td></tr></table></figure>\n<p>这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, </p>\n<p>注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下<br>1、最简单的方法就是不要用php5.1以上的版本–显然这是不可取的方法！！！ </p>\n<p>2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可–缺点就是如果程序<br>放到别人的服务器上，不能修改php.ini，那就奈何不得了。 </p>\n<p>3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(“Asia/Shanghai”); ”这个可以由程序员任意设置，我的推<br>荐。<br>时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin<br>港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北）<br>还有新加坡：Asia/Singapore<br>澳大利亚：Australia/Sydney </p>\n<p><a href=\"http://hailinhe1986-163-com.javaeye.com/blog/484538\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<p>PHP时间大的来分有两种,一是时间戳类型(1228348800),二是正常日期格式(2008-12-4) </p>\n<p>所以存到数据库也有两种形式了(真正不止,我的应用就两种),时间戳类型我是保存为字符串的,这个是比较方便的. </p>\n<p>正常日期类型是保存为DATE型的. </p>\n<p>这两个要注意一下,我平时用两种,所以,前几天建的表,把时间类型存为DATE的,我还一直用时间戳保存,一直资料写不进表,调试了好久的才知错误之处,是类型不符合,不给写入库. </p>\n<p>像上面的时间戳是比较方便,但,显示的时候,不至于把这个1228348800串给客户看吧,GOD NOWS! </p>","more":"<p>所 以就用到了这两个的转换,先说一下如何取得当前的时间戳,$date1=time();这样就取得当前的时间戳了,要转回2008-12-4这种格式呢, 用到date()这个函数了,在PHP中date()函数比较常用,如取得当前日期,可以用$date2=date(‘Y-m-d’);,关于里面参数的 意思,如不懂就查一下php的手册了. </p>\n<p>好,言归正传,把1228348800转成2008-12-4格式代码如下： </p>\n<p><code>$date3=date(&#39;Y-m-d H:i:s&#39;,&quot;1228348800&quot;);</code></p>\n<p>这样就OK了,如还想得到小时,分钟秒,只要把’Y-m-d’改一下就可以了,不过要注意一下,PHP时间还像有8个小时的误差.加上就OK了. </p>\n<p>时间戳转正常日期有了,反之呢,把正常日期格式转为时间戳呢,请看如下代码： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$year=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>));<span class=\"comment\">//取得年份 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$month=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得月份 </span></span><br><span class=\"line\"></span><br><span class=\"line\">$day=((int)substr(<span class=\"string\">\"2008-12-04\"</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>));<span class=\"comment\">//取得几号 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> mktime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$month,$day,$year);</span><br></pre></td></tr></table></figure>\n<p>这样就能把正常日期转成时间戳了,这里如果有时分秒也是同理, </p>\n<p>注意：php5.1以上时间戳会与实际时间相差8小时，解决办法如下<br>1、最简单的方法就是不要用php5.1以上的版本–显然这是不可取的方法！！！ </p>\n<p>2、修改php.ini。打开php.ini查找date.timezone 去掉前面的分号= 后面加Asia/Shanghai，重启apache服务器即可–缺点就是如果程序<br>放到别人的服务器上，不能修改php.ini，那就奈何不得了。 </p>\n<p>3、在程序中添加时间的初始化的语句的 即：“date_default_timezone_set(“Asia/Shanghai”); ”这个可以由程序员任意设置，我的推<br>荐。<br>时区标识符，大陆内地可用的值是：PRC，Asia/Chongqing ，Asia/Shanghai ，Asia/Urumqi （依次为中国，重庆，上海，乌鲁木齐） ，Etc/GMT-8，Asia/Harbin<br>港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北）<br>还有新加坡：Asia/Singapore<br>澳大利亚：Australia/Sydney </p>\n<p><a href=\"http://hailinhe1986-163-com.javaeye.com/blog/484538\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"实现一个URL中的中文路径英文化工具","date":"2017-03-21T10:21:15.000Z","_content":"\n![题图](https://cdn.thisjs.com/url-address.jpg?imageView/2/w/500)\n\n在使用[Hexo](https://hexo.io/)创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。\n\n<!--more-->\n\n最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照[W3CPlus](http://www.w3cplus.com/)的命名方式\n\n* 对应英文翻译\n* 所有字母小写\n* 空格变为- \n\n![W3C命名方式](https://cdn.thisjs.com/github/en-demo.png)\n\n最初使用手动方式将文件名拷贝到[谷歌翻译](http://translate.google.cn/)，得到翻译结果之后，将翻译结果变为小写，将空格替换为\"-\"，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。\n\n由于`Vue`的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用[loadash](https://lodash.com/)来进行数据处理\n\n### 所有字母小写\n\n```js\n_.lowerCase(str)\n\n```\n\n### 空格变为-\n\n使用正则表达式替换即可\n\n```js\nstr.replace(/\\s+/g, \"-\")\n\n```\n但是这时候可能会出现一个问题，在字符串前后都有空格的时候`\" Hello World \"`，会生成`\"-hello-world-\"`,这不是我们需要的\n\n所以在替换之前将首尾空格去掉即可\n\n```js\n_.trim(str)\n\n```\n所以初版就是这样子的\n\n![第一版功能](https://cdn.thisjs.com/github/first-result.png)\n\n## 添加翻译、复制功能\n\n但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是[有道翻译api](http://fanyi.youdao.com/openapi)，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的[axios](https://github.com/mzabriskie/axios)并不支持jsonp，所以采用[vue-resource](https://github.com/pagekit/vue-resource)。\n\n{% plantuml %}\n    title 请求流程\n\n    View -> Watcher : 数据改变\n\n    Watcher -> Methods : 调用方法\n\n    Methods --> 有道翻译 : 请求数据\n\n    有道翻译 --> Methods: 数据返回\n\n    Methods -> Methods : 数据格式化\n\n    Methods -> View : 展示数据 \n\n{% endplantuml %}\n\n但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供**1000**次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。\n\n```js\ngetTrans:_.debounce(function(){},500)\n\n```\n\n最后使用[clipboardjs](https://clipboardjs.com/)为格式化的结果提供一个复制功能。这样就更加方便了。\n\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n> 但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。","source":"_posts/realize-the-path-of-chinese-into-english.md","raw":"---\ntitle: 实现一个URL中的中文路径英文化工具\ndate: 2017-03-21 10:21:15\ntags: [vue,lodash]\n---\n\n![题图](https://cdn.thisjs.com/url-address.jpg?imageView/2/w/500)\n\n在使用[Hexo](https://hexo.io/)创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。\n\n<!--more-->\n\n最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照[W3CPlus](http://www.w3cplus.com/)的命名方式\n\n* 对应英文翻译\n* 所有字母小写\n* 空格变为- \n\n![W3C命名方式](https://cdn.thisjs.com/github/en-demo.png)\n\n最初使用手动方式将文件名拷贝到[谷歌翻译](http://translate.google.cn/)，得到翻译结果之后，将翻译结果变为小写，将空格替换为\"-\"，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。\n\n由于`Vue`的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用[loadash](https://lodash.com/)来进行数据处理\n\n### 所有字母小写\n\n```js\n_.lowerCase(str)\n\n```\n\n### 空格变为-\n\n使用正则表达式替换即可\n\n```js\nstr.replace(/\\s+/g, \"-\")\n\n```\n但是这时候可能会出现一个问题，在字符串前后都有空格的时候`\" Hello World \"`，会生成`\"-hello-world-\"`,这不是我们需要的\n\n所以在替换之前将首尾空格去掉即可\n\n```js\n_.trim(str)\n\n```\n所以初版就是这样子的\n\n![第一版功能](https://cdn.thisjs.com/github/first-result.png)\n\n## 添加翻译、复制功能\n\n但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是[有道翻译api](http://fanyi.youdao.com/openapi)，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的[axios](https://github.com/mzabriskie/axios)并不支持jsonp，所以采用[vue-resource](https://github.com/pagekit/vue-resource)。\n\n{% plantuml %}\n    title 请求流程\n\n    View -> Watcher : 数据改变\n\n    Watcher -> Methods : 调用方法\n\n    Methods --> 有道翻译 : 请求数据\n\n    有道翻译 --> Methods: 数据返回\n\n    Methods -> Methods : 数据格式化\n\n    Methods -> View : 展示数据 \n\n{% endplantuml %}\n\n但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供**1000**次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。\n\n```js\ngetTrans:_.debounce(function(){},500)\n\n```\n\n最后使用[clipboardjs](https://clipboardjs.com/)为格式化的结果提供一个复制功能。这样就更加方便了。\n\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n> 但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。","slug":"realize-the-path-of-chinese-into-english","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwl001g1h2ujil2yprn","content":"<p><img src=\"https://cdn.thisjs.com/url-address.jpg?imageView/2/w/500\" alt=\"题图\"></p>\n<p>在使用<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。</p>\n<a id=\"more\"></a>\n<p>最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照<a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"noopener\">W3CPlus</a>的命名方式</p>\n<ul>\n<li>对应英文翻译</li>\n<li>所有字母小写</li>\n<li>空格变为- </li>\n</ul>\n<p><img src=\"https://cdn.thisjs.com/github/en-demo.png\" alt=\"W3C命名方式\"></p>\n<p>最初使用手动方式将文件名拷贝到<a href=\"http://translate.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌翻译</a>，得到翻译结果之后，将翻译结果变为小写，将空格替换为”-“，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。</p>\n<p>由于<code>Vue</code>的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用<a href=\"https://lodash.com/\" target=\"_blank\" rel=\"noopener\">loadash</a>来进行数据处理</p>\n<h3 id=\"所有字母小写\"><a href=\"#所有字母小写\" class=\"headerlink\" title=\"所有字母小写\"></a>所有字母小写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lowerCase(str)</span><br></pre></td></tr></table></figure>\n<h3 id=\"空格变为\"><a href=\"#空格变为\" class=\"headerlink\" title=\"空格变为-\"></a>空格变为-</h3><p>使用正则表达式替换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">\"-\"</span>)</span><br></pre></td></tr></table></figure>\n<p>但是这时候可能会出现一个问题，在字符串前后都有空格的时候<code>&quot; Hello World &quot;</code>，会生成<code>&quot;-hello-world-&quot;</code>,这不是我们需要的</p>\n<p>所以在替换之前将首尾空格去掉即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.trim(str)</span><br></pre></td></tr></table></figure>\n<p>所以初版就是这样子的</p>\n<p><img src=\"https://cdn.thisjs.com/github/first-result.png\" alt=\"第一版功能\"></p>\n<h2 id=\"添加翻译、复制功能\"><a href=\"#添加翻译、复制功能\" class=\"headerlink\" title=\"添加翻译、复制功能\"></a>添加翻译、复制功能</h2><p>但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是<a href=\"http://fanyi.youdao.com/openapi\" target=\"_blank\" rel=\"noopener\">有道翻译api</a>，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">axios</a>并不支持jsonp，所以采用<a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">vue-resource</a>。</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJS-sDZvVqSt55PQPMgwWQwSGdbYId95Qf62by6pgXcUzwvvDsVcqVmON5qmSgCGtjIGZFwKOgEJ5XkRdKrOycxRpsUQfN5mmSLsWccTpEbysJdw-V_UBzHD12Y5sWKtauaAHr4MO2BFpnVufJsVFGp8GsKweinRiURgd_sdFD1HLO4zOAJpTEFNvabqGXGfS0000\">\n<p>但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供<strong>1000</strong>次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTrans:_.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<p>最后使用<a href=\"https://clipboardjs.com/\" target=\"_blank\" rel=\"noopener\">clipboardjs</a>为格式化的结果提供一个复制功能。这样就更加方便了。</p>\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n<blockquote>\n<p>但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/url-address.jpg?imageView/2/w/500\" alt=\"题图\"></p>\n<p>在使用<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>创建博客的时候，所有的博客内容为了与主题内容相同，使用了中文命名，导致生成的链接也是中文目录。</p>","more":"<p>最近将博客迁移到Centos中之后，由于中文文件名导致404问题。所以决定将所有的中文文件名改为对应的英文名，希望仿照<a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"noopener\">W3CPlus</a>的命名方式</p>\n<ul>\n<li>对应英文翻译</li>\n<li>所有字母小写</li>\n<li>空格变为- </li>\n</ul>\n<p><img src=\"https://cdn.thisjs.com/github/en-demo.png\" alt=\"W3C命名方式\"></p>\n<p>最初使用手动方式将文件名拷贝到<a href=\"http://translate.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌翻译</a>，得到翻译结果之后，将翻译结果变为小写，将空格替换为”-“，由于重复操作太多，所以决定写个小工具，来进行后面的2步操作。</p>\n<p>由于<code>Vue</code>的双向数据绑定的便利，所以使用Vue对数据进行监听修改，采用<a href=\"https://lodash.com/\" target=\"_blank\" rel=\"noopener\">loadash</a>来进行数据处理</p>\n<h3 id=\"所有字母小写\"><a href=\"#所有字母小写\" class=\"headerlink\" title=\"所有字母小写\"></a>所有字母小写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lowerCase(str)</span><br></pre></td></tr></table></figure>\n<h3 id=\"空格变为\"><a href=\"#空格变为\" class=\"headerlink\" title=\"空格变为-\"></a>空格变为-</h3><p>使用正则表达式替换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">\"-\"</span>)</span><br></pre></td></tr></table></figure>\n<p>但是这时候可能会出现一个问题，在字符串前后都有空格的时候<code>&quot; Hello World &quot;</code>，会生成<code>&quot;-hello-world-&quot;</code>,这不是我们需要的</p>\n<p>所以在替换之前将首尾空格去掉即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.trim(str)</span><br></pre></td></tr></table></figure>\n<p>所以初版就是这样子的</p>\n<p><img src=\"https://cdn.thisjs.com/github/first-result.png\" alt=\"第一版功能\"></p>\n<h2 id=\"添加翻译、复制功能\"><a href=\"#添加翻译、复制功能\" class=\"headerlink\" title=\"添加翻译、复制功能\"></a>添加翻译、复制功能</h2><p>但是这样还是需要切换页面进行复制粘贴，因此可以直接将翻译过程省略，首先想到的是<a href=\"http://fanyi.youdao.com/openapi\" target=\"_blank\" rel=\"noopener\">有道翻译api</a>，申请完key之后，发现如果使用json方式获取数据，那么会有跨域问题，只能使用jsonp方式，但是vue官方推荐的<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">axios</a>并不支持jsonp，所以采用<a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">vue-resource</a>。</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJS-sDZvVqSt55PQPMgwWQwSGdbYId95Qf62by6pgXcUzwvvDsVcqVmON5qmSgCGtjIGZFwKOgEJ5XkRdKrOycxRpsUQfN5mmSLsWccTpEbysJdw-V_UBzHD12Y5sWKtauaAHr4MO2BFpnVufJsVFGp8GsKweinRiURgd_sdFD1HLO4zOAJpTEFNvabqGXGfS0000\">\n<p>但是每次输入框发生变化，就会触发一次数据请求，而有道翻译每天提供<strong>1000</strong>次请求，所以，使用lodash的debounce方法，减少请求次数，在输入结束500ms之后，再发起请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTrans:_.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<p>最后使用<a href=\"https://clipboardjs.com/\" target=\"_blank\" rel=\"noopener\">clipboardjs</a>为格式化的结果提供一个复制功能。这样就更加方便了。</p>\n<script async src=\"//jsrun.net/yPkKp/embed/all/light/\"></script>\n\n<blockquote>\n<p>但是这样还是有些不方便，因为仍然需要选择文件名，然后粘贴，再复制粘贴，多了很多重复操作，所以可以使用Node的文档读取与操作功能实现该功能。</p>\n</blockquote>"},{"title":"解决Ubuntu下phpstorm配置完php环境之后仍出现502错误","date":"2014-05-25T21:06:56.000Z","_content":"即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的\n\n<!--more-->\n\n![问题图片](https://i.stack.imgur.com/3GHlJ.png)\n\n解决方案\n\n`sudo apt-get install php5-cgi  `","source":"_posts/solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes.md","raw":"---\ntitle: 解决Ubuntu下phpstorm配置完php环境之后仍出现502错误\ndate: 2014-05-25 21:06:56\ntags: 操作系统\n---\n即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的\n\n<!--more-->\n\n![问题图片](https://i.stack.imgur.com/3GHlJ.png)\n\n解决方案\n\n`sudo apt-get install php5-cgi  `","slug":"solution-under-ubuntu-phpstorm-after-configure-the-php-environment-is-still-502-mistakes","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwn001i1h2u6qiw87dj","content":"<p>即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的</p>\n<a id=\"more\"></a>\n<p><img src=\"https://i.stack.imgur.com/3GHlJ.png\" alt=\"问题图片\"></p>\n<p>解决方案</p>\n<p><code>sudo apt-get install php5-cgi</code></p>\n","site":{"data":{}},"excerpt":"<p>即使安装了php环境之后，仍然会出现502运行错误，这个问题是缺少-cgi导致的</p>","more":"<p><img src=\"https://i.stack.imgur.com/3GHlJ.png\" alt=\"问题图片\"></p>\n<p>解决方案</p>\n<p><code>sudo apt-get install php5-cgi</code></p>"},{"title":"解决混合网址导致的跨域问题","date":"2016-06-30T14:37:37.000Z","_content":"如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为\n> “Mixed Content: The page at 'https://yourwebsite.com/' was loaded over HTTPS，but requested an insecure script 'http://anotherweb.com/script.js'.This request has been blocked；the content must be served over HTTPS.”   \n\n<!--more-->\n\n以及   \n\n> Mixed Content: The page at 'https://yourweb.com/' was loaded over HTTPS，but requested an insecure image 'http://anotherweb.com/image.jpg'.This content should also be served over HTTPS\n\n这时候可以将引用的外域的资源的前面的地址 **http://** 改为 **//** 即可，这样就会让加载的方式默认使用https的方式加载资源。","source":"_posts/solve-the-problem-of-mixed-site-of-cross-domain.md","raw":"---\ntitle: 解决混合网址导致的跨域问题\ndate: 2016-06-30 14:37:37\ntags: [跨域]\n---\n如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为\n> “Mixed Content: The page at 'https://yourwebsite.com/' was loaded over HTTPS，but requested an insecure script 'http://anotherweb.com/script.js'.This request has been blocked；the content must be served over HTTPS.”   \n\n<!--more-->\n\n以及   \n\n> Mixed Content: The page at 'https://yourweb.com/' was loaded over HTTPS，but requested an insecure image 'http://anotherweb.com/image.jpg'.This content should also be served over HTTPS\n\n这时候可以将引用的外域的资源的前面的地址 **http://** 改为 **//** 即可，这样就会让加载的方式默认使用https的方式加载资源。","slug":"solve-the-problem-of-mixed-site-of-cross-domain","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwo001j1h2ui1vt00mb","content":"<p>如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为</p>\n<blockquote>\n<p>“Mixed Content: The page at ‘<a href=\"https://yourwebsite.com/&#39;\" target=\"_blank\" rel=\"noopener\">https://yourwebsite.com/&#39;</a> was loaded over HTTPS，but requested an insecure script ‘<a href=\"http://anotherweb.com/script.js&#39;.This\" target=\"_blank\" rel=\"noopener\">http://anotherweb.com/script.js&#39;.This</a> request has been blocked；the content must be served over HTTPS.”   </p>\n</blockquote>\n<a id=\"more\"></a>\n<p>以及   </p>\n<blockquote>\n<p>Mixed Content: The page at ‘<a href=\"https://yourweb.com/&#39;\" target=\"_blank\" rel=\"noopener\">https://yourweb.com/&#39;</a> was loaded over HTTPS，but requested an insecure image ‘<a href=\"http://anotherweb.com/image.jpg&#39;.This\" target=\"_blank\" rel=\"noopener\">http://anotherweb.com/image.jpg&#39;.This</a> content should also be served over HTTPS</p>\n</blockquote>\n<p>这时候可以将引用的外域的资源的前面的地址 <strong>http://</strong> 改为 <strong>//</strong> 即可，这样就会让加载的方式默认使用https的方式加载资源。</p>\n","site":{"data":{}},"excerpt":"<p>如果网站使用https安全方式加载HTML内容，但是其中的资源如js、图片等文件使用了http的不安全方式加载，就会触发混合内容的错误。在chrome浏览器中的提示为</p>\n<blockquote>\n<p>“Mixed Content: The page at ‘<a href=\"https://yourwebsite.com/&#39;\" target=\"_blank\" rel=\"noopener\">https://yourwebsite.com/&#39;</a> was loaded over HTTPS，but requested an insecure script ‘<a href=\"http://anotherweb.com/script.js&#39;.This\" target=\"_blank\" rel=\"noopener\">http://anotherweb.com/script.js&#39;.This</a> request has been blocked；the content must be served over HTTPS.”   </p>\n</blockquote>","more":"<p>以及   </p>\n<blockquote>\n<p>Mixed Content: The page at ‘<a href=\"https://yourweb.com/&#39;\" target=\"_blank\" rel=\"noopener\">https://yourweb.com/&#39;</a> was loaded over HTTPS，but requested an insecure image ‘<a href=\"http://anotherweb.com/image.jpg&#39;.This\" target=\"_blank\" rel=\"noopener\">http://anotherweb.com/image.jpg&#39;.This</a> content should also be served over HTTPS</p>\n</blockquote>\n<p>这时候可以将引用的外域的资源的前面的地址 <strong>http://</strong> 改为 <strong>//</strong> 即可，这样就会让加载的方式默认使用https的方式加载资源。</p>"},{"title":"goJs的一些使用技巧及问题解决方案","date":"2016-10-27T12:01:26.000Z","_content":"\n[go.js](https://gojs.net/)是一个非常强大的图表库，使用gojs可以制作不同的图标效果\n![gojsIntro](https://cdn.thisjs.com/github/gojsIntro.png)\n\n最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，[官方社区](https://forum.nwoods.com/c/gojs)会非常快速的帮助解答遇到的每个问题\n\n以下是我在开发中遇到的一些小问题，以及对应的解决方案\n\n<!--more-->\n\n# 在绘制流程图的过程中，连接线会自动选择最优的路径\n![连接线问题](https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png)\n![连接线问题2](https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png)\n\n这个问题的解决方案是\n* 为每一个连接点设置不同`Link.toPortId`，就像官方的例子中一样\n* 设置`GraphLinksModel.html.linkFromPortIdProperty` 和 `GraphLinksModel.html.linkToPortIdProperty`属性\n* 设置`diagram.model`的属性\n```js\nmyDiagram.model.linkFromPortIdProperty = \"fromPort\"; \n    myDiagram.model.linkToPortIdProperty = \"toPort\";\n```\n* 或者直接在初始化load(){}中的json数据中加入代码即可\n```js\nmodel.linkFromPortIdProperty = \"fromPort\"; \nmodel.linkToPortIdProperty = \"toPort\";\n```\n\n# 根据节点数据进行函数处理\n\n**假如我需要这样一个功能：**\n\n> 如果流程图的连接线没有文字，那么隐藏连接线上的文本panel\n\n这个问题可以根据`go.Binding`暴露对外接口的方式来实现\n\n```js\n\n new go.Binding(\"visible\", \"text\", function (t) { return t !== \"\" })\n\n ```\n\n # 设置图像的初始化缩放比例\n \n 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，\n * 可以在创建Diagram的时候进行设置\n ``` js\n myDiagram =\n      $(go.Diagram, \"myDiagramDiv\",  \n        {\n            scale : 1.3\n        });\n\n```\n* 同时可以使用`commandHandler`设置缩放比，实现放大缩小按钮\n\n```js\nmyDiagram.commandHandler.increaseZoom();\nmyDiagram.commandHandler.decreaseZoom();\n```\n\n# 画布无限拖动\n\n> 如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动\n\n```js\n\nmyDiagram.scrollMode = go.Diagram.InfiniteScroll;\n\n```\n\n> 同时我们可以通过设置画布属性，来为画布设置多余的留白空间\n\n```js\n scrollMargin: new go.Margin(100, 200, 100, 100),  //设置界面留白空间，允许用户拖动范围\n \n ```\n\n\n # 连接线的绕行路线问题\n\n go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。\n\n ![绕开节点](https://cdn.thisjs.com/github/linkrout.png)\n\n 这个只需在初始化连接线的时候，修改routing属性即可\n\n ```js\n $(go.Link, \n        {\n            routing: go.Link.AvoidsNodes // 绕行节点\n        },\n ```\n\n 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性`avoidable`即可\n\n ```js\n avoidable:false\n ```\n\n\n\n\n\n # 参考内容\n\n http://gojs.net/latest/samples/scrollModes.html\n\n http://gojs.net/latest/intro/index.html\n\n https://forum.nwoods.com/c/gojs","source":"_posts/some-of-gojs-tips-and-solutions.md","raw":"---\ntitle: goJs的一些使用技巧及问题解决方案\ndate: 2016-10-27 12:01:26\ntags: [gojs,javascript]\n---\n\n[go.js](https://gojs.net/)是一个非常强大的图表库，使用gojs可以制作不同的图标效果\n![gojsIntro](https://cdn.thisjs.com/github/gojsIntro.png)\n\n最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，[官方社区](https://forum.nwoods.com/c/gojs)会非常快速的帮助解答遇到的每个问题\n\n以下是我在开发中遇到的一些小问题，以及对应的解决方案\n\n<!--more-->\n\n# 在绘制流程图的过程中，连接线会自动选择最优的路径\n![连接线问题](https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png)\n![连接线问题2](https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png)\n\n这个问题的解决方案是\n* 为每一个连接点设置不同`Link.toPortId`，就像官方的例子中一样\n* 设置`GraphLinksModel.html.linkFromPortIdProperty` 和 `GraphLinksModel.html.linkToPortIdProperty`属性\n* 设置`diagram.model`的属性\n```js\nmyDiagram.model.linkFromPortIdProperty = \"fromPort\"; \n    myDiagram.model.linkToPortIdProperty = \"toPort\";\n```\n* 或者直接在初始化load(){}中的json数据中加入代码即可\n```js\nmodel.linkFromPortIdProperty = \"fromPort\"; \nmodel.linkToPortIdProperty = \"toPort\";\n```\n\n# 根据节点数据进行函数处理\n\n**假如我需要这样一个功能：**\n\n> 如果流程图的连接线没有文字，那么隐藏连接线上的文本panel\n\n这个问题可以根据`go.Binding`暴露对外接口的方式来实现\n\n```js\n\n new go.Binding(\"visible\", \"text\", function (t) { return t !== \"\" })\n\n ```\n\n # 设置图像的初始化缩放比例\n \n 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，\n * 可以在创建Diagram的时候进行设置\n ``` js\n myDiagram =\n      $(go.Diagram, \"myDiagramDiv\",  \n        {\n            scale : 1.3\n        });\n\n```\n* 同时可以使用`commandHandler`设置缩放比，实现放大缩小按钮\n\n```js\nmyDiagram.commandHandler.increaseZoom();\nmyDiagram.commandHandler.decreaseZoom();\n```\n\n# 画布无限拖动\n\n> 如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动\n\n```js\n\nmyDiagram.scrollMode = go.Diagram.InfiniteScroll;\n\n```\n\n> 同时我们可以通过设置画布属性，来为画布设置多余的留白空间\n\n```js\n scrollMargin: new go.Margin(100, 200, 100, 100),  //设置界面留白空间，允许用户拖动范围\n \n ```\n\n\n # 连接线的绕行路线问题\n\n go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。\n\n ![绕开节点](https://cdn.thisjs.com/github/linkrout.png)\n\n 这个只需在初始化连接线的时候，修改routing属性即可\n\n ```js\n $(go.Link, \n        {\n            routing: go.Link.AvoidsNodes // 绕行节点\n        },\n ```\n\n 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性`avoidable`即可\n\n ```js\n avoidable:false\n ```\n\n\n\n\n\n # 参考内容\n\n http://gojs.net/latest/samples/scrollModes.html\n\n http://gojs.net/latest/intro/index.html\n\n https://forum.nwoods.com/c/gojs","slug":"some-of-gojs-tips-and-solutions","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwq001m1h2unq5p9hi0","content":"<p><a href=\"https://gojs.net/\" target=\"_blank\" rel=\"noopener\">go.js</a>是一个非常强大的图表库，使用gojs可以制作不同的图标效果<br><img src=\"https://cdn.thisjs.com/github/gojsIntro.png\" alt=\"gojsIntro\"></p>\n<p>最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，<a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"noopener\">官方社区</a>会非常快速的帮助解答遇到的每个问题</p>\n<p>以下是我在开发中遇到的一些小问题，以及对应的解决方案</p>\n<a id=\"more\"></a>\n<h1 id=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"><a href=\"#在绘制流程图的过程中，连接线会自动选择最优的路径\" class=\"headerlink\" title=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"></a>在绘制流程图的过程中，连接线会自动选择最优的路径</h1><p><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png\" alt=\"连接线问题\"><br><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png\" alt=\"连接线问题2\"></p>\n<p>这个问题的解决方案是</p>\n<ul>\n<li>为每一个连接点设置不同<code>Link.toPortId</code>，就像官方的例子中一样</li>\n<li>设置<code>GraphLinksModel.html.linkFromPortIdProperty</code> 和 <code>GraphLinksModel.html.linkToPortIdProperty</code>属性</li>\n<li><p>设置<code>diagram.model</code>的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </span><br><span class=\"line\">    myDiagram.model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在初始化load(){}中的json数据中加入代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </span><br><span class=\"line\">model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"根据节点数据进行函数处理\"><a href=\"#根据节点数据进行函数处理\" class=\"headerlink\" title=\"根据节点数据进行函数处理\"></a>根据节点数据进行函数处理</h1><p><strong>假如我需要这样一个功能：</strong></p>\n<blockquote>\n<p>如果流程图的连接线没有文字，那么隐藏连接线上的文本panel</p>\n</blockquote>\n<p>这个问题可以根据<code>go.Binding</code>暴露对外接口的方式来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> go.Binding(<span class=\"string\">\"visible\"</span>, <span class=\"string\">\"text\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t !== <span class=\"string\">\"\"</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置图像的初始化缩放比例\"><a href=\"#设置图像的初始化缩放比例\" class=\"headerlink\" title=\"设置图像的初始化缩放比例\"></a>设置图像的初始化缩放比例</h1><p> 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，</p>\n<ul>\n<li>可以在创建Diagram的时候进行设置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram =</span><br><span class=\"line\">     $(go.Diagram, <span class=\"string\">\"myDiagramDiv\"</span>,  </span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           scale : <span class=\"number\">1.3</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>同时可以使用<code>commandHandler</code>设置缩放比，实现放大缩小按钮</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.commandHandler.increaseZoom();</span><br><span class=\"line\">myDiagram.commandHandler.decreaseZoom();</span><br></pre></td></tr></table></figure>\n<h1 id=\"画布无限拖动\"><a href=\"#画布无限拖动\" class=\"headerlink\" title=\"画布无限拖动\"></a>画布无限拖动</h1><blockquote>\n<p>如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myDiagram.scrollMode = go.Diagram.InfiniteScroll;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同时我们可以通过设置画布属性，来为画布设置多余的留白空间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollMargin: <span class=\"keyword\">new</span> go.Margin(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>),  <span class=\"comment\">//设置界面留白空间，允许用户拖动范围</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"连接线的绕行路线问题\"><a href=\"#连接线的绕行路线问题\" class=\"headerlink\" title=\"连接线的绕行路线问题\"></a>连接线的绕行路线问题</h1><p> go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。</p>\n<p> <img src=\"https://cdn.thisjs.com/github/linkrout.png\" alt=\"绕开节点\"></p>\n<p> 这个只需在初始化连接线的时候，修改routing属性即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(go.Link, </span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           routing: go.Link.AvoidsNodes <span class=\"comment\">// 绕行节点</span></span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure>\n<p> 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性<code>avoidable</code>即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avoidable:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h1><p> <a href=\"http://gojs.net/latest/samples/scrollModes.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/samples/scrollModes.html</a></p>\n<p> <a href=\"http://gojs.net/latest/intro/index.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/intro/index.html</a></p>\n<p> <a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"noopener\">https://forum.nwoods.com/c/gojs</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://gojs.net/\" target=\"_blank\" rel=\"noopener\">go.js</a>是一个非常强大的图表库，使用gojs可以制作不同的图标效果<br><img src=\"https://cdn.thisjs.com/github/gojsIntro.png\" alt=\"gojsIntro\"></p>\n<p>最近在使用go.js制作流程图效果，遇到了不同的问题，幸运的是，<a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"noopener\">官方社区</a>会非常快速的帮助解答遇到的每个问题</p>\n<p>以下是我在开发中遇到的一些小问题，以及对应的解决方案</p>","more":"<h1 id=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"><a href=\"#在绘制流程图的过程中，连接线会自动选择最优的路径\" class=\"headerlink\" title=\"在绘制流程图的过程中，连接线会自动选择最优的路径\"></a>在绘制流程图的过程中，连接线会自动选择最优的路径</h1><p><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/6/6d8542835dec4100e879b3fd4ce3b6eb84b31db5.png\" alt=\"连接线问题\"><br><img src=\"https://forum.nwoods.com/uploads/db3963/original/2X/1/11ed210d5662c95757457cdae1ae4e188c9ddb24.png\" alt=\"连接线问题2\"></p>\n<p>这个问题的解决方案是</p>\n<ul>\n<li>为每一个连接点设置不同<code>Link.toPortId</code>，就像官方的例子中一样</li>\n<li>设置<code>GraphLinksModel.html.linkFromPortIdProperty</code> 和 <code>GraphLinksModel.html.linkToPortIdProperty</code>属性</li>\n<li><p>设置<code>diagram.model</code>的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </span><br><span class=\"line\">    myDiagram.model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在初始化load(){}中的json数据中加入代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.linkFromPortIdProperty = <span class=\"string\">\"fromPort\"</span>; </span><br><span class=\"line\">model.linkToPortIdProperty = <span class=\"string\">\"toPort\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"根据节点数据进行函数处理\"><a href=\"#根据节点数据进行函数处理\" class=\"headerlink\" title=\"根据节点数据进行函数处理\"></a>根据节点数据进行函数处理</h1><p><strong>假如我需要这样一个功能：</strong></p>\n<blockquote>\n<p>如果流程图的连接线没有文字，那么隐藏连接线上的文本panel</p>\n</blockquote>\n<p>这个问题可以根据<code>go.Binding</code>暴露对外接口的方式来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> go.Binding(<span class=\"string\">\"visible\"</span>, <span class=\"string\">\"text\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">t</span>) </span>&#123; <span class=\"keyword\">return</span> t !== <span class=\"string\">\"\"</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置图像的初始化缩放比例\"><a href=\"#设置图像的初始化缩放比例\" class=\"headerlink\" title=\"设置图像的初始化缩放比例\"></a>设置图像的初始化缩放比例</h1><p> 有时候，我们需要用户在进入界面的时候，就有一个与原始比例不同的缩放比，</p>\n<ul>\n<li>可以在创建Diagram的时候进行设置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram =</span><br><span class=\"line\">     $(go.Diagram, <span class=\"string\">\"myDiagramDiv\"</span>,  </span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           scale : <span class=\"number\">1.3</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>同时可以使用<code>commandHandler</code>设置缩放比，实现放大缩小按钮</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiagram.commandHandler.increaseZoom();</span><br><span class=\"line\">myDiagram.commandHandler.decreaseZoom();</span><br></pre></td></tr></table></figure>\n<h1 id=\"画布无限拖动\"><a href=\"#画布无限拖动\" class=\"headerlink\" title=\"画布无限拖动\"></a>画布无限拖动</h1><blockquote>\n<p>如果用户在绘制的时候，需要实现两个距离非常远的节点的链接，那么就需要用到无限拖动</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myDiagram.scrollMode = go.Diagram.InfiniteScroll;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同时我们可以通过设置画布属性，来为画布设置多余的留白空间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollMargin: <span class=\"keyword\">new</span> go.Margin(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>),  <span class=\"comment\">//设置界面留白空间，允许用户拖动范围</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"连接线的绕行路线问题\"><a href=\"#连接线的绕行路线问题\" class=\"headerlink\" title=\"连接线的绕行路线问题\"></a>连接线的绕行路线问题</h1><p> go.js为我们提供了非常方便的节点绕开方案，即遇到节点之后，连接线会自动绕开。</p>\n<p> <img src=\"https://cdn.thisjs.com/github/linkrout.png\" alt=\"绕开节点\"></p>\n<p> 这个只需在初始化连接线的时候，修改routing属性即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(go.Link, </span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           routing: go.Link.AvoidsNodes <span class=\"comment\">// 绕行节点</span></span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure>\n<p> 但是，有时候我们有些节点不需要被绕开，他们可以附着在连接线上，这时候可以为此几点，修改属性<code>avoidable</code>即可</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avoidable:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h1><p> <a href=\"http://gojs.net/latest/samples/scrollModes.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/samples/scrollModes.html</a></p>\n<p> <a href=\"http://gojs.net/latest/intro/index.html\" target=\"_blank\" rel=\"noopener\">http://gojs.net/latest/intro/index.html</a></p>\n<p> <a href=\"https://forum.nwoods.com/c/gojs\" target=\"_blank\" rel=\"noopener\">https://forum.nwoods.com/c/gojs</a></p>"},{"title":"Ubuntu12添加程序启动器","date":"2014-05-21T15:11:48.000Z","_content":"> * 在/usr/share/applications目录下\n\n```\ncd /usr/share/applications  \nvim eclipse.desktop  \n```\n<!---more-->\n\n> * 编辑eclipse.desktop并保存。简单的配置示例：\n\n```\n[Desktop Entry]  \nVersion=1.0  \nName=eclipse  \nExec=/home/hu/soft/eclipse/eclipse  \nTerminal=false  \nIcon=/home/hu/soft/eclipse/icon.xpm  \nType=Application  \nCategories=Development  \n```","source":"_posts/starter-ubuntu-12-add-program.md","raw":"---\ntitle: Ubuntu12添加程序启动器\ndate: 2014-05-21 15:11:48\ntags: 操作系统\n---\n> * 在/usr/share/applications目录下\n\n```\ncd /usr/share/applications  \nvim eclipse.desktop  \n```\n<!---more-->\n\n> * 编辑eclipse.desktop并保存。简单的配置示例：\n\n```\n[Desktop Entry]  \nVersion=1.0  \nName=eclipse  \nExec=/home/hu/soft/eclipse/eclipse  \nTerminal=false  \nIcon=/home/hu/soft/eclipse/icon.xpm  \nType=Application  \nCategories=Development  \n```","slug":"starter-ubuntu-12-add-program","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwr001o1h2usaku83nf","content":"<blockquote>\n<ul>\n<li>在/usr/share/applications目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/applications  </span><br><span class=\"line\">vim eclipse.desktop</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>编辑eclipse.desktop并保存。简单的配置示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]  </span><br><span class=\"line\">Version=1.0  </span><br><span class=\"line\">Name=eclipse  </span><br><span class=\"line\">Exec=/home/hu/soft/eclipse/eclipse  </span><br><span class=\"line\">Terminal=false  </span><br><span class=\"line\">Icon=/home/hu/soft/eclipse/icon.xpm  </span><br><span class=\"line\">Type=Application  </span><br><span class=\"line\">Categories=Development</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<ul>\n<li>在/usr/share/applications目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/applications  </span><br><span class=\"line\">vim eclipse.desktop</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<ul>\n<li>编辑eclipse.desktop并保存。简单的配置示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]  </span><br><span class=\"line\">Version=1.0  </span><br><span class=\"line\">Name=eclipse  </span><br><span class=\"line\">Exec=/home/hu/soft/eclipse/eclipse  </span><br><span class=\"line\">Terminal=false  </span><br><span class=\"line\">Icon=/home/hu/soft/eclipse/icon.xpm  </span><br><span class=\"line\">Type=Application  </span><br><span class=\"line\">Categories=Development</span><br></pre></td></tr></table></figure>"},{"title":"淘宝提供ip数据库api","date":"2013-07-23T16:51:04.000Z","_content":"地址：[ip.taobao.com](http://ip.taobao.com)\n**接口说明**\n---\n1. 请求接口（GET）：\n`http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]`\n2. 响应信息：\n（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商\n\n<!--more-->\n\n3. 返回数据格式：\n```\n{\"code\":0,\"data\":{\"ip\":\"210.75.225.254\",\"country\":\"\\u4e2d\\u56fd\",\"area\":\"\\u534e\\u5317\",\n\"region\":\"\\u5317\\u4eac\\u5e02\",\"city\":\"\\u5317\\u4eac\\u5e02\",\"county\":\"\",\"isp\":\"\\u7535\\u4fe1\",\n\"country_id\":\"86\",\"area_id\":\"100000\",\"region_id\":\"110000\",\"city_id\":\"110000\",\n\"county_id\":\"-1\",\"isp_id\":\"100017\"}}\n```\n**访问限制**\n---\n为了保障服务正常运行，每个用户的访问频率需小于10qps。\n其中code的值的含义为，0：成功，1：失败。\n\n---\n\n*另外补充*\n搜狐IP地址查询接口（默认GBK）：http://pv.sohu.com/cityjson\n搜狐IP地址查询接口（可设置编码）：http://pv.sohu.com/cityjson?ie=utf-8\n搜狐另外的IP地址查询接口：http://txt.go.sohu.com/ip/soip","source":"_posts/taobao-provide-ip-database-api.md","raw":"---\ntitle: 淘宝提供ip数据库api\ndate: 2013-07-23 16:51:04\ntags: [API]\n---\n地址：[ip.taobao.com](http://ip.taobao.com)\n**接口说明**\n---\n1. 请求接口（GET）：\n`http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]`\n2. 响应信息：\n（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商\n\n<!--more-->\n\n3. 返回数据格式：\n```\n{\"code\":0,\"data\":{\"ip\":\"210.75.225.254\",\"country\":\"\\u4e2d\\u56fd\",\"area\":\"\\u534e\\u5317\",\n\"region\":\"\\u5317\\u4eac\\u5e02\",\"city\":\"\\u5317\\u4eac\\u5e02\",\"county\":\"\",\"isp\":\"\\u7535\\u4fe1\",\n\"country_id\":\"86\",\"area_id\":\"100000\",\"region_id\":\"110000\",\"city_id\":\"110000\",\n\"county_id\":\"-1\",\"isp_id\":\"100017\"}}\n```\n**访问限制**\n---\n为了保障服务正常运行，每个用户的访问频率需小于10qps。\n其中code的值的含义为，0：成功，1：失败。\n\n---\n\n*另外补充*\n搜狐IP地址查询接口（默认GBK）：http://pv.sohu.com/cityjson\n搜狐IP地址查询接口（可设置编码）：http://pv.sohu.com/cityjson?ie=utf-8\n搜狐另外的IP地址查询接口：http://txt.go.sohu.com/ip/soip","slug":"taobao-provide-ip-database-api","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwt001q1h2ur8r81xr8","content":"<p>地址：<a href=\"http://ip.taobao.com\" target=\"_blank\" rel=\"noopener\">ip.taobao.com</a></p>\n<h2 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a><strong>接口说明</strong></h2><ol>\n<li>请求接口（GET）：<br><code>http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]</code></li>\n<li>响应信息：<br>（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"3\">\n<li>返回数据格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;code&quot;:0,&quot;data&quot;:&#123;&quot;ip&quot;:&quot;210.75.225.254&quot;,&quot;country&quot;:&quot;\\u4e2d\\u56fd&quot;,&quot;area&quot;:&quot;\\u534e\\u5317&quot;,</span><br><span class=\"line\">&quot;region&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;city&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;county&quot;:&quot;&quot;,&quot;isp&quot;:&quot;\\u7535\\u4fe1&quot;,</span><br><span class=\"line\">&quot;country_id&quot;:&quot;86&quot;,&quot;area_id&quot;:&quot;100000&quot;,&quot;region_id&quot;:&quot;110000&quot;,&quot;city_id&quot;:&quot;110000&quot;,</span><br><span class=\"line\">&quot;county_id&quot;:&quot;-1&quot;,&quot;isp_id&quot;:&quot;100017&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a><strong>访问限制</strong></h2><p>为了保障服务正常运行，每个用户的访问频率需小于10qps。<br>其中code的值的含义为，0：成功，1：失败。</p>\n<hr>\n<p><em>另外补充</em><br>搜狐IP地址查询接口（默认GBK）：<a href=\"http://pv.sohu.com/cityjson\" target=\"_blank\" rel=\"noopener\">http://pv.sohu.com/cityjson</a><br>搜狐IP地址查询接口（可设置编码）：<a href=\"http://pv.sohu.com/cityjson?ie=utf-8\" target=\"_blank\" rel=\"noopener\">http://pv.sohu.com/cityjson?ie=utf-8</a><br>搜狐另外的IP地址查询接口：<a href=\"http://txt.go.sohu.com/ip/soip\" target=\"_blank\" rel=\"noopener\">http://txt.go.sohu.com/ip/soip</a></p>\n","site":{"data":{}},"excerpt":"<p>地址：<a href=\"http://ip.taobao.com\" target=\"_blank\" rel=\"noopener\">ip.taobao.com</a></p>\n<h2 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a><strong>接口说明</strong></h2><ol>\n<li>请求接口（GET）：<br><code>http://ip.taobao.com/service/getIpInfo.php?ip=[ip地址字串]</code></li>\n<li>响应信息：<br>（json格式的）国家 、省（自治区或直辖市）、市（县）、运营商</li>\n</ol>","more":"<ol start=\"3\">\n<li>返回数据格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;code&quot;:0,&quot;data&quot;:&#123;&quot;ip&quot;:&quot;210.75.225.254&quot;,&quot;country&quot;:&quot;\\u4e2d\\u56fd&quot;,&quot;area&quot;:&quot;\\u534e\\u5317&quot;,</span><br><span class=\"line\">&quot;region&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;city&quot;:&quot;\\u5317\\u4eac\\u5e02&quot;,&quot;county&quot;:&quot;&quot;,&quot;isp&quot;:&quot;\\u7535\\u4fe1&quot;,</span><br><span class=\"line\">&quot;country_id&quot;:&quot;86&quot;,&quot;area_id&quot;:&quot;100000&quot;,&quot;region_id&quot;:&quot;110000&quot;,&quot;city_id&quot;:&quot;110000&quot;,</span><br><span class=\"line\">&quot;county_id&quot;:&quot;-1&quot;,&quot;isp_id&quot;:&quot;100017&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a><strong>访问限制</strong></h2><p>为了保障服务正常运行，每个用户的访问频率需小于10qps。<br>其中code的值的含义为，0：成功，1：失败。</p>\n<hr>\n<p><em>另外补充</em><br>搜狐IP地址查询接口（默认GBK）：<a href=\"http://pv.sohu.com/cityjson\" target=\"_blank\" rel=\"noopener\">http://pv.sohu.com/cityjson</a><br>搜狐IP地址查询接口（可设置编码）：<a href=\"http://pv.sohu.com/cityjson?ie=utf-8\" target=\"_blank\" rel=\"noopener\">http://pv.sohu.com/cityjson?ie=utf-8</a><br>搜狐另外的IP地址查询接口：<a href=\"http://txt.go.sohu.com/ip/soip\" target=\"_blank\" rel=\"noopener\">http://txt.go.sohu.com/ip/soip</a></p>"},{"title":"Ubuntu下的Firefox中文语言包安装","date":"2014-05-22T17:11:10.000Z","_content":"英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包\n\n`http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi   \n`","source":"_posts/the-firefox-chinese-language-pack-installed-ubuntu.md","raw":"---\ntitle: Ubuntu下的Firefox中文语言包安装\ndate: 2014-05-22 17:11:10\ntags: 操作系统\n---\n英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包\n\n`http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi   \n`","slug":"the-firefox-chinese-language-pack-installed-ubuntu","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwu001s1h2u9bi92ylz","content":"<p>英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包</p>\n<p><code>http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>英文界面的Firefox根据实际版本更换下面地址中红字标出的版本号，即可自动安装中文语言包</p>\n<p><code>http://releases.mozilla.org/pub/mozilla.org/firefox/releases/实际版本号/linux-i686/xpi/zh-CN.xpi</code></p>\n"},{"title":"前端命令行工具代理设置","date":"2017-04-17T14:39:18.000Z","_content":"\n![npm](https://cdn.thisjs.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png)\n\n在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：\n\n* 使用国内镜像\n* 设置代理\n* 本地安装\n\n<!--more-->\n\n# 国内镜像\n\n使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载\n\n## NPM\n\n> 使用淘宝镜像 `https://registry.npm.taobao.org`\n\n安装时启用\n\n```bash\nnpm install  --registry=https://registry.npm.taobao.org\n```\n设置全局镜像\n\n```bash\nnpm config set registry < registry url >\n```\n> [使用CNPM](http://npm.taobao.org/)\n\ncnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。\n\n## Gem\n\n> 使用[Ruby-China](http://gems.ruby-china.org/)\n\n设置镜像\n\n```bash\ngem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n```\n\n# 设置代理\n\n设置代理需要有代理服务，保证可以访问到对应的地址\n\n## NPM\n\n设置代理\n\n```bash\nnpm config set proxy http://server:port\nnpm config set https-proxy http://server:port\n```\n取消代理\n\n```bash\nnpm config delete proxy\nnpm config delete https-proxy\n```\n查看代理\n\n```bash\nnpm config list\n```\n\n如果代理不支持https，修改npm存放package的网站地址为非https地址\n\n```bash\n$ npm config set registry \"http://registry.npmjs.org/\"\n```\n\n## Git\n\n设置代理\n\n```bash\n$ git config --global http.proxy http://server:port\n\n$ git config --global https.proxy http://server:port\n```\n\n删除代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看代理\n\n```bash\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n```\n\n## Gem\n\n设置代理\n\n> 安装时加上 --http-proxy 参数\n\n```bash\ngem install --http-proxy http://proxy:port sass\n```\n\n## bower\n\n设置代理\n\n```\n# 修改 .bowerrc 文件(如无则新增):\n\n{\n    \"proxy\": \"http://proxy:port\",\n    \"https-proxy\": \"http://proxy:port\"\n}\n```\n\n## apm\n\napm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置\n\n设置代理\n\n```bash\n$ apm config set https-proxy https://server:port\n```\n查看设置\n\n```bash\n$ apm config list\n```\n\n## 设置命令行代理\n\n> 可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理\n\n* **windows**\n\n这种设置只对本命令行窗口启用\n\n```bash\nset http_proxy=http://proxy:port\n\n# 用户名密码则输入\nset http_proxy_user=< username >\nset http_proxy_pass=< password >\n```\n* **OS X**\n\n```bash\nsudo networksetup -setwebproxy \"Ethernet\" http://proxy port\n```\n\n# 本地安装\n\n## NPM\n\n> 对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装\n\n## Gem\n\n1. 首先通过(rubygems)[https://rubygems.org/] 下载对应的包\n2. 通过本地安装\n\n```bash\ngem install --local sass.gem\n```\n\n# 关于OS X的代理\n\nOS X上有很多其他的下载需要代理，那么我们可以使用`Proxychains` 配合 `shadowsocks` 实现每个命令都可以使用代理\n\n1. 安装工具\n\n```bash\nbrew install proxychains-ng\n```\n2. 设置 Proxychains 安装目录下的 `proxychains.conf` 文件\n\n```bash\nvim /usr/local/etc/proxychains.conf\n```\n在`[ProxyList]`下加入\n```\nsocks5  127.0.0.1 1080\n```\n\n3. 使用 `proxychains4` 为命令代理\n\n```bash\nproxychains4 curl https://www.twitter.com/\nproxychains4 git push origin master\n```\n\n","source":"_posts/the-front-command-line-tools-proxy-settings.md","raw":"---\ntitle: 前端命令行工具代理设置\ndate: 2017-04-17 14:39:18\ntags: [node,git]\n---\n\n![npm](https://cdn.thisjs.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png)\n\n在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：\n\n* 使用国内镜像\n* 设置代理\n* 本地安装\n\n<!--more-->\n\n# 国内镜像\n\n使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载\n\n## NPM\n\n> 使用淘宝镜像 `https://registry.npm.taobao.org`\n\n安装时启用\n\n```bash\nnpm install  --registry=https://registry.npm.taobao.org\n```\n设置全局镜像\n\n```bash\nnpm config set registry < registry url >\n```\n> [使用CNPM](http://npm.taobao.org/)\n\ncnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。\n\n## Gem\n\n> 使用[Ruby-China](http://gems.ruby-china.org/)\n\n设置镜像\n\n```bash\ngem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n```\n\n# 设置代理\n\n设置代理需要有代理服务，保证可以访问到对应的地址\n\n## NPM\n\n设置代理\n\n```bash\nnpm config set proxy http://server:port\nnpm config set https-proxy http://server:port\n```\n取消代理\n\n```bash\nnpm config delete proxy\nnpm config delete https-proxy\n```\n查看代理\n\n```bash\nnpm config list\n```\n\n如果代理不支持https，修改npm存放package的网站地址为非https地址\n\n```bash\n$ npm config set registry \"http://registry.npmjs.org/\"\n```\n\n## Git\n\n设置代理\n\n```bash\n$ git config --global http.proxy http://server:port\n\n$ git config --global https.proxy http://server:port\n```\n\n删除代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看代理\n\n```bash\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n```\n\n## Gem\n\n设置代理\n\n> 安装时加上 --http-proxy 参数\n\n```bash\ngem install --http-proxy http://proxy:port sass\n```\n\n## bower\n\n设置代理\n\n```\n# 修改 .bowerrc 文件(如无则新增):\n\n{\n    \"proxy\": \"http://proxy:port\",\n    \"https-proxy\": \"http://proxy:port\"\n}\n```\n\n## apm\n\napm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置\n\n设置代理\n\n```bash\n$ apm config set https-proxy https://server:port\n```\n查看设置\n\n```bash\n$ apm config list\n```\n\n## 设置命令行代理\n\n> 可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理\n\n* **windows**\n\n这种设置只对本命令行窗口启用\n\n```bash\nset http_proxy=http://proxy:port\n\n# 用户名密码则输入\nset http_proxy_user=< username >\nset http_proxy_pass=< password >\n```\n* **OS X**\n\n```bash\nsudo networksetup -setwebproxy \"Ethernet\" http://proxy port\n```\n\n# 本地安装\n\n## NPM\n\n> 对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装\n\n## Gem\n\n1. 首先通过(rubygems)[https://rubygems.org/] 下载对应的包\n2. 通过本地安装\n\n```bash\ngem install --local sass.gem\n```\n\n# 关于OS X的代理\n\nOS X上有很多其他的下载需要代理，那么我们可以使用`Proxychains` 配合 `shadowsocks` 实现每个命令都可以使用代理\n\n1. 安装工具\n\n```bash\nbrew install proxychains-ng\n```\n2. 设置 Proxychains 安装目录下的 `proxychains.conf` 文件\n\n```bash\nvim /usr/local/etc/proxychains.conf\n```\n在`[ProxyList]`下加入\n```\nsocks5  127.0.0.1 1080\n```\n\n3. 使用 `proxychains4` 为命令代理\n\n```bash\nproxychains4 curl https://www.twitter.com/\nproxychains4 git push origin master\n```\n\n","slug":"the-front-command-line-tools-proxy-settings","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbww001u1h2u5egm5dau","content":"<p><img src=\"https://cdn.thisjs.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png\" alt=\"npm\"></p>\n<p>在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：</p>\n<ul>\n<li>使用国内镜像</li>\n<li>设置代理</li>\n<li>本地安装</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"国内镜像\"><a href=\"#国内镜像\" class=\"headerlink\" title=\"国内镜像\"></a>国内镜像</h1><p>使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>使用淘宝镜像 <code>https://registry.npm.taobao.org</code></p>\n</blockquote>\n<p>安装时启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>设置全局镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry &lt; registry url &gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">使用CNPM</a></p>\n</blockquote>\n<p>cnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。</p>\n<h2 id=\"Gem\"><a href=\"#Gem\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><blockquote>\n<p>使用<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby-China</a></p>\n</blockquote>\n<p>设置镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><p>设置代理需要有代理服务，保证可以访问到对应的地址</p>\n<h2 id=\"NPM-1\"><a href=\"#NPM-1\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://server:port</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://server:port</span><br></pre></td></tr></table></figure>\n<p>取消代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n<p>如果代理不支持https，修改npm存放package的网站地址为非https地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">\"http://registry.npmjs.org/\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global http.proxy http://server:port</span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global https.proxy http://server:port</span><br></pre></td></tr></table></figure>\n<p>删除代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --get http.proxy</span><br><span class=\"line\">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gem-1\"><a href=\"#Gem-1\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><p>设置代理</p>\n<blockquote>\n<p>安装时加上 –http-proxy 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --http-proxy http://proxy:port sass</span><br></pre></td></tr></table></figure>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>设置代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 .bowerrc 文件(如无则新增):</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;proxy&quot;: &quot;http://proxy:port&quot;,</span><br><span class=\"line\">    &quot;https-proxy&quot;: &quot;http://proxy:port&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"apm\"><a href=\"#apm\" class=\"headerlink\" title=\"apm\"></a>apm</h2><p>apm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置</p>\n<p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apm config <span class=\"built_in\">set</span> https-proxy https://server:port</span><br></pre></td></tr></table></figure>\n<p>查看设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apm config list</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置命令行代理\"><a href=\"#设置命令行代理\" class=\"headerlink\" title=\"设置命令行代理\"></a>设置命令行代理</h2><blockquote>\n<p>可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理</p>\n</blockquote>\n<ul>\n<li><strong>windows</strong></li>\n</ul>\n<p>这种设置只对本命令行窗口启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://proxy:port</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户名密码则输入</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=&lt; username &gt;</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=&lt; password &gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>OS X</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo networksetup -setwebproxy <span class=\"string\">\"Ethernet\"</span> http://proxy port</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h1><h2 id=\"NPM-2\"><a href=\"#NPM-2\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装</p>\n</blockquote>\n<h2 id=\"Gem-2\"><a href=\"#Gem-2\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><ol>\n<li>首先通过(rubygems)[<a href=\"https://rubygems.org/]\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/]</a> 下载对应的包</li>\n<li>通过本地安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --<span class=\"built_in\">local</span> sass.gem</span><br></pre></td></tr></table></figure>\n<h1 id=\"关于OS-X的代理\"><a href=\"#关于OS-X的代理\" class=\"headerlink\" title=\"关于OS X的代理\"></a>关于OS X的代理</h1><p>OS X上有很多其他的下载需要代理，那么我们可以使用<code>Proxychains</code> 配合 <code>shadowsocks</code> 实现每个命令都可以使用代理</p>\n<ol>\n<li>安装工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置 Proxychains 安装目录下的 <code>proxychains.conf</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/etc/proxychains.conf</span><br></pre></td></tr></table></figure>\n<p>在<code>[ProxyList]</code>下加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>使用 <code>proxychains4</code> 为命令代理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl https://www.twitter.com/</span><br><span class=\"line\">proxychains4 git push origin master</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/thisjs/tumblr_inline_nn489p271Z1t68bpr_500.png\" alt=\"npm\"></p>\n<p>在开发过程中，有时候需要安装墙外一些包文件，前端常用的包管理工具有node/bower/sass,以及需要git发布内容，解决方案一般有三种：</p>\n<ul>\n<li>使用国内镜像</li>\n<li>设置代理</li>\n<li>本地安装</li>\n</ul>","more":"<h1 id=\"国内镜像\"><a href=\"#国内镜像\" class=\"headerlink\" title=\"国内镜像\"></a>国内镜像</h1><p>使用国内镜像的好处是省去搭建梯子的过程，利用国内连接速度优势，快速下载</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>使用淘宝镜像 <code>https://registry.npm.taobao.org</code></p>\n</blockquote>\n<p>安装时启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>设置全局镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry &lt; registry url &gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">使用CNPM</a></p>\n</blockquote>\n<p>cnpm可以很快的安装完包，但是有些项目，比如Angular，有些包可能会安装出现问题。</p>\n<h2 id=\"Gem\"><a href=\"#Gem\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><blockquote>\n<p>使用<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby-China</a></p>\n</blockquote>\n<p>设置镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><p>设置代理需要有代理服务，保证可以访问到对应的地址</p>\n<h2 id=\"NPM-1\"><a href=\"#NPM-1\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://server:port</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://server:port</span><br></pre></td></tr></table></figure>\n<p>取消代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n<p>如果代理不支持https，修改npm存放package的网站地址为非https地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry <span class=\"string\">\"http://registry.npmjs.org/\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global http.proxy http://server:port</span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global https.proxy http://server:port</span><br></pre></td></tr></table></figure>\n<p>删除代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n<p>查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --get http.proxy</span><br><span class=\"line\">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gem-1\"><a href=\"#Gem-1\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><p>设置代理</p>\n<blockquote>\n<p>安装时加上 –http-proxy 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --http-proxy http://proxy:port sass</span><br></pre></td></tr></table></figure>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>设置代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 .bowerrc 文件(如无则新增):</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;proxy&quot;: &quot;http://proxy:port&quot;,</span><br><span class=\"line\">    &quot;https-proxy&quot;: &quot;http://proxy:port&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"apm\"><a href=\"#apm\" class=\"headerlink\" title=\"apm\"></a>apm</h2><p>apm是github出品的Atom编辑器的包管理器，它默认使用npm的设置，如果需要单独设置</p>\n<p>设置代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apm config <span class=\"built_in\">set</span> https-proxy https://server:port</span><br></pre></td></tr></table></figure>\n<p>查看设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apm config list</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置命令行代理\"><a href=\"#设置命令行代理\" class=\"headerlink\" title=\"设置命令行代理\"></a>设置命令行代理</h2><blockquote>\n<p>可以将命令行直接设置代理，这样命令行里的数据链接都会通过代理</p>\n</blockquote>\n<ul>\n<li><strong>windows</strong></li>\n</ul>\n<p>这种设置只对本命令行窗口启用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://proxy:port</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户名密码则输入</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=&lt; username &gt;</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=&lt; password &gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>OS X</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo networksetup -setwebproxy <span class=\"string\">\"Ethernet\"</span> http://proxy port</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h1><h2 id=\"NPM-2\"><a href=\"#NPM-2\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><blockquote>\n<p>对于有些几乎没有依赖的包，可以通过直接从node_modules文件夹中拷贝的方法实现安装</p>\n</blockquote>\n<h2 id=\"Gem-2\"><a href=\"#Gem-2\" class=\"headerlink\" title=\"Gem\"></a>Gem</h2><ol>\n<li>首先通过(rubygems)[<a href=\"https://rubygems.org/]\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/]</a> 下载对应的包</li>\n<li>通过本地安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --<span class=\"built_in\">local</span> sass.gem</span><br></pre></td></tr></table></figure>\n<h1 id=\"关于OS-X的代理\"><a href=\"#关于OS-X的代理\" class=\"headerlink\" title=\"关于OS X的代理\"></a>关于OS X的代理</h1><p>OS X上有很多其他的下载需要代理，那么我们可以使用<code>Proxychains</code> 配合 <code>shadowsocks</code> 实现每个命令都可以使用代理</p>\n<ol>\n<li>安装工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置 Proxychains 安装目录下的 <code>proxychains.conf</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/etc/proxychains.conf</span><br></pre></td></tr></table></figure>\n<p>在<code>[ProxyList]</code>下加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>使用 <code>proxychains4</code> 为命令代理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl https://www.twitter.com/</span><br><span class=\"line\">proxychains4 git push origin master</span><br></pre></td></tr></table></figure>"},{"title":"基于Material样式的Angle模板开发介绍","date":"2016-11-21T16:48:52.000Z","_content":"\n[Angle](https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123)是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面\n\n![Angle](https://cdn.thisjs.com/github/angle-dash.png)\n\n以下是使用Material版本的Angle的开发介绍\n\n<!--more-->\n\n# 环境\n\n正常开发需要从`seed`项目开始，本次使用的是`material-seed`进行开发。\n\n## 文件夹介绍\n\n```\n+-- app/  // 项目的打包输出目录\n|   +-- css/\n|   +-- documentation/  // 介绍文档\n|   +-- img/\n|   +-- js/\n|   +-- i18n/\n|   +-- pages/\n|   +-- vendor/\n|   +-- views/\n+-- master/   // 项目的开发目录\n|   +-- jade/ \n|   |   +-- pages/\n|   |   +-- views/\n|   +-- js/\n|   |   +-- modules/\n|   |   |   +-- controllers/\n|   |   |   +-- directives/\n|   |   |   +-- services/\n|   |   +-- custom/\n|   +-- sass/\n|   |   +-- app/\n|   |   +-- bootstrap/\n|   |   +-- themes/\n|   +-- gulpfile.js\n|   +-- package.json\n|   +-- bower.json\n+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中\n|   +-- *.json\n+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中\n+-- index.html   // 入口文件\n```\n\n## 开发环境\n\n首先需要基本的环境\n\n[![npm](https://img.shields.io/npm/v/npm.svg?style=flat-square)]() [![Bower](https://img.shields.io/bower/v/bootstrap.svg?style=flat-square)]()\n\n进入开发目录`master`,安装项目所需依赖npm包,使用命令行\n\n```cmd\nnpm install\n```\n\n使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如`angular-material`可以改为最新版本\n\n```\nbower install\n```\n\n## 打包发布项目\n\n如果使用less编写的样式，那么可以在`master`目录下直接运行命令\n\n```\ngulp\n```\n\n如果使用sass编写样式，需要在后面加入参数\n```\ngulp --usesass\n```\n\n这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。\n\n**Note:**\n\n> 在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成\n\n\n# 开发\n\n## 路由\n\n项目使用`ui-router`插件配置路由，修改添加路由的需要在`master/js/modules/routes/routes.config.js`文件中配置\n\n### 添加新的state\n\n在已存在的state下追加即可，格式如下\n\n```js\n.state('app.someroute', {\n    url: '/some_url',\n    templateUrl: 'path_to_template.html',\n    controller: 'someController',\n    resolve: angular.extend(\n    helper.resolveFor(), {\n    // YOUR RESOLVES GO HERE\n    }\n    )\n})\n```\n其中`resolve`是用于加载页面所需要的第三方vendor，配置文件参见\n\n## Module 与 Controller\n\n每个页面模块的js文件是存放于同一个文件夹中的，可以参考，`master/js/modules/material/`。\n\n因此创建一个新的模块可以在`custom`或者`modules`文件夹中添加自己的文件夹，然后添加`moduleName.config.js`和`moduleName.controller.js`文件\n格式可参考`master/js/modules/material/`文件夹中的文件\n\n以下是一个简单的module例子\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName', [\n            'ngMaterial'\n        ]);\n})();\n```\n\n以下是controller的简单例子\n\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName')\n        .controller('moduleNameController', moduleNameController);\n\n    moduleNameController.$inject = [];\n    function moduleNameController() {\n       \n    }\n})();\n\n```\n\n之后，将该module添加到`/master/js/app.module.js`文件中\n\n## 表现页面Jade *(pug)*\n\n该项目页面使用[jade](http://naltatis.github.io/jade-syntax-docs/)预编译语言编写，位于`/master/jade/`文件夹中。\n\n在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。\n\n如果已经开启了gulp watch，那么此时，在`/app/views/`就可以看到对应的html文件\n\n## 样式 Sass或Less\n\nsass和less的开发目录位于`/master/sass/`或`/master/less/`目录下。\n\n在其中的`app`目录下创建自己项目的文件夹,在其中添加``**ss``文件。\n\n然后在`master/sass/app.scss` *(或less)* 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。\n\n## Hello World！\n\n如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。\n\n这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。\n\n![Hello world](https://cdn.thisjs.com/github/angle-view.png)\n\n\n# 部署\n\n发布项目，正常项目发布仅仅需要以下文件\n\n```\n|\n|--app\n|--vendor\n|--index.html\n```\n\n如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布\n\n\n# Tips\n\n## 将链接加入左侧栏\n\n修改`/server/sidebar-menu.json`文件即可\n\n以下是创建一个一级目录的简单例子\n\n```json\n{\n    \"text\": \"Welcome\",\n    \"sref\": \"app.welcome\",\n    \"icon\": \"icon-tag\"\n}\n```\n\n## 修改加载动画\n\n需要修改加载动画的样式，查阅`/master/js/modules/preloader/preloader.directive.js`文件，并且修改其中指定的css样式以及文件即可。\n\n如果需要临时屏蔽加载动画，注释掉index.jade文件中的\n```jade\n div(data-preloader)\n ```\n\n ## 使用LazyLoad为页面加载第三方依赖\n\n以下以实现一个加载动画效果为例。\n\n可能用到的插件有 *（可以按照自己的需求删减添加）*\n\n* `whirl` \n* `spinkit`\n* `loaders.css`\n\n**首先，在`master`文件夹中使用bower安装以上包**\n\n```\nbower install whirl spinkit loaders.css\n```\n\n安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到`vendor`目录中。\n修改`/master/vendor.json`文件，在其后面添加\n\n```json\n  \"bower_components/loaders.css/loaders.css\",\n  \"bower_components/spinkit/css/spinkit.css\",\n  \"bower_components/whirl/dist/whirl.css\"\n```\n这样，gulp就会将对应的文件添加到vendor目录中\n\n**在lazyload/lazyload.constants.js**中配置第三方包\n\n在scripts中添加以下代码\n```js\n//spinner用到的库\n'loaders.css':          ['vendor/loaders.css/loaders.css'],\n'spinkit':              ['vendor/spinkit/css/spinkit.css'],\n'whirl':                ['vendor/whirl/dist/whirl.css']\n```\n或者\n```js\n'spinner':          ['vendor/loaders.css/loaders.css',\n                     'vendor/spinkit/css/spinkit.css',\n                     'vendor/whirl/dist/whirl.css']\n```\n\n**在路由配置中为页面添加对应的引用**\n\n在`/master/js/modules/routes/routes.config.js` 文件中为对应的路由添加引用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('loaders.css'，'spinkit','whirl')\n})\n```\n\n如果是第二种写法，则使用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('spinner')\n})\n```\n\n这时，在对应的页面加载的时候，可以看到资源已经被加载进来\n\n![spinner](https://cdn.thisjs.com/github/angleReslove.png)\n\n**使用插件为我们提供的功能**\n\n在jade文件中，添加测试效果，即可看到对应的加载动画\n```jade\n.row\n  .col-md-4\n    .panel.panel-default\n      .panel-heading\n        h5 Folding Cube\n      .panel-body.loader-demo.loader-demo-sk\n        .sk-folding-cube\n          .sk-cube1.sk-cube\n          .sk-cube2.sk-cube\n          .sk-cube4.sk-cube\n          .sk-cube3.sk-cube\n```\n![spinner](https://cdn.thisjs.com/github/angle-spinner.gif)\n\n更多效果可以参阅\n [whirl](http://jh3y.github.io/whirl/) \n [spinkit](http://tobiasahlin.com/spinkit/) \n [loaders.css](https://connoratherton.com/loaders)\n\n或者官方Demo中的`/app/spinners`页面\n\n\n\n\n","source":"_posts/the-material-style-of-angle-template-development-is-introduced.md","raw":"---\ntitle: 基于Material样式的Angle模板开发介绍\ndate: 2016-11-21 16:48:52\ntags: [angular,javascript,material]\n---\n\n[Angle](https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123)是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面\n\n![Angle](https://cdn.thisjs.com/github/angle-dash.png)\n\n以下是使用Material版本的Angle的开发介绍\n\n<!--more-->\n\n# 环境\n\n正常开发需要从`seed`项目开始，本次使用的是`material-seed`进行开发。\n\n## 文件夹介绍\n\n```\n+-- app/  // 项目的打包输出目录\n|   +-- css/\n|   +-- documentation/  // 介绍文档\n|   +-- img/\n|   +-- js/\n|   +-- i18n/\n|   +-- pages/\n|   +-- vendor/\n|   +-- views/\n+-- master/   // 项目的开发目录\n|   +-- jade/ \n|   |   +-- pages/\n|   |   +-- views/\n|   +-- js/\n|   |   +-- modules/\n|   |   |   +-- controllers/\n|   |   |   +-- directives/\n|   |   |   +-- services/\n|   |   +-- custom/\n|   +-- sass/\n|   |   +-- app/\n|   |   +-- bootstrap/\n|   |   +-- themes/\n|   +-- gulpfile.js\n|   +-- package.json\n|   +-- bower.json\n+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中\n|   +-- *.json\n+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中\n+-- index.html   // 入口文件\n```\n\n## 开发环境\n\n首先需要基本的环境\n\n[![npm](https://img.shields.io/npm/v/npm.svg?style=flat-square)]() [![Bower](https://img.shields.io/bower/v/bootstrap.svg?style=flat-square)]()\n\n进入开发目录`master`,安装项目所需依赖npm包,使用命令行\n\n```cmd\nnpm install\n```\n\n使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如`angular-material`可以改为最新版本\n\n```\nbower install\n```\n\n## 打包发布项目\n\n如果使用less编写的样式，那么可以在`master`目录下直接运行命令\n\n```\ngulp\n```\n\n如果使用sass编写样式，需要在后面加入参数\n```\ngulp --usesass\n```\n\n这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。\n\n**Note:**\n\n> 在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成\n\n\n# 开发\n\n## 路由\n\n项目使用`ui-router`插件配置路由，修改添加路由的需要在`master/js/modules/routes/routes.config.js`文件中配置\n\n### 添加新的state\n\n在已存在的state下追加即可，格式如下\n\n```js\n.state('app.someroute', {\n    url: '/some_url',\n    templateUrl: 'path_to_template.html',\n    controller: 'someController',\n    resolve: angular.extend(\n    helper.resolveFor(), {\n    // YOUR RESOLVES GO HERE\n    }\n    )\n})\n```\n其中`resolve`是用于加载页面所需要的第三方vendor，配置文件参见\n\n## Module 与 Controller\n\n每个页面模块的js文件是存放于同一个文件夹中的，可以参考，`master/js/modules/material/`。\n\n因此创建一个新的模块可以在`custom`或者`modules`文件夹中添加自己的文件夹，然后添加`moduleName.config.js`和`moduleName.controller.js`文件\n格式可参考`master/js/modules/material/`文件夹中的文件\n\n以下是一个简单的module例子\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName', [\n            'ngMaterial'\n        ]);\n})();\n```\n\n以下是controller的简单例子\n\n```js\n(function () {\n    'use strict';\n\n    angular\n        .module('app.moduleName')\n        .controller('moduleNameController', moduleNameController);\n\n    moduleNameController.$inject = [];\n    function moduleNameController() {\n       \n    }\n})();\n\n```\n\n之后，将该module添加到`/master/js/app.module.js`文件中\n\n## 表现页面Jade *(pug)*\n\n该项目页面使用[jade](http://naltatis.github.io/jade-syntax-docs/)预编译语言编写，位于`/master/jade/`文件夹中。\n\n在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。\n\n如果已经开启了gulp watch，那么此时，在`/app/views/`就可以看到对应的html文件\n\n## 样式 Sass或Less\n\nsass和less的开发目录位于`/master/sass/`或`/master/less/`目录下。\n\n在其中的`app`目录下创建自己项目的文件夹,在其中添加``**ss``文件。\n\n然后在`master/sass/app.scss` *(或less)* 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。\n\n## Hello World！\n\n如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。\n\n这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。\n\n![Hello world](https://cdn.thisjs.com/github/angle-view.png)\n\n\n# 部署\n\n发布项目，正常项目发布仅仅需要以下文件\n\n```\n|\n|--app\n|--vendor\n|--index.html\n```\n\n如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布\n\n\n# Tips\n\n## 将链接加入左侧栏\n\n修改`/server/sidebar-menu.json`文件即可\n\n以下是创建一个一级目录的简单例子\n\n```json\n{\n    \"text\": \"Welcome\",\n    \"sref\": \"app.welcome\",\n    \"icon\": \"icon-tag\"\n}\n```\n\n## 修改加载动画\n\n需要修改加载动画的样式，查阅`/master/js/modules/preloader/preloader.directive.js`文件，并且修改其中指定的css样式以及文件即可。\n\n如果需要临时屏蔽加载动画，注释掉index.jade文件中的\n```jade\n div(data-preloader)\n ```\n\n ## 使用LazyLoad为页面加载第三方依赖\n\n以下以实现一个加载动画效果为例。\n\n可能用到的插件有 *（可以按照自己的需求删减添加）*\n\n* `whirl` \n* `spinkit`\n* `loaders.css`\n\n**首先，在`master`文件夹中使用bower安装以上包**\n\n```\nbower install whirl spinkit loaders.css\n```\n\n安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到`vendor`目录中。\n修改`/master/vendor.json`文件，在其后面添加\n\n```json\n  \"bower_components/loaders.css/loaders.css\",\n  \"bower_components/spinkit/css/spinkit.css\",\n  \"bower_components/whirl/dist/whirl.css\"\n```\n这样，gulp就会将对应的文件添加到vendor目录中\n\n**在lazyload/lazyload.constants.js**中配置第三方包\n\n在scripts中添加以下代码\n```js\n//spinner用到的库\n'loaders.css':          ['vendor/loaders.css/loaders.css'],\n'spinkit':              ['vendor/spinkit/css/spinkit.css'],\n'whirl':                ['vendor/whirl/dist/whirl.css']\n```\n或者\n```js\n'spinner':          ['vendor/loaders.css/loaders.css',\n                     'vendor/spinkit/css/spinkit.css',\n                     'vendor/whirl/dist/whirl.css']\n```\n\n**在路由配置中为页面添加对应的引用**\n\n在`/master/js/modules/routes/routes.config.js` 文件中为对应的路由添加引用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('loaders.css'，'spinkit','whirl')\n})\n```\n\n如果是第二种写法，则使用\n\n```js\n.state('app.moduleName', {\n    resolve: helper.resolveFor('spinner')\n})\n```\n\n这时，在对应的页面加载的时候，可以看到资源已经被加载进来\n\n![spinner](https://cdn.thisjs.com/github/angleReslove.png)\n\n**使用插件为我们提供的功能**\n\n在jade文件中，添加测试效果，即可看到对应的加载动画\n```jade\n.row\n  .col-md-4\n    .panel.panel-default\n      .panel-heading\n        h5 Folding Cube\n      .panel-body.loader-demo.loader-demo-sk\n        .sk-folding-cube\n          .sk-cube1.sk-cube\n          .sk-cube2.sk-cube\n          .sk-cube4.sk-cube\n          .sk-cube3.sk-cube\n```\n![spinner](https://cdn.thisjs.com/github/angle-spinner.gif)\n\n更多效果可以参阅\n [whirl](http://jh3y.github.io/whirl/) \n [spinkit](http://tobiasahlin.com/spinkit/) \n [loaders.css](https://connoratherton.com/loaders)\n\n或者官方Demo中的`/app/spinners`页面\n\n\n\n\n","slug":"the-material-style-of-angle-template-development-is-introduced","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwx001w1h2ufeo3v7v0","content":"<p><a href=\"https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123\" target=\"_blank\" rel=\"noopener\">Angle</a>是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面</p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-dash.png\" alt=\"Angle\"></p>\n<p>以下是使用Material版本的Angle的开发介绍</p>\n<a id=\"more\"></a>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>正常开发需要从<code>seed</code>项目开始，本次使用的是<code>material-seed</code>进行开发。</p>\n<h2 id=\"文件夹介绍\"><a href=\"#文件夹介绍\" class=\"headerlink\" title=\"文件夹介绍\"></a>文件夹介绍</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-- app/  // 项目的打包输出目录</span><br><span class=\"line\">|   +-- css/</span><br><span class=\"line\">|   +-- documentation/  // 介绍文档</span><br><span class=\"line\">|   +-- img/</span><br><span class=\"line\">|   +-- js/</span><br><span class=\"line\">|   +-- i18n/</span><br><span class=\"line\">|   +-- pages/</span><br><span class=\"line\">|   +-- vendor/</span><br><span class=\"line\">|   +-- views/</span><br><span class=\"line\">+-- master/   // 项目的开发目录</span><br><span class=\"line\">|   +-- jade/ </span><br><span class=\"line\">|   |   +-- pages/</span><br><span class=\"line\">|   |   +-- views/</span><br><span class=\"line\">|   +-- js/</span><br><span class=\"line\">|   |   +-- modules/</span><br><span class=\"line\">|   |   |   +-- controllers/</span><br><span class=\"line\">|   |   |   +-- directives/</span><br><span class=\"line\">|   |   |   +-- services/</span><br><span class=\"line\">|   |   +-- custom/</span><br><span class=\"line\">|   +-- sass/</span><br><span class=\"line\">|   |   +-- app/</span><br><span class=\"line\">|   |   +-- bootstrap/</span><br><span class=\"line\">|   |   +-- themes/</span><br><span class=\"line\">|   +-- gulpfile.js</span><br><span class=\"line\">|   +-- package.json</span><br><span class=\"line\">|   +-- bower.json</span><br><span class=\"line\">+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中</span><br><span class=\"line\">|   +-- *.json</span><br><span class=\"line\">+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中</span><br><span class=\"line\">+-- index.html   // 入口文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>首先需要基本的环境</p>\n<p><a href><img src=\"https://img.shields.io/npm/v/npm.svg?style=flat-square\" alt=\"npm\"></a> <a href><img src=\"https://img.shields.io/bower/v/bootstrap.svg?style=flat-square\" alt=\"Bower\"></a></p>\n<p>进入开发目录<code>master</code>,安装项目所需依赖npm包,使用命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如<code>angular-material</code>可以改为最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包发布项目\"><a href=\"#打包发布项目\" class=\"headerlink\" title=\"打包发布项目\"></a>打包发布项目</h2><p>如果使用less编写的样式，那么可以在<code>master</code>目录下直接运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure>\n<p>如果使用sass编写样式，需要在后面加入参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp --usesass</span><br></pre></td></tr></table></figure></p>\n<p>这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成</p>\n</blockquote>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>项目使用<code>ui-router</code>插件配置路由，修改添加路由的需要在<code>master/js/modules/routes/routes.config.js</code>文件中配置</p>\n<h3 id=\"添加新的state\"><a href=\"#添加新的state\" class=\"headerlink\" title=\"添加新的state\"></a>添加新的state</h3><p>在已存在的state下追加即可，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.someroute'</span>, &#123;</span><br><span class=\"line\">    url: <span class=\"string\">'/some_url'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'path_to_template.html'</span>,</span><br><span class=\"line\">    controller: <span class=\"string\">'someController'</span>,</span><br><span class=\"line\">    resolve: angular.extend(</span><br><span class=\"line\">    helper.resolveFor(), &#123;</span><br><span class=\"line\">    <span class=\"comment\">// YOUR RESOLVES GO HERE</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>resolve</code>是用于加载页面所需要的第三方vendor，配置文件参见</p>\n<h2 id=\"Module-与-Controller\"><a href=\"#Module-与-Controller\" class=\"headerlink\" title=\"Module 与 Controller\"></a>Module 与 Controller</h2><p>每个页面模块的js文件是存放于同一个文件夹中的，可以参考，<code>master/js/modules/material/</code>。</p>\n<p>因此创建一个新的模块可以在<code>custom</code>或者<code>modules</code>文件夹中添加自己的文件夹，然后添加<code>moduleName.config.js</code>和<code>moduleName.controller.js</code>文件<br>格式可参考<code>master/js/modules/material/</code>文件夹中的文件</p>\n<p>以下是一个简单的module例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'ngMaterial'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以下是controller的简单例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>)</span><br><span class=\"line\">        .controller(<span class=\"string\">'moduleNameController'</span>, moduleNameController);</span><br><span class=\"line\"></span><br><span class=\"line\">    moduleNameController.$inject = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleNameController</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>之后，将该module添加到<code>/master/js/app.module.js</code>文件中</p>\n<h2 id=\"表现页面Jade-pug\"><a href=\"#表现页面Jade-pug\" class=\"headerlink\" title=\"表现页面Jade (pug)\"></a>表现页面Jade <em>(pug)</em></h2><p>该项目页面使用<a href=\"http://naltatis.github.io/jade-syntax-docs/\" target=\"_blank\" rel=\"noopener\">jade</a>预编译语言编写，位于<code>/master/jade/</code>文件夹中。</p>\n<p>在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。</p>\n<p>如果已经开启了gulp watch，那么此时，在<code>/app/views/</code>就可以看到对应的html文件</p>\n<h2 id=\"样式-Sass或Less\"><a href=\"#样式-Sass或Less\" class=\"headerlink\" title=\"样式 Sass或Less\"></a>样式 Sass或Less</h2><p>sass和less的开发目录位于<code>/master/sass/</code>或<code>/master/less/</code>目录下。</p>\n<p>在其中的<code>app</code>目录下创建自己项目的文件夹,在其中添加<code>**ss</code>文件。</p>\n<p>然后在<code>master/sass/app.scss</code> <em>(或less)</em> 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。</p>\n<h2 id=\"Hello-World！\"><a href=\"#Hello-World！\" class=\"headerlink\" title=\"Hello World！\"></a>Hello World！</h2><p>如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。</p>\n<p>这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。</p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-view.png\" alt=\"Hello world\"></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>发布项目，正常项目发布仅仅需要以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|</span><br><span class=\"line\">|--app</span><br><span class=\"line\">|--vendor</span><br><span class=\"line\">|--index.html</span><br></pre></td></tr></table></figure>\n<p>如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><h2 id=\"将链接加入左侧栏\"><a href=\"#将链接加入左侧栏\" class=\"headerlink\" title=\"将链接加入左侧栏\"></a>将链接加入左侧栏</h2><p>修改<code>/server/sidebar-menu.json</code>文件即可</p>\n<p>以下是创建一个一级目录的简单例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"Welcome\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sref\"</span>: <span class=\"string\">\"app.welcome\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"icon-tag\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改加载动画\"><a href=\"#修改加载动画\" class=\"headerlink\" title=\"修改加载动画\"></a>修改加载动画</h2><p>需要修改加载动画的样式，查阅<code>/master/js/modules/preloader/preloader.directive.js</code>文件，并且修改其中指定的css样式以及文件即可。</p>\n<p>如果需要临时屏蔽加载动画，注释掉index.jade文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(data-preloader)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用LazyLoad为页面加载第三方依赖\"><a href=\"#使用LazyLoad为页面加载第三方依赖\" class=\"headerlink\" title=\"使用LazyLoad为页面加载第三方依赖\"></a>使用LazyLoad为页面加载第三方依赖</h2><p>以下以实现一个加载动画效果为例。</p>\n<p>可能用到的插件有 <em>（可以按照自己的需求删减添加）</em></p>\n<ul>\n<li><code>whirl</code> </li>\n<li><code>spinkit</code></li>\n<li><code>loaders.css</code></li>\n</ul>\n<p><strong>首先，在<code>master</code>文件夹中使用bower安装以上包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install whirl spinkit loaders.css</span><br></pre></td></tr></table></figure>\n<p>安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到<code>vendor</code>目录中。<br>修改<code>/master/vendor.json</code>文件，在其后面添加</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"bower_components/loaders.css/loaders.css\",</span><br><span class=\"line\">\"bower_components/spinkit/css/spinkit.css\",</span><br><span class=\"line\"><span class=\"string\">\"bower_components/whirl/dist/whirl.css\"</span></span><br></pre></td></tr></table></figure>\n<p>这样，gulp就会将对应的文件添加到vendor目录中</p>\n<p><strong>在lazyload/lazyload.constants.js</strong>中配置第三方包</p>\n<p>在scripts中添加以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//spinner用到的库</span></span><br><span class=\"line\"><span class=\"string\">'loaders.css'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>],</span><br><span class=\"line\"><span class=\"string\">'spinkit'</span>:              [<span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>],</span><br><span class=\"line\"><span class=\"string\">'whirl'</span>:                [<span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'spinner'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>,</span><br><span class=\"line\">                     <span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>,</span><br><span class=\"line\">                     <span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>在路由配置中为页面添加对应的引用</strong></p>\n<p>在<code>/master/js/modules/routes/routes.config.js</code> 文件中为对应的路由添加引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</span><br><span class=\"line\">    resolve: helper.resolveFor(<span class=\"string\">'loaders.css'</span>，<span class=\"string\">'spinkit'</span>,<span class=\"string\">'whirl'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果是第二种写法，则使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</span><br><span class=\"line\">    resolve: helper.resolveFor(<span class=\"string\">'spinner'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这时，在对应的页面加载的时候，可以看到资源已经被加载进来</p>\n<p><img src=\"https://cdn.thisjs.com/github/angleReslove.png\" alt=\"spinner\"></p>\n<p><strong>使用插件为我们提供的功能</strong></p>\n<p>在jade文件中，添加测试效果，即可看到对应的加载动画<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.row</span><br><span class=\"line\">  .col-md-4</span><br><span class=\"line\">    .panel.panel-default</span><br><span class=\"line\">      .panel-heading</span><br><span class=\"line\">        h5 Folding Cube</span><br><span class=\"line\">      .panel-body.loader-demo.loader-demo-sk</span><br><span class=\"line\">        .sk-folding-cube</span><br><span class=\"line\">          .sk-cube1.sk-cube</span><br><span class=\"line\">          .sk-cube2.sk-cube</span><br><span class=\"line\">          .sk-cube4.sk-cube</span><br><span class=\"line\">          .sk-cube3.sk-cube</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-spinner.gif\" alt=\"spinner\"></p>\n<p>更多效果可以参阅<br> <a href=\"http://jh3y.github.io/whirl/\" target=\"_blank\" rel=\"noopener\">whirl</a><br> <a href=\"http://tobiasahlin.com/spinkit/\" target=\"_blank\" rel=\"noopener\">spinkit</a><br> <a href=\"https://connoratherton.com/loaders\" target=\"_blank\" rel=\"noopener\">loaders.css</a></p>\n<p>或者官方Demo中的<code>/app/spinners</code>页面</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://wrapbootstrap.com/theme/angle-bootstrap-admin-template-WB04HF123\" target=\"_blank\" rel=\"noopener\">Angle</a>是一款强大的后台界面模板，提供了包括jQuery、reactjs、angular、material、backend-mean等不同开发语言以及模式的模板。使用该模板可以开发出非常漂亮的管理界面</p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-dash.png\" alt=\"Angle\"></p>\n<p>以下是使用Material版本的Angle的开发介绍</p>","more":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>正常开发需要从<code>seed</code>项目开始，本次使用的是<code>material-seed</code>进行开发。</p>\n<h2 id=\"文件夹介绍\"><a href=\"#文件夹介绍\" class=\"headerlink\" title=\"文件夹介绍\"></a>文件夹介绍</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-- app/  // 项目的打包输出目录</span><br><span class=\"line\">|   +-- css/</span><br><span class=\"line\">|   +-- documentation/  // 介绍文档</span><br><span class=\"line\">|   +-- img/</span><br><span class=\"line\">|   +-- js/</span><br><span class=\"line\">|   +-- i18n/</span><br><span class=\"line\">|   +-- pages/</span><br><span class=\"line\">|   +-- vendor/</span><br><span class=\"line\">|   +-- views/</span><br><span class=\"line\">+-- master/   // 项目的开发目录</span><br><span class=\"line\">|   +-- jade/ </span><br><span class=\"line\">|   |   +-- pages/</span><br><span class=\"line\">|   |   +-- views/</span><br><span class=\"line\">|   +-- js/</span><br><span class=\"line\">|   |   +-- modules/</span><br><span class=\"line\">|   |   |   +-- controllers/</span><br><span class=\"line\">|   |   |   +-- directives/</span><br><span class=\"line\">|   |   |   +-- services/</span><br><span class=\"line\">|   |   +-- custom/</span><br><span class=\"line\">|   +-- sass/</span><br><span class=\"line\">|   |   +-- app/</span><br><span class=\"line\">|   |   +-- bootstrap/</span><br><span class=\"line\">|   |   +-- themes/</span><br><span class=\"line\">|   +-- gulpfile.js</span><br><span class=\"line\">|   +-- package.json</span><br><span class=\"line\">|   +-- bower.json</span><br><span class=\"line\">+-- server/  // 模拟服务器数据交互的json文件，页面左侧的树形文件就在其中</span><br><span class=\"line\">|   +-- *.json</span><br><span class=\"line\">+-- vendor/    // 第三方库，由master中bower加载依赖，使用gulp在发布的时候发布到该文件夹中</span><br><span class=\"line\">+-- index.html   // 入口文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>首先需要基本的环境</p>\n<p><a href><img src=\"https://img.shields.io/npm/v/npm.svg?style=flat-square\" alt=\"npm\"></a> <a href><img src=\"https://img.shields.io/bower/v/bootstrap.svg?style=flat-square\" alt=\"Bower\"></a></p>\n<p>进入开发目录<code>master</code>,安装项目所需依赖npm包,使用命令行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>使用bower安装所需插件，安装之前可以将所需要的插件改为自己需要的版本，比如<code>angular-material</code>可以改为最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包发布项目\"><a href=\"#打包发布项目\" class=\"headerlink\" title=\"打包发布项目\"></a>打包发布项目</h2><p>如果使用less编写的样式，那么可以在<code>master</code>目录下直接运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure>\n<p>如果使用sass编写样式，需要在后面加入参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp --usesass</span><br></pre></td></tr></table></figure></p>\n<p>这时，在服务器环境下，打开index.html文件就可以看到基本的页面内容。</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>在开发过程中最好一直开启gulp，保持watch的运行，这样所做改变就会立即被打包生成</p>\n</blockquote>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>项目使用<code>ui-router</code>插件配置路由，修改添加路由的需要在<code>master/js/modules/routes/routes.config.js</code>文件中配置</p>\n<h3 id=\"添加新的state\"><a href=\"#添加新的state\" class=\"headerlink\" title=\"添加新的state\"></a>添加新的state</h3><p>在已存在的state下追加即可，格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.someroute'</span>, &#123;</span><br><span class=\"line\">    url: <span class=\"string\">'/some_url'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'path_to_template.html'</span>,</span><br><span class=\"line\">    controller: <span class=\"string\">'someController'</span>,</span><br><span class=\"line\">    resolve: angular.extend(</span><br><span class=\"line\">    helper.resolveFor(), &#123;</span><br><span class=\"line\">    <span class=\"comment\">// YOUR RESOLVES GO HERE</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>resolve</code>是用于加载页面所需要的第三方vendor，配置文件参见</p>\n<h2 id=\"Module-与-Controller\"><a href=\"#Module-与-Controller\" class=\"headerlink\" title=\"Module 与 Controller\"></a>Module 与 Controller</h2><p>每个页面模块的js文件是存放于同一个文件夹中的，可以参考，<code>master/js/modules/material/</code>。</p>\n<p>因此创建一个新的模块可以在<code>custom</code>或者<code>modules</code>文件夹中添加自己的文件夹，然后添加<code>moduleName.config.js</code>和<code>moduleName.controller.js</code>文件<br>格式可参考<code>master/js/modules/material/</code>文件夹中的文件</p>\n<p>以下是一个简单的module例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>, [</span><br><span class=\"line\">            <span class=\"string\">'ngMaterial'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以下是controller的简单例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app.moduleName'</span>)</span><br><span class=\"line\">        .controller(<span class=\"string\">'moduleNameController'</span>, moduleNameController);</span><br><span class=\"line\"></span><br><span class=\"line\">    moduleNameController.$inject = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleNameController</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>之后，将该module添加到<code>/master/js/app.module.js</code>文件中</p>\n<h2 id=\"表现页面Jade-pug\"><a href=\"#表现页面Jade-pug\" class=\"headerlink\" title=\"表现页面Jade (pug)\"></a>表现页面Jade <em>(pug)</em></h2><p>该项目页面使用<a href=\"http://naltatis.github.io/jade-syntax-docs/\" target=\"_blank\" rel=\"noopener\">jade</a>预编译语言编写，位于<code>/master/jade/</code>文件夹中。</p>\n<p>在该文件夹下创建对应的文件，或者创建新的文件夹，将自己的jade文件添加对应目录下。</p>\n<p>如果已经开启了gulp watch，那么此时，在<code>/app/views/</code>就可以看到对应的html文件</p>\n<h2 id=\"样式-Sass或Less\"><a href=\"#样式-Sass或Less\" class=\"headerlink\" title=\"样式 Sass或Less\"></a>样式 Sass或Less</h2><p>sass和less的开发目录位于<code>/master/sass/</code>或<code>/master/less/</code>目录下。</p>\n<p>在其中的<code>app</code>目录下创建自己项目的文件夹,在其中添加<code>**ss</code>文件。</p>\n<p>然后在<code>master/sass/app.scss</code> <em>(或less)</em> 文件中 将我们的scss文件import进来，保证编译的时候可以被编译到。</p>\n<h2 id=\"Hello-World！\"><a href=\"#Hello-World！\" class=\"headerlink\" title=\"Hello World！\"></a>Hello World！</h2><p>如果已经写好了对应的，jade文件，Scss文件以及js文件，并且已经配置好路由。</p>\n<p>这时候在服务器环境下打开，输入对应的路由地址，预览页面吧。</p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-view.png\" alt=\"Hello world\"></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>发布项目，正常项目发布仅仅需要以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|</span><br><span class=\"line\">|--app</span><br><span class=\"line\">|--vendor</span><br><span class=\"line\">|--index.html</span><br></pre></td></tr></table></figure>\n<p>如果在server中依然存在一些mock的文件，那么需要将server文件夹一并发布</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><h2 id=\"将链接加入左侧栏\"><a href=\"#将链接加入左侧栏\" class=\"headerlink\" title=\"将链接加入左侧栏\"></a>将链接加入左侧栏</h2><p>修改<code>/server/sidebar-menu.json</code>文件即可</p>\n<p>以下是创建一个一级目录的简单例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"Welcome\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sref\"</span>: <span class=\"string\">\"app.welcome\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"icon-tag\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改加载动画\"><a href=\"#修改加载动画\" class=\"headerlink\" title=\"修改加载动画\"></a>修改加载动画</h2><p>需要修改加载动画的样式，查阅<code>/master/js/modules/preloader/preloader.directive.js</code>文件，并且修改其中指定的css样式以及文件即可。</p>\n<p>如果需要临时屏蔽加载动画，注释掉index.jade文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(data-preloader)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用LazyLoad为页面加载第三方依赖\"><a href=\"#使用LazyLoad为页面加载第三方依赖\" class=\"headerlink\" title=\"使用LazyLoad为页面加载第三方依赖\"></a>使用LazyLoad为页面加载第三方依赖</h2><p>以下以实现一个加载动画效果为例。</p>\n<p>可能用到的插件有 <em>（可以按照自己的需求删减添加）</em></p>\n<ul>\n<li><code>whirl</code> </li>\n<li><code>spinkit</code></li>\n<li><code>loaders.css</code></li>\n</ul>\n<p><strong>首先，在<code>master</code>文件夹中使用bower安装以上包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install whirl spinkit loaders.css</span><br></pre></td></tr></table></figure>\n<p>安装完，之后，需要让gulp在打包的时候，将以上包的文件打包到<code>vendor</code>目录中。<br>修改<code>/master/vendor.json</code>文件，在其后面添加</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"bower_components/loaders.css/loaders.css\",</span><br><span class=\"line\">\"bower_components/spinkit/css/spinkit.css\",</span><br><span class=\"line\"><span class=\"string\">\"bower_components/whirl/dist/whirl.css\"</span></span><br></pre></td></tr></table></figure>\n<p>这样，gulp就会将对应的文件添加到vendor目录中</p>\n<p><strong>在lazyload/lazyload.constants.js</strong>中配置第三方包</p>\n<p>在scripts中添加以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//spinner用到的库</span></span><br><span class=\"line\"><span class=\"string\">'loaders.css'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>],</span><br><span class=\"line\"><span class=\"string\">'spinkit'</span>:              [<span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>],</span><br><span class=\"line\"><span class=\"string\">'whirl'</span>:                [<span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'spinner'</span>:          [<span class=\"string\">'vendor/loaders.css/loaders.css'</span>,</span><br><span class=\"line\">                     <span class=\"string\">'vendor/spinkit/css/spinkit.css'</span>,</span><br><span class=\"line\">                     <span class=\"string\">'vendor/whirl/dist/whirl.css'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>在路由配置中为页面添加对应的引用</strong></p>\n<p>在<code>/master/js/modules/routes/routes.config.js</code> 文件中为对应的路由添加引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</span><br><span class=\"line\">    resolve: helper.resolveFor(<span class=\"string\">'loaders.css'</span>，<span class=\"string\">'spinkit'</span>,<span class=\"string\">'whirl'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果是第二种写法，则使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.state(<span class=\"string\">'app.moduleName'</span>, &#123;</span><br><span class=\"line\">    resolve: helper.resolveFor(<span class=\"string\">'spinner'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这时，在对应的页面加载的时候，可以看到资源已经被加载进来</p>\n<p><img src=\"https://cdn.thisjs.com/github/angleReslove.png\" alt=\"spinner\"></p>\n<p><strong>使用插件为我们提供的功能</strong></p>\n<p>在jade文件中，添加测试效果，即可看到对应的加载动画<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.row</span><br><span class=\"line\">  .col-md-4</span><br><span class=\"line\">    .panel.panel-default</span><br><span class=\"line\">      .panel-heading</span><br><span class=\"line\">        h5 Folding Cube</span><br><span class=\"line\">      .panel-body.loader-demo.loader-demo-sk</span><br><span class=\"line\">        .sk-folding-cube</span><br><span class=\"line\">          .sk-cube1.sk-cube</span><br><span class=\"line\">          .sk-cube2.sk-cube</span><br><span class=\"line\">          .sk-cube4.sk-cube</span><br><span class=\"line\">          .sk-cube3.sk-cube</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.thisjs.com/github/angle-spinner.gif\" alt=\"spinner\"></p>\n<p>更多效果可以参阅<br> <a href=\"http://jh3y.github.io/whirl/\" target=\"_blank\" rel=\"noopener\">whirl</a><br> <a href=\"http://tobiasahlin.com/spinkit/\" target=\"_blank\" rel=\"noopener\">spinkit</a><br> <a href=\"https://connoratherton.com/loaders\" target=\"_blank\" rel=\"noopener\">loaders.css</a></p>\n<p>或者官方Demo中的<code>/app/spinners</code>页面</p>"},{"title":"解决无法获取ngRepeat生成元素样式的问题","date":"2016-12-01T15:44:08.000Z","_content":"\n![ng](https://cdn.thisjs.com/github/ngrepeatAngularJS-header-image.png)\n\n在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用\n`css()`、`getComputedStyle`、`offsetHeight`或者`clientHeight`都会获取到0，我们无法获取到元素的实际高度。\n\n这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。\n\n在Angular中，我们可以使用以下几种方法进行处理\n\n<!--more-->\n\n## 使用$watch方法来进行脏值检查\n\n当元素信息发生改变之后，将最新的数据赋值给变量即可\n\n例如：\n\n**Directive**\n\n```js\nmyApp.directive('heightBind', function() {\n  return {\n    scope: {\n      heightValue: '='\n    },\n    link: function($scope, $element) {\n      $scope.$watch(function() {\n        $scope.heightValue = $element.height();\n      });\n    }\n  }\n})\n```\n\n**HTML**\n```html\n< div height-bind height-value=\"containerHeight\"></div>\n```\n\n## 当然，也可以使用`$apply`来完成同样的事情\n\n```js\n setTimeout(function(){\n  $scope.containerHeight = $('#container').height()\n  $scope.$apply();\n}, 0);\n```\n\n## 使用自带的脏值检查方法\n\n我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可\n\n```js\n$timeout(function () {\n    // 获取元素信息\n});\n```\n\n> 参考资料 http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero","source":"_posts/the-problem-of-unable-to-get-ng-repeat-generating-element-styles.md","raw":"---\ntitle: 解决无法获取ngRepeat生成元素样式的问题\ndate: 2016-12-01 15:44:08\ntags: [angular,javascript]\n---\n\n![ng](https://cdn.thisjs.com/github/ngrepeatAngularJS-header-image.png)\n\n在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用\n`css()`、`getComputedStyle`、`offsetHeight`或者`clientHeight`都会获取到0，我们无法获取到元素的实际高度。\n\n这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。\n\n在Angular中，我们可以使用以下几种方法进行处理\n\n<!--more-->\n\n## 使用$watch方法来进行脏值检查\n\n当元素信息发生改变之后，将最新的数据赋值给变量即可\n\n例如：\n\n**Directive**\n\n```js\nmyApp.directive('heightBind', function() {\n  return {\n    scope: {\n      heightValue: '='\n    },\n    link: function($scope, $element) {\n      $scope.$watch(function() {\n        $scope.heightValue = $element.height();\n      });\n    }\n  }\n})\n```\n\n**HTML**\n```html\n< div height-bind height-value=\"containerHeight\"></div>\n```\n\n## 当然，也可以使用`$apply`来完成同样的事情\n\n```js\n setTimeout(function(){\n  $scope.containerHeight = $('#container').height()\n  $scope.$apply();\n}, 0);\n```\n\n## 使用自带的脏值检查方法\n\n我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可\n\n```js\n$timeout(function () {\n    // 获取元素信息\n});\n```\n\n> 参考资料 http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero","slug":"the-problem-of-unable-to-get-ng-repeat-generating-element-styles","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbwy001z1h2ue13tb0uv","content":"<p><img src=\"https://cdn.thisjs.com/github/ngrepeatAngularJS-header-image.png\" alt=\"ng\"></p>\n<p>在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用<br><code>css()</code>、<code>getComputedStyle</code>、<code>offsetHeight</code>或者<code>clientHeight</code>都会获取到0，我们无法获取到元素的实际高度。</p>\n<p>这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。</p>\n<p>在Angular中，我们可以使用以下几种方法进行处理</p>\n<a id=\"more\"></a>\n<h2 id=\"使用-watch方法来进行脏值检查\"><a href=\"#使用-watch方法来进行脏值检查\" class=\"headerlink\" title=\"使用$watch方法来进行脏值检查\"></a>使用$watch方法来进行脏值检查</h2><p>当元素信息发生改变之后，将最新的数据赋值给变量即可</p>\n<p>例如：</p>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">'heightBind'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      heightValue: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>) </span>&#123;</span><br><span class=\"line\">      $scope.$watch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $scope.heightValue = $element.height();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>HTML</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">div</span> <span class=\"attr\">height-bind</span> <span class=\"attr\">height-value</span>=<span class=\"string\">\"containerHeight\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"当然，也可以使用-apply来完成同样的事情\"><a href=\"#当然，也可以使用-apply来完成同样的事情\" class=\"headerlink\" title=\"当然，也可以使用$apply来完成同样的事情\"></a>当然，也可以使用<code>$apply</code>来完成同样的事情</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $scope.containerHeight = $(<span class=\"string\">'#container'</span>).height()</span><br><span class=\"line\">  $scope.$apply();</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自带的脏值检查方法\"><a href=\"#使用自带的脏值检查方法\" class=\"headerlink\" title=\"使用自带的脏值检查方法\"></a>使用自带的脏值检查方法</h2><p>我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$timeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取元素信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料 <a href=\"http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/github/ngrepeatAngularJS-header-image.png\" alt=\"ng\"></p>\n<p>在使用Angular进行开发的过程中，使用ng-repeat生成多个元素之后，如果元素的宽高是auto，那么我们在使用<br><code>css()</code>、<code>getComputedStyle</code>、<code>offsetHeight</code>或者<code>clientHeight</code>都会获取到0，我们无法获取到元素的实际高度。</p>\n<p>这是因为DOM的渲染是异步的，导致计算元素属性信息在DOM渲染完成之前就已经完成了，因此无法获取到DOM真正渲染结束之后属性。</p>\n<p>在Angular中，我们可以使用以下几种方法进行处理</p>","more":"<h2 id=\"使用-watch方法来进行脏值检查\"><a href=\"#使用-watch方法来进行脏值检查\" class=\"headerlink\" title=\"使用$watch方法来进行脏值检查\"></a>使用$watch方法来进行脏值检查</h2><p>当元素信息发生改变之后，将最新的数据赋值给变量即可</p>\n<p>例如：</p>\n<p><strong>Directive</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">'heightBind'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      heightValue: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>) </span>&#123;</span><br><span class=\"line\">      $scope.$watch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $scope.heightValue = $element.height();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>HTML</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">div</span> <span class=\"attr\">height-bind</span> <span class=\"attr\">height-value</span>=<span class=\"string\">\"containerHeight\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"当然，也可以使用-apply来完成同样的事情\"><a href=\"#当然，也可以使用-apply来完成同样的事情\" class=\"headerlink\" title=\"当然，也可以使用$apply来完成同样的事情\"></a>当然，也可以使用<code>$apply</code>来完成同样的事情</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $scope.containerHeight = $(<span class=\"string\">'#container'</span>).height()</span><br><span class=\"line\">  $scope.$apply();</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自带的脏值检查方法\"><a href=\"#使用自带的脏值检查方法\" class=\"headerlink\" title=\"使用自带的脏值检查方法\"></a>使用自带的脏值检查方法</h2><p>我们知道，angular的一些方法会自动进行脏值检查，因此我们可以将上面的方法稍微改动一下即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$timeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取元素信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料 <a href=\"http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/25108780/height-of-container-with-ng-repeat-directive-is-zero</a></p>\n</blockquote>"},{"title":"解决流式布局元素高度不统一导致布局不整齐问题","date":"2016-12-01T17:47:19.000Z","_content":"\n在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。\n\n![float](https://cdn.thisjs.com/github/probfloat-long.png)\n\n<!--more-->\n\n这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面\n\n![float-succ](https://cdn.thisjs.com/github/probfloat-long2.png)\n\n所以一种常见的解决方案是\n\n## 瀑布流\n\n![waterfull](https://cdn.thisjs.com/github/probwaterfull.png)\n\n瀑布流的实现方法，网上已经有大量教程，详情参阅\n\n [脚本之家—实现瀑布流](https://www.jb51.net/article/34141.htm)\n\n [前端开发—瀑布流的实现方法](https://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/)\n\n ## 将同一列设置为统一高度\n\n 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。\n\n ![float3](https://cdn.thisjs.com/github/probfloat-long3.png)\n\n 要实现该效果，只需如下几步\n\n 1. 获取所有元素\n 2. 获取相同offsetTop值的元素，即同一行的元素\n 3. 比较同一行元素的高度，取最大的height值，赋给每一个元素即可\n\n如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章\n\n> [解决无法获取ngRepeat生成元素样式的问题](https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/)","source":"_posts/to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy.md","raw":"---\ntitle: 解决流式布局元素高度不统一导致布局不整齐问题\ndate: 2016-12-01 17:47:19\ntags: [javascript]\n---\n\n在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。\n\n![float](https://cdn.thisjs.com/github/probfloat-long.png)\n\n<!--more-->\n\n这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面\n\n![float-succ](https://cdn.thisjs.com/github/probfloat-long2.png)\n\n所以一种常见的解决方案是\n\n## 瀑布流\n\n![waterfull](https://cdn.thisjs.com/github/probwaterfull.png)\n\n瀑布流的实现方法，网上已经有大量教程，详情参阅\n\n [脚本之家—实现瀑布流](https://www.jb51.net/article/34141.htm)\n\n [前端开发—瀑布流的实现方法](https://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/)\n\n ## 将同一列设置为统一高度\n\n 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。\n\n ![float3](https://cdn.thisjs.com/github/probfloat-long3.png)\n\n 要实现该效果，只需如下几步\n\n 1. 获取所有元素\n 2. 获取相同offsetTop值的元素，即同一行的元素\n 3. 比较同一行元素的高度，取最大的height值，赋给每一个元素即可\n\n如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章\n\n> [解决无法获取ngRepeat生成元素样式的问题](https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/)","slug":"to-solve-the-fluid-layout-element-height-not-unified-in-layout-and-tidy","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx100211h2ub0g08ych","content":"<p>在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。</p>\n<p><img src=\"https://cdn.thisjs.com/github/probfloat-long.png\" alt=\"float\"></p>\n<a id=\"more\"></a>\n<p>这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面</p>\n<p><img src=\"https://cdn.thisjs.com/github/probfloat-long2.png\" alt=\"float-succ\"></p>\n<p>所以一种常见的解决方案是</p>\n<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p><img src=\"https://cdn.thisjs.com/github/probwaterfull.png\" alt=\"waterfull\"></p>\n<p>瀑布流的实现方法，网上已经有大量教程，详情参阅</p>\n<p> <a href=\"https://www.jb51.net/article/34141.htm\" target=\"_blank\" rel=\"noopener\">脚本之家—实现瀑布流</a></p>\n<p> <a href=\"https://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/\" target=\"_blank\" rel=\"noopener\">前端开发—瀑布流的实现方法</a></p>\n<h2 id=\"将同一列设置为统一高度\"><a href=\"#将同一列设置为统一高度\" class=\"headerlink\" title=\"将同一列设置为统一高度\"></a>将同一列设置为统一高度</h2><p> 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。</p>\n<p> <img src=\"https://cdn.thisjs.com/github/probfloat-long3.png\" alt=\"float3\"></p>\n<p> 要实现该效果，只需如下几步</p>\n<ol>\n<li>获取所有元素</li>\n<li>获取相同offsetTop值的元素，即同一行的元素</li>\n<li>比较同一行元素的高度，取最大的height值，赋给每一个元素即可</li>\n</ol>\n<p>如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章</p>\n<blockquote>\n<p><a href=\"https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决无法获取ngRepeat生成元素样式的问题</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在页面布局中，在使用float布局大量相同属性元素的时候，如果元素的高度不固定，某个元素的高度过高，可能会阻挡元素的“流动”，会出现如图的情况。</p>\n<p><img src=\"https://cdn.thisjs.com/github/probfloat-long.png\" alt=\"float\"></p>","more":"<p>这时我们只要保证后面的高度也大于或等于该元素高度，即可让后面的元素流动到前面</p>\n<p><img src=\"https://cdn.thisjs.com/github/probfloat-long2.png\" alt=\"float-succ\"></p>\n<p>所以一种常见的解决方案是</p>\n<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p><img src=\"https://cdn.thisjs.com/github/probwaterfull.png\" alt=\"waterfull\"></p>\n<p>瀑布流的实现方法，网上已经有大量教程，详情参阅</p>\n<p> <a href=\"https://www.jb51.net/article/34141.htm\" target=\"_blank\" rel=\"noopener\">脚本之家—实现瀑布流</a></p>\n<p> <a href=\"https://www.wufangbo.com/tag/%E7%80%91%E5%B8%83%E6%B5%81js/\" target=\"_blank\" rel=\"noopener\">前端开发—瀑布流的实现方法</a></p>\n<h2 id=\"将同一列设置为统一高度\"><a href=\"#将同一列设置为统一高度\" class=\"headerlink\" title=\"将同一列设置为统一高度\"></a>将同一列设置为统一高度</h2><p> 有时候，我们可能并不需要瀑布流的布局，因为在展示某些数据的时候，会显得比较混乱。</p>\n<p> <img src=\"https://cdn.thisjs.com/github/probfloat-long3.png\" alt=\"float3\"></p>\n<p> 要实现该效果，只需如下几步</p>\n<ol>\n<li>获取所有元素</li>\n<li>获取相同offsetTop值的元素，即同一行的元素</li>\n<li>比较同一行元素的高度，取最大的height值，赋给每一个元素即可</li>\n</ol>\n<p>如果遇到使用ng-repeat生成的元素无法获取自动高度问题，可以参考如下文章</p>\n<blockquote>\n<p><a href=\"https://mrxf.github.io/2016/12/01/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96ngRepeat%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决无法获取ngRepeat生成元素样式的问题</a></p>\n</blockquote>"},{"title":"UBuntu中增加virtualBox中磁盘的容量","date":"2014-05-23T18:02:23.000Z","_content":"在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量\n\n`VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB  `\n\n<!--more-->\n\n进入到虚拟磁盘的目录，输入以上代码即可。\n修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。\n\n`YOUR_HARD_DISK.vdi--你的虚拟磁盘名字`\n`SIZE_IN_MB--重新定义大小以M为单位  `  ","source":"_posts/u-buntu-increase-in-virtual-box-disk-capacity.md","raw":"---\ntitle: UBuntu中增加virtualBox中磁盘的容量\ndate: 2014-05-23 18:02:23\ntags: 操作系统\n---\n在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量\n\n`VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB  `\n\n<!--more-->\n\n进入到虚拟磁盘的目录，输入以上代码即可。\n修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。\n\n`YOUR_HARD_DISK.vdi--你的虚拟磁盘名字`\n`SIZE_IN_MB--重新定义大小以M为单位  `  ","slug":"u-buntu-increase-in-virtual-box-disk-capacity","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx200231h2u58qia2sz","content":"<p>在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量</p>\n<p><code>VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB</code></p>\n<a id=\"more\"></a>\n<p>进入到虚拟磁盘的目录，输入以上代码即可。<br>修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。</p>\n<p><code>YOUR_HARD_DISK.vdi--你的虚拟磁盘名字</code><br><code>SIZE_IN_MB--重新定义大小以M为单位</code>  </p>\n","site":{"data":{}},"excerpt":"<p>在使用Ubuntu中虚拟机装操作系统之后发现操作系统中的硬盘容量不足，可以使用如下方法动态修改磁盘的容量</p>\n<p><code>VBoxManage modifyhd YOUR_HARD_DISK.vdi --resize SIZE_IN_MB</code></p>","more":"<p>进入到虚拟磁盘的目录，输入以上代码即可。<br>修改完之后，进入windows系统，使用磁盘管理软件就可以修改大小了。</p>\n<p><code>YOUR_HARD_DISK.vdi--你的虚拟磁盘名字</code><br><code>SIZE_IN_MB--重新定义大小以M为单位</code>  </p>"},{"title":"使用Aria2为OneDrive增加离线下载功能","date":"2018-03-07T21:22:10.000Z","_content":"\n![OneDrive](https://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg)\n\n本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。\n\n<!--more-->\n\n## 太长不看的背景介绍\n\n<details>\n   <summary>还是点开看看吧</summary>\n\n微软推出的OneDrive拥有非常强大的功能，可以在多个终端管理自己的文件，国内访问速度非常快，下载文件可以达到满速，不会像百度云那样即使有百兆网络，也只能每秒100k左右的下载速度。如果无法愉快的使用GoogleDrive，那么OneDrive是一个非常不错的选择。\n\n在国内的主流云盘中，都会有一个离线下载的功能，即允许用户添加下载任务，服务器会自动将资源下载到云盘中，用户过段时间就可以查看自己的文件了。\n\n使用`离线下载`功能一般有如下两个目的\n\n1. 将需要观看的影视资源，下载到服务器中，过段时间就可以直接在线观看 *(百度云)*\n\n2. 利用服务器的高速网络，将本来比较慢速的资源提前下载好，再取回本地 *(迅雷离线)*\n\n而本次为OneDrive搭建的离线下载功能，主要推荐的使用方法如下：\n\n1. 将需要阅读的文档资源，离线下载到OneDrive中，随时随地查看\n2. 将需要编辑的Office资源离线保存，使用Office Online编辑\n3. 将喜欢的音乐离线保存，随时随地听\n4. 将喜欢的影视作品离线保存，随时随地观看\n5. ~~将墙外的一些影视、图像资源保存到自己的OneDrive中(需要国外服务器)~~\n\n不推荐的使用方法：\n\n1. 将喜欢的游戏离线保存到服务器，过段时间再下载到电脑上\n2. 将需要安装的大型软件离线保存\n</details>\n\n## 实现思路：\n\n添加下载任务 => 将资源保存到服务器中 => 在服务器上将资源同步到OneDrive中 => 在OneDrive中查看资源\n\n## 准备材料：\n\n* 一台云服务器\n* OneDrive\n\n> **备注：** 本次使用的云服务器安装的是**CentOs 7.2**系统\n\n## 首先实现将服务器上的资源同步到OneDrive\n\n我们采用了[Linux OneDrive](https://github.com/skilion/onedrive)的开源项目。\n\n\n### 安装git用于Clone GitHub上的资源\n\n```\nyum install git\n```\n\n### 开始安装onedrive\n\n```\n# 安装依赖\nsudo yum install libcurl-devel\nsudo yum install sqlite-devel\ncurl -fsS https://dlang.org/install.sh | bash -s dmd\n\n# 安装OneDrive\ngit clone https://github.com/skilion/onedrive.git\ncd onedrive\nmake\nsudo make install\n```\n\n如果你在make过程中遇到了`dmd：命令未找到`错误，请先激活dmd，方法如下\n\n```\n# 激活\nsource ~/dlang/dmd-2.079.0/activate\n# 取消激活\ndeactivate\n```\n安装完成之后，需要配置一下需要同步的内容，因为Onedrive默认会将服务器上所有的内容都同步下来，这样非常慢。\n\n在onedrive 目录下执行以下三行命令，创建OneDrive配置文件\n```\nmkdir -p ~/.config/onedrive\ncp ./config ~/.config/onedrive/config\nvim ~/.config/onedrive/config\n```\n\n配置信息可以参考如下\n```\n# 本地同步的位置\nsync_dir = \"/home/download/onedrive\"\n# 符合以下规则的目录或者内容，将跳过同步\nskip_file = \"影视|软件工具\"\n```\n\n* 这里使用`/home/download/onedrive`作为同步目录，是为了给Aria2留出下载目录，可以根据自己需要随便修改\n* skip_file可以使用|添加多个规则\n\n接下来为OneDrive执行授权，在命令行中执行\n\n```\nonedrive\n```\n会输出一个授权地址，复制授权地址到本地浏览器中打开，授权登录之后，将授权后的**全部地址**拷贝过来粘贴即可\n\n从现在开始，只要执行OneDrive即可将本地的资源与服务端的内容同步。\n\n但是我们希望在关闭SSH终端之后，依然可以自动同步。\n\n官方推荐的方案是:\n\n```\nsystemctl --user enable onedrive\nsystemctl --user start onedrive\n```\n但是在Centos 7.2中会出现错误，因此可以使用`nohup`、`screen`等命令允许在关闭SSH终端之后，继续执行，执行以下命令即可\n\n```\nnohup onedrive -m &\n```\n\n现在，我们在服务器上的文件操作，都会同步到OneDrive中了。\n\n\n如果需要结束后台同步，找到ID，结束即可\n```\n[root@onedrive ~]# ps -ef|grep onedrive\nroot      40504      1  0 12:21 ?        00:00:02 onedrive -m\n[root@onedrive ~]# kill 40504\n```\n\n## 安装Aria2实现远程下载\n\n首先安装Aria2\n\n```\nyum install aria2\n```\n\n配置\n```\nmkdir /home/soft/aria2c -p\ntouch /home/soft/aria2c/aria2.session\nvim /home/soft/aria2c/aria2.conf\n```\n\n配置内容参考如下\n\n```\n#用户名\n#rpc-user=user\n#密码\n#rpc-passwd=passwd\n#上面的认证方式不建议使用,建议使用下面的token方式\n#设置加密的密钥\nrpc-secret=token\n#允许rpc\nenable-rpc=true\n#允许所有来源, web界面跨域权限需要\nrpc-allow-origin-all=true\n#允许外部访问，false的话只监听本地端口\nrpc-listen-all=true\n#RPC端口, 仅当默认端口被占用时修改\nrpc-listen-port=6800\n#最大同时下载数(任务数), 路由建议值: 3\nmax-concurrent-downloads=3\n#断点续传\ncontinue=true\n#同服务器连接数\nmax-connection-per-server=3\n#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要\nmin-split-size=10M\n#单文件最大线程数, 路由建议值: 5\nsplit=10\n#下载速度限制\nmax-overall-download-limit=0\n#单文件速度限制\nmax-download-limit=0\n#上传速度限制\nmax-overall-upload-limit=0\n#单文件速度限制\nmax-upload-limit=0\n#断开速度过慢的连接\n#lowest-speed-limit=0\n#验证用，需要1.16.1之后的release版本\n#referer=*\n#文件保存路径, 默认为当前启动位置\ndir=/home/download/onedrive\ninput-file=/home/soft/aria2c/aria2.session\nsave-session=/home/soft/aria2c/aria2.session\nsave-session-interval=60\n#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本\n#disk-cache=0\n#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)\n#enable-mmap=true\n#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长\n#所需时间 none < falloc ? trunc << prealloc, falloc和trunc需要文件系统和内核支持\nfile-allocation=prealloc\n```\n**几个关键内容：**\n\n* `rpc-secret`用于设置访问token\n* `dir` 设置到OneDrive的目录\n\n\n启动Aria2服务：\n```\naria2c --conf-path=/home/soft/aria2c/aria2.conf -D\n```\n\n**接下来安装UI界面**\n\nUI界面采用[webui-aria2](https://github.com/ziahamza/webui-aria2)\n\n进入`/home/wwwroot`目录，克隆项目\n\n```\ngit clone https://github.com/ziahamza/webui-aria2.git\n```\n\n**使用Nginx启动界面服务**\n\n安装nginx\n```\n# 安装\nsudo yum install nginx\n\n# 作为服务启动\nsudo systemctl start nginx\n```\n\n# 配置Nginx\n\n```\nvim vim /etc/nginx/nginx.conf\n```\n修改root目录到项目所在位置\n\n```\nserver {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /home/wwwroot/webui-aria2;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n}\n```\n\n重启Nginx\n\n```\nnginx -s reload\n```\n\n打开对应地址，发现已经成功了\n\n![成功界面](https://cdn.thisjs.com/blog/linksuccess.png)\n\n测试下载文件\n\n![下载文件](https://cdn.thisjs.com/blog/downafile.png)\n\n注意设置dir为OneDrive下的目录\n\n![成功转存](https://cdn.thisjs.com/blog/down-upload-success.png)\n\n过一会儿在Onedrive上，就会发现文件已经成功转存。\n\n\n## 参考文献\n\n[Ubuntu 14 安装aria2c与web ui将老旧笔记本改装成下载机](https://www.micronbot.com/Linux/aria2c.html)\n\n[Linux ssh状态下如何后台运行程序？ - yegle的回答](https://www.zhihu.com/question/20709809/answer/15939097)","source":"_posts/use-aria2-increase-offline-download-function-for-onedrive.md","raw":"---\ntitle: 使用Aria2为OneDrive增加离线下载功能\ndate: 2018-03-07 21:22:10\ntags: [centos]\n---\n\n![OneDrive](https://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg)\n\n本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。\n\n<!--more-->\n\n## 太长不看的背景介绍\n\n<details>\n   <summary>还是点开看看吧</summary>\n\n微软推出的OneDrive拥有非常强大的功能，可以在多个终端管理自己的文件，国内访问速度非常快，下载文件可以达到满速，不会像百度云那样即使有百兆网络，也只能每秒100k左右的下载速度。如果无法愉快的使用GoogleDrive，那么OneDrive是一个非常不错的选择。\n\n在国内的主流云盘中，都会有一个离线下载的功能，即允许用户添加下载任务，服务器会自动将资源下载到云盘中，用户过段时间就可以查看自己的文件了。\n\n使用`离线下载`功能一般有如下两个目的\n\n1. 将需要观看的影视资源，下载到服务器中，过段时间就可以直接在线观看 *(百度云)*\n\n2. 利用服务器的高速网络，将本来比较慢速的资源提前下载好，再取回本地 *(迅雷离线)*\n\n而本次为OneDrive搭建的离线下载功能，主要推荐的使用方法如下：\n\n1. 将需要阅读的文档资源，离线下载到OneDrive中，随时随地查看\n2. 将需要编辑的Office资源离线保存，使用Office Online编辑\n3. 将喜欢的音乐离线保存，随时随地听\n4. 将喜欢的影视作品离线保存，随时随地观看\n5. ~~将墙外的一些影视、图像资源保存到自己的OneDrive中(需要国外服务器)~~\n\n不推荐的使用方法：\n\n1. 将喜欢的游戏离线保存到服务器，过段时间再下载到电脑上\n2. 将需要安装的大型软件离线保存\n</details>\n\n## 实现思路：\n\n添加下载任务 => 将资源保存到服务器中 => 在服务器上将资源同步到OneDrive中 => 在OneDrive中查看资源\n\n## 准备材料：\n\n* 一台云服务器\n* OneDrive\n\n> **备注：** 本次使用的云服务器安装的是**CentOs 7.2**系统\n\n## 首先实现将服务器上的资源同步到OneDrive\n\n我们采用了[Linux OneDrive](https://github.com/skilion/onedrive)的开源项目。\n\n\n### 安装git用于Clone GitHub上的资源\n\n```\nyum install git\n```\n\n### 开始安装onedrive\n\n```\n# 安装依赖\nsudo yum install libcurl-devel\nsudo yum install sqlite-devel\ncurl -fsS https://dlang.org/install.sh | bash -s dmd\n\n# 安装OneDrive\ngit clone https://github.com/skilion/onedrive.git\ncd onedrive\nmake\nsudo make install\n```\n\n如果你在make过程中遇到了`dmd：命令未找到`错误，请先激活dmd，方法如下\n\n```\n# 激活\nsource ~/dlang/dmd-2.079.0/activate\n# 取消激活\ndeactivate\n```\n安装完成之后，需要配置一下需要同步的内容，因为Onedrive默认会将服务器上所有的内容都同步下来，这样非常慢。\n\n在onedrive 目录下执行以下三行命令，创建OneDrive配置文件\n```\nmkdir -p ~/.config/onedrive\ncp ./config ~/.config/onedrive/config\nvim ~/.config/onedrive/config\n```\n\n配置信息可以参考如下\n```\n# 本地同步的位置\nsync_dir = \"/home/download/onedrive\"\n# 符合以下规则的目录或者内容，将跳过同步\nskip_file = \"影视|软件工具\"\n```\n\n* 这里使用`/home/download/onedrive`作为同步目录，是为了给Aria2留出下载目录，可以根据自己需要随便修改\n* skip_file可以使用|添加多个规则\n\n接下来为OneDrive执行授权，在命令行中执行\n\n```\nonedrive\n```\n会输出一个授权地址，复制授权地址到本地浏览器中打开，授权登录之后，将授权后的**全部地址**拷贝过来粘贴即可\n\n从现在开始，只要执行OneDrive即可将本地的资源与服务端的内容同步。\n\n但是我们希望在关闭SSH终端之后，依然可以自动同步。\n\n官方推荐的方案是:\n\n```\nsystemctl --user enable onedrive\nsystemctl --user start onedrive\n```\n但是在Centos 7.2中会出现错误，因此可以使用`nohup`、`screen`等命令允许在关闭SSH终端之后，继续执行，执行以下命令即可\n\n```\nnohup onedrive -m &\n```\n\n现在，我们在服务器上的文件操作，都会同步到OneDrive中了。\n\n\n如果需要结束后台同步，找到ID，结束即可\n```\n[root@onedrive ~]# ps -ef|grep onedrive\nroot      40504      1  0 12:21 ?        00:00:02 onedrive -m\n[root@onedrive ~]# kill 40504\n```\n\n## 安装Aria2实现远程下载\n\n首先安装Aria2\n\n```\nyum install aria2\n```\n\n配置\n```\nmkdir /home/soft/aria2c -p\ntouch /home/soft/aria2c/aria2.session\nvim /home/soft/aria2c/aria2.conf\n```\n\n配置内容参考如下\n\n```\n#用户名\n#rpc-user=user\n#密码\n#rpc-passwd=passwd\n#上面的认证方式不建议使用,建议使用下面的token方式\n#设置加密的密钥\nrpc-secret=token\n#允许rpc\nenable-rpc=true\n#允许所有来源, web界面跨域权限需要\nrpc-allow-origin-all=true\n#允许外部访问，false的话只监听本地端口\nrpc-listen-all=true\n#RPC端口, 仅当默认端口被占用时修改\nrpc-listen-port=6800\n#最大同时下载数(任务数), 路由建议值: 3\nmax-concurrent-downloads=3\n#断点续传\ncontinue=true\n#同服务器连接数\nmax-connection-per-server=3\n#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要\nmin-split-size=10M\n#单文件最大线程数, 路由建议值: 5\nsplit=10\n#下载速度限制\nmax-overall-download-limit=0\n#单文件速度限制\nmax-download-limit=0\n#上传速度限制\nmax-overall-upload-limit=0\n#单文件速度限制\nmax-upload-limit=0\n#断开速度过慢的连接\n#lowest-speed-limit=0\n#验证用，需要1.16.1之后的release版本\n#referer=*\n#文件保存路径, 默认为当前启动位置\ndir=/home/download/onedrive\ninput-file=/home/soft/aria2c/aria2.session\nsave-session=/home/soft/aria2c/aria2.session\nsave-session-interval=60\n#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本\n#disk-cache=0\n#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)\n#enable-mmap=true\n#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长\n#所需时间 none < falloc ? trunc << prealloc, falloc和trunc需要文件系统和内核支持\nfile-allocation=prealloc\n```\n**几个关键内容：**\n\n* `rpc-secret`用于设置访问token\n* `dir` 设置到OneDrive的目录\n\n\n启动Aria2服务：\n```\naria2c --conf-path=/home/soft/aria2c/aria2.conf -D\n```\n\n**接下来安装UI界面**\n\nUI界面采用[webui-aria2](https://github.com/ziahamza/webui-aria2)\n\n进入`/home/wwwroot`目录，克隆项目\n\n```\ngit clone https://github.com/ziahamza/webui-aria2.git\n```\n\n**使用Nginx启动界面服务**\n\n安装nginx\n```\n# 安装\nsudo yum install nginx\n\n# 作为服务启动\nsudo systemctl start nginx\n```\n\n# 配置Nginx\n\n```\nvim vim /etc/nginx/nginx.conf\n```\n修改root目录到项目所在位置\n\n```\nserver {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /home/wwwroot/webui-aria2;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n}\n```\n\n重启Nginx\n\n```\nnginx -s reload\n```\n\n打开对应地址，发现已经成功了\n\n![成功界面](https://cdn.thisjs.com/blog/linksuccess.png)\n\n测试下载文件\n\n![下载文件](https://cdn.thisjs.com/blog/downafile.png)\n\n注意设置dir为OneDrive下的目录\n\n![成功转存](https://cdn.thisjs.com/blog/down-upload-success.png)\n\n过一会儿在Onedrive上，就会发现文件已经成功转存。\n\n\n## 参考文献\n\n[Ubuntu 14 安装aria2c与web ui将老旧笔记本改装成下载机](https://www.micronbot.com/Linux/aria2c.html)\n\n[Linux ssh状态下如何后台运行程序？ - yegle的回答](https://www.zhihu.com/question/20709809/answer/15939097)","slug":"use-aria2-increase-offline-download-function-for-onedrive","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx400261h2un53qhstl","content":"<p><img src=\"https://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg\" alt=\"OneDrive\"></p>\n<p>本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。</p>\n<a id=\"more\"></a>\n<h2 id=\"太长不看的背景介绍\"><a href=\"#太长不看的背景介绍\" class=\"headerlink\" title=\"太长不看的背景介绍\"></a>太长不看的背景介绍</h2><details><br>   <summary>还是点开看看吧</summary><br><br>微软推出的OneDrive拥有非常强大的功能，可以在多个终端管理自己的文件，国内访问速度非常快，下载文件可以达到满速，不会像百度云那样即使有百兆网络，也只能每秒100k左右的下载速度。如果无法愉快的使用GoogleDrive，那么OneDrive是一个非常不错的选择。<br><br>在国内的主流云盘中，都会有一个离线下载的功能，即允许用户添加下载任务，服务器会自动将资源下载到云盘中，用户过段时间就可以查看自己的文件了。<br><br>使用<code>离线下载</code>功能一般有如下两个目的<br><br>1. 将需要观看的影视资源，下载到服务器中，过段时间就可以直接在线观看 <em>(百度云)</em><br><br>2. 利用服务器的高速网络，将本来比较慢速的资源提前下载好，再取回本地 <em>(迅雷离线)</em><br><br>而本次为OneDrive搭建的离线下载功能，主要推荐的使用方法如下：<br><br>1. 将需要阅读的文档资源，离线下载到OneDrive中，随时随地查看<br>2. 将需要编辑的Office资源离线保存，使用Office Online编辑<br>3. 将喜欢的音乐离线保存，随时随地听<br>4. 将喜欢的影视作品离线保存，随时随地观看<br>5. <del>将墙外的一些影视、图像资源保存到自己的OneDrive中(需要国外服务器)</del><br><br>不推荐的使用方法：<br><br>1. 将喜欢的游戏离线保存到服务器，过段时间再下载到电脑上<br>2. 将需要安装的大型软件离线保存<br></details>\n\n<h2 id=\"实现思路：\"><a href=\"#实现思路：\" class=\"headerlink\" title=\"实现思路：\"></a>实现思路：</h2><p>添加下载任务 =&gt; 将资源保存到服务器中 =&gt; 在服务器上将资源同步到OneDrive中 =&gt; 在OneDrive中查看资源</p>\n<h2 id=\"准备材料：\"><a href=\"#准备材料：\" class=\"headerlink\" title=\"准备材料：\"></a>准备材料：</h2><ul>\n<li>一台云服务器</li>\n<li>OneDrive</li>\n</ul>\n<blockquote>\n<p><strong>备注：</strong> 本次使用的云服务器安装的是<strong>CentOs 7.2</strong>系统</p>\n</blockquote>\n<h2 id=\"首先实现将服务器上的资源同步到OneDrive\"><a href=\"#首先实现将服务器上的资源同步到OneDrive\" class=\"headerlink\" title=\"首先实现将服务器上的资源同步到OneDrive\"></a>首先实现将服务器上的资源同步到OneDrive</h2><p>我们采用了<a href=\"https://github.com/skilion/onedrive\" target=\"_blank\" rel=\"noopener\">Linux OneDrive</a>的开源项目。</p>\n<h3 id=\"安装git用于Clone-GitHub上的资源\"><a href=\"#安装git用于Clone-GitHub上的资源\" class=\"headerlink\" title=\"安装git用于Clone GitHub上的资源\"></a>安装git用于Clone GitHub上的资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始安装onedrive\"><a href=\"#开始安装onedrive\" class=\"headerlink\" title=\"开始安装onedrive\"></a>开始安装onedrive</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">sudo yum install libcurl-devel</span><br><span class=\"line\">sudo yum install sqlite-devel</span><br><span class=\"line\">curl -fsS https://dlang.org/install.sh | bash -s dmd</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装OneDrive</span><br><span class=\"line\">git clone https://github.com/skilion/onedrive.git</span><br><span class=\"line\">cd onedrive</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>如果你在make过程中遇到了<code>dmd：命令未找到</code>错误，请先激活dmd，方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 激活</span><br><span class=\"line\">source ~/dlang/dmd-2.079.0/activate</span><br><span class=\"line\"># 取消激活</span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，需要配置一下需要同步的内容，因为Onedrive默认会将服务器上所有的内容都同步下来，这样非常慢。</p>\n<p>在onedrive 目录下执行以下三行命令，创建OneDrive配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config/onedrive</span><br><span class=\"line\">cp ./config ~/.config/onedrive/config</span><br><span class=\"line\">vim ~/.config/onedrive/config</span><br></pre></td></tr></table></figure></p>\n<p>配置信息可以参考如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地同步的位置</span><br><span class=\"line\">sync_dir = &quot;/home/download/onedrive&quot;</span><br><span class=\"line\"># 符合以下规则的目录或者内容，将跳过同步</span><br><span class=\"line\">skip_file = &quot;影视|软件工具&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里使用<code>/home/download/onedrive</code>作为同步目录，是为了给Aria2留出下载目录，可以根据自己需要随便修改</li>\n<li>skip_file可以使用|添加多个规则</li>\n</ul>\n<p>接下来为OneDrive执行授权，在命令行中执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onedrive</span><br></pre></td></tr></table></figure>\n<p>会输出一个授权地址，复制授权地址到本地浏览器中打开，授权登录之后，将授权后的<strong>全部地址</strong>拷贝过来粘贴即可</p>\n<p>从现在开始，只要执行OneDrive即可将本地的资源与服务端的内容同步。</p>\n<p>但是我们希望在关闭SSH终端之后，依然可以自动同步。</p>\n<p>官方推荐的方案是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl --user enable onedrive</span><br><span class=\"line\">systemctl --user start onedrive</span><br></pre></td></tr></table></figure>\n<p>但是在Centos 7.2中会出现错误，因此可以使用<code>nohup</code>、<code>screen</code>等命令允许在关闭SSH终端之后，继续执行，执行以下命令即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup onedrive -m &amp;</span><br></pre></td></tr></table></figure>\n<p>现在，我们在服务器上的文件操作，都会同步到OneDrive中了。</p>\n<p>如果需要结束后台同步，找到ID，结束即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@onedrive ~]# ps -ef|grep onedrive</span><br><span class=\"line\">root      40504      1  0 12:21 ?        00:00:02 onedrive -m</span><br><span class=\"line\">[root@onedrive ~]# kill 40504</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Aria2实现远程下载\"><a href=\"#安装Aria2实现远程下载\" class=\"headerlink\" title=\"安装Aria2实现远程下载\"></a>安装Aria2实现远程下载</h2><p>首先安装Aria2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install aria2</span><br></pre></td></tr></table></figure>\n<p>配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/soft/aria2c -p</span><br><span class=\"line\">touch /home/soft/aria2c/aria2.session</span><br><span class=\"line\">vim /home/soft/aria2c/aria2.conf</span><br></pre></td></tr></table></figure></p>\n<p>配置内容参考如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用户名</span><br><span class=\"line\">#rpc-user=user</span><br><span class=\"line\">#密码</span><br><span class=\"line\">#rpc-passwd=passwd</span><br><span class=\"line\">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class=\"line\">#设置加密的密钥</span><br><span class=\"line\">rpc-secret=token</span><br><span class=\"line\">#允许rpc</span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">#允许所有来源, web界面跨域权限需要</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">#允许外部访问，false的话只监听本地端口</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">#RPC端口, 仅当默认端口被占用时修改</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class=\"line\">max-concurrent-downloads=3</span><br><span class=\"line\">#断点续传</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">#同服务器连接数</span><br><span class=\"line\">max-connection-per-server=3</span><br><span class=\"line\">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class=\"line\">min-split-size=10M</span><br><span class=\"line\">#单文件最大线程数, 路由建议值: 5</span><br><span class=\"line\">split=10</span><br><span class=\"line\">#下载速度限制</span><br><span class=\"line\">max-overall-download-limit=0</span><br><span class=\"line\">#单文件速度限制</span><br><span class=\"line\">max-download-limit=0</span><br><span class=\"line\">#上传速度限制</span><br><span class=\"line\">max-overall-upload-limit=0</span><br><span class=\"line\">#单文件速度限制</span><br><span class=\"line\">max-upload-limit=0</span><br><span class=\"line\">#断开速度过慢的连接</span><br><span class=\"line\">#lowest-speed-limit=0</span><br><span class=\"line\">#验证用，需要1.16.1之后的release版本</span><br><span class=\"line\">#referer=*</span><br><span class=\"line\">#文件保存路径, 默认为当前启动位置</span><br><span class=\"line\">dir=/home/download/onedrive</span><br><span class=\"line\">input-file=/home/soft/aria2c/aria2.session</span><br><span class=\"line\">save-session=/home/soft/aria2c/aria2.session</span><br><span class=\"line\">save-session-interval=60</span><br><span class=\"line\">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class=\"line\">#disk-cache=0</span><br><span class=\"line\">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class=\"line\">#enable-mmap=true</span><br><span class=\"line\">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class=\"line\">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class=\"line\">file-allocation=prealloc</span><br></pre></td></tr></table></figure>\n<p><strong>几个关键内容：</strong></p>\n<ul>\n<li><code>rpc-secret</code>用于设置访问token</li>\n<li><code>dir</code> 设置到OneDrive的目录</li>\n</ul>\n<p>启动Aria2服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aria2c --conf-path=/home/soft/aria2c/aria2.conf -D</span><br></pre></td></tr></table></figure></p>\n<p><strong>接下来安装UI界面</strong></p>\n<p>UI界面采用<a href=\"https://github.com/ziahamza/webui-aria2\" target=\"_blank\" rel=\"noopener\">webui-aria2</a></p>\n<p>进入<code>/home/wwwroot</code>目录，克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ziahamza/webui-aria2.git</span><br></pre></td></tr></table></figure>\n<p><strong>使用Nginx启动界面服务</strong></p>\n<p>安装nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">sudo yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 作为服务启动</span><br><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改root目录到项目所在位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /home/wwwroot/webui-aria2;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>打开对应地址，发现已经成功了</p>\n<p><img src=\"https://cdn.thisjs.com/blog/linksuccess.png\" alt=\"成功界面\"></p>\n<p>测试下载文件</p>\n<p><img src=\"https://cdn.thisjs.com/blog/downafile.png\" alt=\"下载文件\"></p>\n<p>注意设置dir为OneDrive下的目录</p>\n<p><img src=\"https://cdn.thisjs.com/blog/down-upload-success.png\" alt=\"成功转存\"></p>\n<p>过一会儿在Onedrive上，就会发现文件已经成功转存。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.micronbot.com/Linux/aria2c.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 14 安装aria2c与web ui将老旧笔记本改装成下载机</a></p>\n<p><a href=\"https://www.zhihu.com/question/20709809/answer/15939097\" target=\"_blank\" rel=\"noopener\">Linux ssh状态下如何后台运行程序？ - yegle的回答</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/blog/Microsoft-OneDrive.jpg\" alt=\"OneDrive\"></p>\n<p>本文介绍如何利用云服务器，为OneDrive增加离线下载功能。在充分利用云服务器空闲资源的同时，享受OneDrive强大的在线影音、文档编辑功能。</p>","more":"<h2 id=\"太长不看的背景介绍\"><a href=\"#太长不看的背景介绍\" class=\"headerlink\" title=\"太长不看的背景介绍\"></a>太长不看的背景介绍</h2><details><br>   <summary>还是点开看看吧</summary><br><br>微软推出的OneDrive拥有非常强大的功能，可以在多个终端管理自己的文件，国内访问速度非常快，下载文件可以达到满速，不会像百度云那样即使有百兆网络，也只能每秒100k左右的下载速度。如果无法愉快的使用GoogleDrive，那么OneDrive是一个非常不错的选择。<br><br>在国内的主流云盘中，都会有一个离线下载的功能，即允许用户添加下载任务，服务器会自动将资源下载到云盘中，用户过段时间就可以查看自己的文件了。<br><br>使用<code>离线下载</code>功能一般有如下两个目的<br><br>1. 将需要观看的影视资源，下载到服务器中，过段时间就可以直接在线观看 <em>(百度云)</em><br><br>2. 利用服务器的高速网络，将本来比较慢速的资源提前下载好，再取回本地 <em>(迅雷离线)</em><br><br>而本次为OneDrive搭建的离线下载功能，主要推荐的使用方法如下：<br><br>1. 将需要阅读的文档资源，离线下载到OneDrive中，随时随地查看<br>2. 将需要编辑的Office资源离线保存，使用Office Online编辑<br>3. 将喜欢的音乐离线保存，随时随地听<br>4. 将喜欢的影视作品离线保存，随时随地观看<br>5. <del>将墙外的一些影视、图像资源保存到自己的OneDrive中(需要国外服务器)</del><br><br>不推荐的使用方法：<br><br>1. 将喜欢的游戏离线保存到服务器，过段时间再下载到电脑上<br>2. 将需要安装的大型软件离线保存<br></details>\n\n<h2 id=\"实现思路：\"><a href=\"#实现思路：\" class=\"headerlink\" title=\"实现思路：\"></a>实现思路：</h2><p>添加下载任务 =&gt; 将资源保存到服务器中 =&gt; 在服务器上将资源同步到OneDrive中 =&gt; 在OneDrive中查看资源</p>\n<h2 id=\"准备材料：\"><a href=\"#准备材料：\" class=\"headerlink\" title=\"准备材料：\"></a>准备材料：</h2><ul>\n<li>一台云服务器</li>\n<li>OneDrive</li>\n</ul>\n<blockquote>\n<p><strong>备注：</strong> 本次使用的云服务器安装的是<strong>CentOs 7.2</strong>系统</p>\n</blockquote>\n<h2 id=\"首先实现将服务器上的资源同步到OneDrive\"><a href=\"#首先实现将服务器上的资源同步到OneDrive\" class=\"headerlink\" title=\"首先实现将服务器上的资源同步到OneDrive\"></a>首先实现将服务器上的资源同步到OneDrive</h2><p>我们采用了<a href=\"https://github.com/skilion/onedrive\" target=\"_blank\" rel=\"noopener\">Linux OneDrive</a>的开源项目。</p>\n<h3 id=\"安装git用于Clone-GitHub上的资源\"><a href=\"#安装git用于Clone-GitHub上的资源\" class=\"headerlink\" title=\"安装git用于Clone GitHub上的资源\"></a>安装git用于Clone GitHub上的资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始安装onedrive\"><a href=\"#开始安装onedrive\" class=\"headerlink\" title=\"开始安装onedrive\"></a>开始安装onedrive</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">sudo yum install libcurl-devel</span><br><span class=\"line\">sudo yum install sqlite-devel</span><br><span class=\"line\">curl -fsS https://dlang.org/install.sh | bash -s dmd</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装OneDrive</span><br><span class=\"line\">git clone https://github.com/skilion/onedrive.git</span><br><span class=\"line\">cd onedrive</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>如果你在make过程中遇到了<code>dmd：命令未找到</code>错误，请先激活dmd，方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 激活</span><br><span class=\"line\">source ~/dlang/dmd-2.079.0/activate</span><br><span class=\"line\"># 取消激活</span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，需要配置一下需要同步的内容，因为Onedrive默认会将服务器上所有的内容都同步下来，这样非常慢。</p>\n<p>在onedrive 目录下执行以下三行命令，创建OneDrive配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config/onedrive</span><br><span class=\"line\">cp ./config ~/.config/onedrive/config</span><br><span class=\"line\">vim ~/.config/onedrive/config</span><br></pre></td></tr></table></figure></p>\n<p>配置信息可以参考如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地同步的位置</span><br><span class=\"line\">sync_dir = &quot;/home/download/onedrive&quot;</span><br><span class=\"line\"># 符合以下规则的目录或者内容，将跳过同步</span><br><span class=\"line\">skip_file = &quot;影视|软件工具&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里使用<code>/home/download/onedrive</code>作为同步目录，是为了给Aria2留出下载目录，可以根据自己需要随便修改</li>\n<li>skip_file可以使用|添加多个规则</li>\n</ul>\n<p>接下来为OneDrive执行授权，在命令行中执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onedrive</span><br></pre></td></tr></table></figure>\n<p>会输出一个授权地址，复制授权地址到本地浏览器中打开，授权登录之后，将授权后的<strong>全部地址</strong>拷贝过来粘贴即可</p>\n<p>从现在开始，只要执行OneDrive即可将本地的资源与服务端的内容同步。</p>\n<p>但是我们希望在关闭SSH终端之后，依然可以自动同步。</p>\n<p>官方推荐的方案是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl --user enable onedrive</span><br><span class=\"line\">systemctl --user start onedrive</span><br></pre></td></tr></table></figure>\n<p>但是在Centos 7.2中会出现错误，因此可以使用<code>nohup</code>、<code>screen</code>等命令允许在关闭SSH终端之后，继续执行，执行以下命令即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup onedrive -m &amp;</span><br></pre></td></tr></table></figure>\n<p>现在，我们在服务器上的文件操作，都会同步到OneDrive中了。</p>\n<p>如果需要结束后台同步，找到ID，结束即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@onedrive ~]# ps -ef|grep onedrive</span><br><span class=\"line\">root      40504      1  0 12:21 ?        00:00:02 onedrive -m</span><br><span class=\"line\">[root@onedrive ~]# kill 40504</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Aria2实现远程下载\"><a href=\"#安装Aria2实现远程下载\" class=\"headerlink\" title=\"安装Aria2实现远程下载\"></a>安装Aria2实现远程下载</h2><p>首先安装Aria2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install aria2</span><br></pre></td></tr></table></figure>\n<p>配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/soft/aria2c -p</span><br><span class=\"line\">touch /home/soft/aria2c/aria2.session</span><br><span class=\"line\">vim /home/soft/aria2c/aria2.conf</span><br></pre></td></tr></table></figure></p>\n<p>配置内容参考如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用户名</span><br><span class=\"line\">#rpc-user=user</span><br><span class=\"line\">#密码</span><br><span class=\"line\">#rpc-passwd=passwd</span><br><span class=\"line\">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class=\"line\">#设置加密的密钥</span><br><span class=\"line\">rpc-secret=token</span><br><span class=\"line\">#允许rpc</span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">#允许所有来源, web界面跨域权限需要</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">#允许外部访问，false的话只监听本地端口</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">#RPC端口, 仅当默认端口被占用时修改</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class=\"line\">max-concurrent-downloads=3</span><br><span class=\"line\">#断点续传</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">#同服务器连接数</span><br><span class=\"line\">max-connection-per-server=3</span><br><span class=\"line\">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class=\"line\">min-split-size=10M</span><br><span class=\"line\">#单文件最大线程数, 路由建议值: 5</span><br><span class=\"line\">split=10</span><br><span class=\"line\">#下载速度限制</span><br><span class=\"line\">max-overall-download-limit=0</span><br><span class=\"line\">#单文件速度限制</span><br><span class=\"line\">max-download-limit=0</span><br><span class=\"line\">#上传速度限制</span><br><span class=\"line\">max-overall-upload-limit=0</span><br><span class=\"line\">#单文件速度限制</span><br><span class=\"line\">max-upload-limit=0</span><br><span class=\"line\">#断开速度过慢的连接</span><br><span class=\"line\">#lowest-speed-limit=0</span><br><span class=\"line\">#验证用，需要1.16.1之后的release版本</span><br><span class=\"line\">#referer=*</span><br><span class=\"line\">#文件保存路径, 默认为当前启动位置</span><br><span class=\"line\">dir=/home/download/onedrive</span><br><span class=\"line\">input-file=/home/soft/aria2c/aria2.session</span><br><span class=\"line\">save-session=/home/soft/aria2c/aria2.session</span><br><span class=\"line\">save-session-interval=60</span><br><span class=\"line\">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class=\"line\">#disk-cache=0</span><br><span class=\"line\">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class=\"line\">#enable-mmap=true</span><br><span class=\"line\">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class=\"line\">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class=\"line\">file-allocation=prealloc</span><br></pre></td></tr></table></figure>\n<p><strong>几个关键内容：</strong></p>\n<ul>\n<li><code>rpc-secret</code>用于设置访问token</li>\n<li><code>dir</code> 设置到OneDrive的目录</li>\n</ul>\n<p>启动Aria2服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aria2c --conf-path=/home/soft/aria2c/aria2.conf -D</span><br></pre></td></tr></table></figure></p>\n<p><strong>接下来安装UI界面</strong></p>\n<p>UI界面采用<a href=\"https://github.com/ziahamza/webui-aria2\" target=\"_blank\" rel=\"noopener\">webui-aria2</a></p>\n<p>进入<code>/home/wwwroot</code>目录，克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ziahamza/webui-aria2.git</span><br></pre></td></tr></table></figure>\n<p><strong>使用Nginx启动界面服务</strong></p>\n<p>安装nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">sudo yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 作为服务启动</span><br><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改root目录到项目所在位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /home/wwwroot/webui-aria2;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>打开对应地址，发现已经成功了</p>\n<p><img src=\"https://cdn.thisjs.com/blog/linksuccess.png\" alt=\"成功界面\"></p>\n<p>测试下载文件</p>\n<p><img src=\"https://cdn.thisjs.com/blog/downafile.png\" alt=\"下载文件\"></p>\n<p>注意设置dir为OneDrive下的目录</p>\n<p><img src=\"https://cdn.thisjs.com/blog/down-upload-success.png\" alt=\"成功转存\"></p>\n<p>过一会儿在Onedrive上，就会发现文件已经成功转存。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.micronbot.com/Linux/aria2c.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 14 安装aria2c与web ui将老旧笔记本改装成下载机</a></p>\n<p><a href=\"https://www.zhihu.com/question/20709809/answer/15939097\" target=\"_blank\" rel=\"noopener\">Linux ssh状态下如何后台运行程序？ - yegle的回答</a></p>"},{"title":"使用JavaScript判断元素中是否含有某个样式","date":"2018-03-28T20:18:26.000Z","_content":"![题图](https://cdn.thisjs.com/img/hero.png)\n\n看到这个题目，立马想到的就是 **element.classList.contains()** 和 **$(element).hasClass()** 方法。\n\n但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。\n\n<!--more-->\n\n![\bclassList的兼容性](https://cdn.thisjs.com/img/classlist-can-use.png)\n<p style=\"text-align: center;font-size: 10px;\"> <i>classList的兼容性</i> </p>\n\n假如我们\b有如下测试元素\n\n```html\n<div id=\"LL\" class=\"a b hello-world\"></div>\n```\n\n## 简单正则匹配法\n\n最开始我们找到的方法如下，即使用正则判断单词边界的方式判断是否存在className\n\n```js\n function hasClass(element, className) {\n  const regExp = new RegExp(\"\\\\b\"+className+\"\\\\b\", \"gi\");\n  return regExp.test(element.className);\n}\n```\n在样式的名字为hello-world之类的带有-连接符的情况，测试hello和world都会返回true，这并不满足我们的预期。\n\n## IndexOf方法\n\n同理，还有简单的使用 **indexOf()** 方法判断，也会导致这样的问题。\n\n```js\nfunction hasClass(element, className) {\n  return element.className.indexOf(className) > -1;\n}\n```\n这时候，不仅hello和world返回true，h/e/l/等单个字符都会返回true。\n\n我们改进一下该方法:\n\n```js\nfunction hasClass(element, className) {\n  return (\" \" + element.className + \" \" ).indexOf(\" \"+className+\" \") > -1;\n}\n```\n\n现在根据样式名称加\" \"的方式，判断一个元素是否含有该样式。在大部分的测试中，已经没有了问题。\n\n但是！！！我们遇到了这样的神奇代码：\n\n```html\n<div id=\"tab\" class=\"hello-world\ta\tb\tworld\"></div>\n```\n\n看上去和正常的代码没有太大区别，然而样式名称间的分隔符居然 **是TAB，不是空格！**\n\n那么使用空格作为分隔符检索的方式就失效了。不过我们可以在检索之前将内容格式化一下即可。将tab和多余的空格一起替换为空格即可。\n\n```js\nfunction hasClass(element, className) {\n  const replacedName = element.className.replace(/\\t*\\s+/g, ' ');\n  return (\" \" + replacedName + \" \" ).indexOf(\" \"+className+\" \") > -1;\n}\n```\n\n这样，无论是遇到tab键，还是-连接符问题都可以很好的解决了。好方法 **get√**\n\n## 优化正则匹配法\n\n另外，在查阅[YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)时，遇到了如下方法。\n\n```js\nfunction hasClass(element, className) {\n    return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n}\n```\n\n该方法也是基于样式左右的空格，使用正则进行匹配，同时考虑到了样式开头如果没有空格的问题。但是依旧没有考虑到 **TAB** 作为分隔符的问题，我们可以将格式化的字符串作为匹配内容，也可以直接将该情况添加到正则中即可。\n\n```js\nfunction hasClass(element, className) {\n  return new RegExp('(^| |\\\\t)' + className + '(\\\\t| |$)', 'gi').test(element.className);\n}\n```\n\n好啦，现在又有一个新方法**get√**\n\n现在，非常方便的方法我们已经拥有了2个，那么我们开始天马行空(~~不考虑性能~~)的部分吧。\n\n## 边界匹配法变种\n\n同样是利用了样式边界的思路。我们将className字符串进行分割，然后使用for循环，进行查找。\n\n```js\nfunction hasClass(element, className) {\n   const replacedName = element.className.replace(/\\t*\\s+/g, ' ');\n   const aClassName = replacedName.split(' ')\n   for (let i = 0; i < aClassName.length; i++) {\n     if (className === aClassName[i]) {\n       return true\n     }\n   }\n   return false\n}\n```\n\n至于为什么不用filter，includes等高阶函数，主要是为了照顾低版本浏览器，如果浏览器版本支持的话，还是用 **classList.contains** 吧。\n\n## 使用getElementsByClassName()法\n\n思路：根据className匹配元素数组，然后查找其中是否含有对应的元素。\n\n```js\nfunction hasClass(element, className) {\n  var aSameClassEle = document.getElementsByClassName(className);\n  for(var i=0; i < aSameClassEle.length; i++) {\n    if(aSameClassEle[i] === element) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n好了，这样在判断一个元素是否含有某个样式的时候，就有不同的方法可以用了。如果要做兼容性的话，只需要在前面加个判断if(element.classList)，在有classList方法的浏览器中使用classList.contains()方法，其他浏览器使用这些方法中的一个即可。\n\n## 参考资料\n\n[What is the best way to check if element has a class?](https://stackoverflow.com/questions/10960573/what-is-the-best-way-to-check-if-element-has-a-class)\n\n[YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)","source":"_posts/use-javascript-to-judge-whether-the-element-contains-a-certain-style.md","raw":"---\ntitle: 使用JavaScript判断元素中是否含有某个样式\ndate: 2018-03-28 20:18:26\ntags: [JavaScript]\n---\n![题图](https://cdn.thisjs.com/img/hero.png)\n\n看到这个题目，立马想到的就是 **element.classList.contains()** 和 **$(element).hasClass()** 方法。\n\n但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。\n\n<!--more-->\n\n![\bclassList的兼容性](https://cdn.thisjs.com/img/classlist-can-use.png)\n<p style=\"text-align: center;font-size: 10px;\"> <i>classList的兼容性</i> </p>\n\n假如我们\b有如下测试元素\n\n```html\n<div id=\"LL\" class=\"a b hello-world\"></div>\n```\n\n## 简单正则匹配法\n\n最开始我们找到的方法如下，即使用正则判断单词边界的方式判断是否存在className\n\n```js\n function hasClass(element, className) {\n  const regExp = new RegExp(\"\\\\b\"+className+\"\\\\b\", \"gi\");\n  return regExp.test(element.className);\n}\n```\n在样式的名字为hello-world之类的带有-连接符的情况，测试hello和world都会返回true，这并不满足我们的预期。\n\n## IndexOf方法\n\n同理，还有简单的使用 **indexOf()** 方法判断，也会导致这样的问题。\n\n```js\nfunction hasClass(element, className) {\n  return element.className.indexOf(className) > -1;\n}\n```\n这时候，不仅hello和world返回true，h/e/l/等单个字符都会返回true。\n\n我们改进一下该方法:\n\n```js\nfunction hasClass(element, className) {\n  return (\" \" + element.className + \" \" ).indexOf(\" \"+className+\" \") > -1;\n}\n```\n\n现在根据样式名称加\" \"的方式，判断一个元素是否含有该样式。在大部分的测试中，已经没有了问题。\n\n但是！！！我们遇到了这样的神奇代码：\n\n```html\n<div id=\"tab\" class=\"hello-world\ta\tb\tworld\"></div>\n```\n\n看上去和正常的代码没有太大区别，然而样式名称间的分隔符居然 **是TAB，不是空格！**\n\n那么使用空格作为分隔符检索的方式就失效了。不过我们可以在检索之前将内容格式化一下即可。将tab和多余的空格一起替换为空格即可。\n\n```js\nfunction hasClass(element, className) {\n  const replacedName = element.className.replace(/\\t*\\s+/g, ' ');\n  return (\" \" + replacedName + \" \" ).indexOf(\" \"+className+\" \") > -1;\n}\n```\n\n这样，无论是遇到tab键，还是-连接符问题都可以很好的解决了。好方法 **get√**\n\n## 优化正则匹配法\n\n另外，在查阅[YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)时，遇到了如下方法。\n\n```js\nfunction hasClass(element, className) {\n    return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n}\n```\n\n该方法也是基于样式左右的空格，使用正则进行匹配，同时考虑到了样式开头如果没有空格的问题。但是依旧没有考虑到 **TAB** 作为分隔符的问题，我们可以将格式化的字符串作为匹配内容，也可以直接将该情况添加到正则中即可。\n\n```js\nfunction hasClass(element, className) {\n  return new RegExp('(^| |\\\\t)' + className + '(\\\\t| |$)', 'gi').test(element.className);\n}\n```\n\n好啦，现在又有一个新方法**get√**\n\n现在，非常方便的方法我们已经拥有了2个，那么我们开始天马行空(~~不考虑性能~~)的部分吧。\n\n## 边界匹配法变种\n\n同样是利用了样式边界的思路。我们将className字符串进行分割，然后使用for循环，进行查找。\n\n```js\nfunction hasClass(element, className) {\n   const replacedName = element.className.replace(/\\t*\\s+/g, ' ');\n   const aClassName = replacedName.split(' ')\n   for (let i = 0; i < aClassName.length; i++) {\n     if (className === aClassName[i]) {\n       return true\n     }\n   }\n   return false\n}\n```\n\n至于为什么不用filter，includes等高阶函数，主要是为了照顾低版本浏览器，如果浏览器版本支持的话，还是用 **classList.contains** 吧。\n\n## 使用getElementsByClassName()法\n\n思路：根据className匹配元素数组，然后查找其中是否含有对应的元素。\n\n```js\nfunction hasClass(element, className) {\n  var aSameClassEle = document.getElementsByClassName(className);\n  for(var i=0; i < aSameClassEle.length; i++) {\n    if(aSameClassEle[i] === element) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n好了，这样在判断一个元素是否含有某个样式的时候，就有不同的方法可以用了。如果要做兼容性的话，只需要在前面加个判断if(element.classList)，在有classList方法的浏览器中使用classList.contains()方法，其他浏览器使用这些方法中的一个即可。\n\n## 参考资料\n\n[What is the best way to check if element has a class?](https://stackoverflow.com/questions/10960573/what-is-the-best-way-to-check-if-element-has-a-class)\n\n[YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)","slug":"use-javascript-to-judge-whether-the-element-contains-a-certain-style","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx500281h2ue5lhjc9w","content":"<p><img src=\"https://cdn.thisjs.com/img/hero.png\" alt=\"题图\"></p>\n<p>看到这个题目，立马想到的就是 <strong>element.classList.contains()</strong> 和 <strong>$(element).hasClass()</strong> 方法。</p>\n<p>但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://cdn.thisjs.com/img/classlist-can-use.png\" alt=\"\bclassList的兼容性\"></p>\n<p style=\"text-align: center;font-size: 10px;\"> <i>classList的兼容性</i> </p>\n\n<p>假如我们\b有如下测试元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"LL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a b hello-world\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"简单正则匹配法\"><a href=\"#简单正则匹配法\" class=\"headerlink\" title=\"简单正则匹配法\"></a>简单正则匹配法</h2><p>最开始我们找到的方法如下，即使用正则判断单词边界的方式判断是否存在className</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\b\"</span>+className+<span class=\"string\">\"\\\\b\"</span>, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> regExp.test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在样式的名字为hello-world之类的带有-连接符的情况，测试hello和world都会返回true，这并不满足我们的预期。</p>\n<h2 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h2><p>同理，还有简单的使用 <strong>indexOf()</strong> 方法判断，也会导致这样的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element.className.indexOf(className) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，不仅hello和world返回true，h/e/l/等单个字符都会返回true。</p>\n<p>我们改进一下该方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + element.className + <span class=\"string\">\" \"</span> ).indexOf(<span class=\"string\">\" \"</span>+className+<span class=\"string\">\" \"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在根据样式名称加” “的方式，判断一个元素是否含有该样式。在大部分的测试中，已经没有了问题。</p>\n<p>但是！！！我们遇到了这样的神奇代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello-world\ta\tb\tworld\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看上去和正常的代码没有太大区别，然而样式名称间的分隔符居然 <strong>是TAB，不是空格！</strong></p>\n<p>那么使用空格作为分隔符检索的方式就失效了。不过我们可以在检索之前将内容格式化一下即可。将tab和多余的空格一起替换为空格即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> replacedName = element.className.replace(<span class=\"regexp\">/\\t*\\s+/g</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + replacedName + <span class=\"string\">\" \"</span> ).indexOf(<span class=\"string\">\" \"</span>+className+<span class=\"string\">\" \"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，无论是遇到tab键，还是-连接符问题都可以很好的解决了。好方法 <strong>get√</strong></p>\n<h2 id=\"优化正则匹配法\"><a href=\"#优化正则匹配法\" class=\"headerlink\" title=\"优化正则匹配法\"></a>优化正则匹配法</h2><p>另外，在查阅<a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"noopener\">YOU MIGHT NOT NEED JQUERY</a>时，遇到了如下方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^| )'</span> + className + <span class=\"string\">'( |$)'</span>, <span class=\"string\">'gi'</span>).test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法也是基于样式左右的空格，使用正则进行匹配，同时考虑到了样式开头如果没有空格的问题。但是依旧没有考虑到 <strong>TAB</strong> 作为分隔符的问题，我们可以将格式化的字符串作为匹配内容，也可以直接将该情况添加到正则中即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^| |\\\\t)'</span> + className + <span class=\"string\">'(\\\\t| |$)'</span>, <span class=\"string\">'gi'</span>).test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好啦，现在又有一个新方法<strong>get√</strong></p>\n<p>现在，非常方便的方法我们已经拥有了2个，那么我们开始天马行空(<del>不考虑性能</del>)的部分吧。</p>\n<h2 id=\"边界匹配法变种\"><a href=\"#边界匹配法变种\" class=\"headerlink\" title=\"边界匹配法变种\"></a>边界匹配法变种</h2><p>同样是利用了样式边界的思路。我们将className字符串进行分割，然后使用for循环，进行查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> replacedName = element.className.replace(<span class=\"regexp\">/\\t*\\s+/g</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> aClassName = replacedName.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; aClassName.length; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (className === aClassName[i]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至于为什么不用filter，includes等高阶函数，主要是为了照顾低版本浏览器，如果浏览器版本支持的话，还是用 <strong>classList.contains</strong> 吧。</p>\n<h2 id=\"使用getElementsByClassName-法\"><a href=\"#使用getElementsByClassName-法\" class=\"headerlink\" title=\"使用getElementsByClassName()法\"></a>使用getElementsByClassName()法</h2><p>思路：根据className匹配元素数组，然后查找其中是否含有对应的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aSameClassEle = <span class=\"built_in\">document</span>.getElementsByClassName(className);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; aSameClassEle.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aSameClassEle[i] === element) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，这样在判断一个元素是否含有某个样式的时候，就有不同的方法可以用了。如果要做兼容性的话，只需要在前面加个判断if(element.classList)，在有classList方法的浏览器中使用classList.contains()方法，其他浏览器使用这些方法中的一个即可。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://stackoverflow.com/questions/10960573/what-is-the-best-way-to-check-if-element-has-a-class\" target=\"_blank\" rel=\"noopener\">What is the best way to check if element has a class?</a></p>\n<p><a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"noopener\">YOU MIGHT NOT NEED JQUERY</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/img/hero.png\" alt=\"题图\"></p>\n<p>看到这个题目，立马想到的就是 <strong>element.classList.contains()</strong> 和 <strong>$(element).hasClass()</strong> 方法。</p>\n<p>但是，在一些低版本浏览器中，classList无法使用，这个时候就可以自己实现类似jQuery的hasClass()函数。</p>","more":"<p><img src=\"https://cdn.thisjs.com/img/classlist-can-use.png\" alt=\"\bclassList的兼容性\"></p>\n<p style=\"text-align: center;font-size: 10px;\"> <i>classList的兼容性</i> </p>\n\n<p>假如我们\b有如下测试元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"LL\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a b hello-world\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"简单正则匹配法\"><a href=\"#简单正则匹配法\" class=\"headerlink\" title=\"简单正则匹配法\"></a>简单正则匹配法</h2><p>最开始我们找到的方法如下，即使用正则判断单词边界的方式判断是否存在className</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\b\"</span>+className+<span class=\"string\">\"\\\\b\"</span>, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> regExp.test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在样式的名字为hello-world之类的带有-连接符的情况，测试hello和world都会返回true，这并不满足我们的预期。</p>\n<h2 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h2><p>同理，还有简单的使用 <strong>indexOf()</strong> 方法判断，也会导致这样的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element.className.indexOf(className) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，不仅hello和world返回true，h/e/l/等单个字符都会返回true。</p>\n<p>我们改进一下该方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + element.className + <span class=\"string\">\" \"</span> ).indexOf(<span class=\"string\">\" \"</span>+className+<span class=\"string\">\" \"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在根据样式名称加” “的方式，判断一个元素是否含有该样式。在大部分的测试中，已经没有了问题。</p>\n<p>但是！！！我们遇到了这样的神奇代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello-world\ta\tb\tworld\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看上去和正常的代码没有太大区别，然而样式名称间的分隔符居然 <strong>是TAB，不是空格！</strong></p>\n<p>那么使用空格作为分隔符检索的方式就失效了。不过我们可以在检索之前将内容格式化一下即可。将tab和多余的空格一起替换为空格即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> replacedName = element.className.replace(<span class=\"regexp\">/\\t*\\s+/g</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + replacedName + <span class=\"string\">\" \"</span> ).indexOf(<span class=\"string\">\" \"</span>+className+<span class=\"string\">\" \"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，无论是遇到tab键，还是-连接符问题都可以很好的解决了。好方法 <strong>get√</strong></p>\n<h2 id=\"优化正则匹配法\"><a href=\"#优化正则匹配法\" class=\"headerlink\" title=\"优化正则匹配法\"></a>优化正则匹配法</h2><p>另外，在查阅<a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"noopener\">YOU MIGHT NOT NEED JQUERY</a>时，遇到了如下方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^| )'</span> + className + <span class=\"string\">'( |$)'</span>, <span class=\"string\">'gi'</span>).test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法也是基于样式左右的空格，使用正则进行匹配，同时考虑到了样式开头如果没有空格的问题。但是依旧没有考虑到 <strong>TAB</strong> 作为分隔符的问题，我们可以将格式化的字符串作为匹配内容，也可以直接将该情况添加到正则中即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^| |\\\\t)'</span> + className + <span class=\"string\">'(\\\\t| |$)'</span>, <span class=\"string\">'gi'</span>).test(element.className);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好啦，现在又有一个新方法<strong>get√</strong></p>\n<p>现在，非常方便的方法我们已经拥有了2个，那么我们开始天马行空(<del>不考虑性能</del>)的部分吧。</p>\n<h2 id=\"边界匹配法变种\"><a href=\"#边界匹配法变种\" class=\"headerlink\" title=\"边界匹配法变种\"></a>边界匹配法变种</h2><p>同样是利用了样式边界的思路。我们将className字符串进行分割，然后使用for循环，进行查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> replacedName = element.className.replace(<span class=\"regexp\">/\\t*\\s+/g</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> aClassName = replacedName.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; aClassName.length; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (className === aClassName[i]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至于为什么不用filter，includes等高阶函数，主要是为了照顾低版本浏览器，如果浏览器版本支持的话，还是用 <strong>classList.contains</strong> 吧。</p>\n<h2 id=\"使用getElementsByClassName-法\"><a href=\"#使用getElementsByClassName-法\" class=\"headerlink\" title=\"使用getElementsByClassName()法\"></a>使用getElementsByClassName()法</h2><p>思路：根据className匹配元素数组，然后查找其中是否含有对应的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">element, className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aSameClassEle = <span class=\"built_in\">document</span>.getElementsByClassName(className);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; aSameClassEle.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aSameClassEle[i] === element) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，这样在判断一个元素是否含有某个样式的时候，就有不同的方法可以用了。如果要做兼容性的话，只需要在前面加个判断if(element.classList)，在有classList方法的浏览器中使用classList.contains()方法，其他浏览器使用这些方法中的一个即可。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://stackoverflow.com/questions/10960573/what-is-the-best-way-to-check-if-element-has-a-class\" target=\"_blank\" rel=\"noopener\">What is the best way to check if element has a class?</a></p>\n<p><a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"noopener\">YOU MIGHT NOT NEED JQUERY</a></p>"},{"title":"使用cmd解决端口被占用的情况","date":"2013-07-21T16:28:26.000Z","_content":"* 开始 -> 运行 -> cmd\n* 查找端口的PID： `netstat -a -o`\n* 强行关闭： ntsd -c q -p PID(查询出来的PID号码)\n或者进入任务管理器 -> 查看 -> 选择列 -> 将PID选中 -> 进程(找到查询到的PID) -> 结束进程\n\n<!--more-->\n\nCTRL+C可让运行中的cmd命令停止。\n \n这个命令可以加一些参数：  \n\n```\n-n 显示IP地址和端口的数目。  \n-S 显示每个协议的连接状态。  \n-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  \n-e 显示太网的连接状态。最好与-s合用。  \n-P PROTO 显示特定的协议连接状态。  \n```","source":"_posts/use-of-cmd-solve-port-being-used.md","raw":"---\ntitle: 使用cmd解决端口被占用的情况\ndate: 2013-07-21 16:28:26\ntags: [操作系统]\n---\n* 开始 -> 运行 -> cmd\n* 查找端口的PID： `netstat -a -o`\n* 强行关闭： ntsd -c q -p PID(查询出来的PID号码)\n或者进入任务管理器 -> 查看 -> 选择列 -> 将PID选中 -> 进程(找到查询到的PID) -> 结束进程\n\n<!--more-->\n\nCTRL+C可让运行中的cmd命令停止。\n \n这个命令可以加一些参数：  \n\n```\n-n 显示IP地址和端口的数目。  \n-S 显示每个协议的连接状态。  \n-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  \n-e 显示太网的连接状态。最好与-s合用。  \n-P PROTO 显示特定的协议连接状态。  \n```","slug":"use-of-cmd-solve-port-being-used","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx7002b1h2uhx8os212","content":"<ul>\n<li>开始 -&gt; 运行 -&gt; cmd</li>\n<li>查找端口的PID： <code>netstat -a -o</code></li>\n<li>强行关闭： ntsd -c q -p PID(查询出来的PID号码)<br>或者进入任务管理器 -&gt; 查看 -&gt; 选择列 -&gt; 将PID选中 -&gt; 进程(找到查询到的PID) -&gt; 结束进程</li>\n</ul>\n<a id=\"more\"></a>\n<p>CTRL+C可让运行中的cmd命令停止。</p>\n<p>这个命令可以加一些参数：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n 显示IP地址和端口的数目。  </span><br><span class=\"line\">-S 显示每个协议的连接状态。  </span><br><span class=\"line\">-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  </span><br><span class=\"line\">-e 显示太网的连接状态。最好与-s合用。  </span><br><span class=\"line\">-P PROTO 显示特定的协议连接状态。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<ul>\n<li>开始 -&gt; 运行 -&gt; cmd</li>\n<li>查找端口的PID： <code>netstat -a -o</code></li>\n<li>强行关闭： ntsd -c q -p PID(查询出来的PID号码)<br>或者进入任务管理器 -&gt; 查看 -&gt; 选择列 -&gt; 将PID选中 -&gt; 进程(找到查询到的PID) -&gt; 结束进程</li>\n</ul>","more":"<p>CTRL+C可让运行中的cmd命令停止。</p>\n<p>这个命令可以加一些参数：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n 显示IP地址和端口的数目。  </span><br><span class=\"line\">-S 显示每个协议的连接状态。  </span><br><span class=\"line\">-a 显示所有的连接和监听端口。（服务所有连接通常不显示的）  </span><br><span class=\"line\">-e 显示太网的连接状态。最好与-s合用。  </span><br><span class=\"line\">-P PROTO 显示特定的协议连接状态。</span><br></pre></td></tr></table></figure>"},{"title":"使用-prefix-free解决CSS前缀的问题","date":"2014-07-08T20:14:50.000Z","_content":"在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。\n\n在开发中，可以使用**Can I use**等类型的编辑器插件来帮助开发者进行判断\n\n<!--more-->\n\n同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。\n\n原本的写代码方式\n```css\n-webkit-transform: rotate(45deg);\n\n-o-transform: rotate(45deg);\n\n-moz-transform: rotate(45deg);\n\n-ms-transform: rotate(45deg);\n```\n现在不需要考虑浏览器的前缀问题，直接可以使用\n```css\ntransform: rotate(45deg);\n```\n\n这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。\n\n[官方地址](http://leaverou.github.io/prefixfree/)","source":"_posts/use-prefix-free-solve-the-problem-of-css-prefix.md","raw":"---\ntitle: 使用-prefix-free解决CSS前缀的问题\ndate: 2014-07-08 20:14:50\ntags: javascript\n---\n在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。\n\n在开发中，可以使用**Can I use**等类型的编辑器插件来帮助开发者进行判断\n\n<!--more-->\n\n同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。\n\n原本的写代码方式\n```css\n-webkit-transform: rotate(45deg);\n\n-o-transform: rotate(45deg);\n\n-moz-transform: rotate(45deg);\n\n-ms-transform: rotate(45deg);\n```\n现在不需要考虑浏览器的前缀问题，直接可以使用\n```css\ntransform: rotate(45deg);\n```\n\n这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。\n\n[官方地址](http://leaverou.github.io/prefixfree/)","slug":"use-prefix-free-solve-the-problem-of-css-prefix","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx8002d1h2uvingci6e","content":"<p>在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。</p>\n<p>在开发中，可以使用<strong>Can I use</strong>等类型的编辑器插件来帮助开发者进行判断</p>\n<a id=\"more\"></a>\n<p>同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。</p>\n<p>原本的写代码方式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-o-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-ms-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure></p>\n<p>现在不需要考虑浏览器的前缀问题，直接可以使用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。</p>\n<p><a href=\"http://leaverou.github.io/prefixfree/\" target=\"_blank\" rel=\"noopener\">官方地址</a></p>\n","site":{"data":{}},"excerpt":"<p>在网页开发的过程中，会遇到有些低版本浏览器在CSS3样式前面要加入浏览器的标识。</p>\n<p>在开发中，可以使用<strong>Can I use</strong>等类型的编辑器插件来帮助开发者进行判断</p>","more":"<p>同时，也可以直接使用-prefix-free这款小插件来帮助我们解决浏览器前缀的问题。</p>\n<p>原本的写代码方式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-o-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-ms-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure></p>\n<p>现在不需要考虑浏览器的前缀问题，直接可以使用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样就省去了很多开发遇到的小兼容性问题，专心来制作网页效果，让开发者更专注于效果本身。</p>\n<p><a href=\"http://leaverou.github.io/prefixfree/\" target=\"_blank\" rel=\"noopener\">官方地址</a></p>"},{"title":"使用lazyload优化网页图片的加载","date":"2014-07-03T11:48:07.000Z","_content":"\n在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如\n> * 网页加载速度变慢\n\n> * 消耗用户的大量流量\n\n因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。\n\n这时候，这款基于jQuery的小插件**lazyload**就派上了用场。\n\n<!--more-->\n\n基本设计思路是：\n\n* 拥有一个统一的图片占位符，加快加载的时间\n* 当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。\n\n这样就实现了延时加载的效果\n\n基本使用方法\n\n> * 首先将js文件引入\n\n> * 在需要使用的标签加载插件\n\n```html\n<script type=\"text/javascript\"> \n$(function() { \n$(\"img\").lazyload({ \neffect : \"fadeIn\" \n}); \n}); \n</script> \n```\n\n**API**\n\n```js\n\tplaceholder : \"img/grey.gif\", //用图片提前占位\n    // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏\n  effect: \"fadeIn\", // 载入使用何种效果\n    // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn\n  threshold: 200, // 提前开始加载\n    // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉\n  event: 'click',  // 事件触发时才加载\n    // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…\n  container: $(\"#container\"),  // 对某容器中的图片实现效果\n    // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片\n  failurelimit : 10 // 图片排序混乱时\n     // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.\n```","source":"_posts/use-the-lazyload-optimizing-web-images-load.md","raw":"---\ntitle: 使用lazyload优化网页图片的加载\ndate: 2014-07-03 11:48:07\ntags: [javascript,jquery,lazyload]\n---\n\n在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如\n> * 网页加载速度变慢\n\n> * 消耗用户的大量流量\n\n因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。\n\n这时候，这款基于jQuery的小插件**lazyload**就派上了用场。\n\n<!--more-->\n\n基本设计思路是：\n\n* 拥有一个统一的图片占位符，加快加载的时间\n* 当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。\n\n这样就实现了延时加载的效果\n\n基本使用方法\n\n> * 首先将js文件引入\n\n> * 在需要使用的标签加载插件\n\n```html\n<script type=\"text/javascript\"> \n$(function() { \n$(\"img\").lazyload({ \neffect : \"fadeIn\" \n}); \n}); \n</script> \n```\n\n**API**\n\n```js\n\tplaceholder : \"img/grey.gif\", //用图片提前占位\n    // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏\n  effect: \"fadeIn\", // 载入使用何种效果\n    // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn\n  threshold: 200, // 提前开始加载\n    // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉\n  event: 'click',  // 事件触发时才加载\n    // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…\n  container: $(\"#container\"),  // 对某容器中的图片实现效果\n    // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片\n  failurelimit : 10 // 图片排序混乱时\n     // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.\n```","slug":"use-the-lazyload-optimizing-web-images-load","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbx9002g1h2uu0bxef32","content":"<p>在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如</p>\n<blockquote>\n<ul>\n<li>网页加载速度变慢</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>消耗用户的大量流量</li>\n</ul>\n</blockquote>\n<p>因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。</p>\n<p>这时候，这款基于jQuery的小插件<strong>lazyload</strong>就派上了用场。</p>\n<a id=\"more\"></a>\n<p>基本设计思路是：</p>\n<ul>\n<li>拥有一个统一的图片占位符，加快加载的时间</li>\n<li>当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。</li>\n</ul>\n<p>这样就实现了延时加载的效果</p>\n<p>基本使用方法</p>\n<blockquote>\n<ul>\n<li>首先将js文件引入</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在需要使用的标签加载插件</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">\"img\"</span>).lazyload(&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">effect : <span class=\"string\">\"fadeIn\"</span> </span></span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">placeholder : <span class=\"string\">\"img/grey.gif\"</span>, <span class=\"comment\">//用图片提前占位</span></span><br><span class=\"line\">   <span class=\"comment\">// placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏</span></span><br><span class=\"line\"> effect: <span class=\"string\">\"fadeIn\"</span>, <span class=\"comment\">// 载入使用何种效果</span></span><br><span class=\"line\">   <span class=\"comment\">// effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn</span></span><br><span class=\"line\"> threshold: <span class=\"number\">200</span>, <span class=\"comment\">// 提前开始加载</span></span><br><span class=\"line\">   <span class=\"comment\">// threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉</span></span><br><span class=\"line\"> event: <span class=\"string\">'click'</span>,  <span class=\"comment\">// 事件触发时才加载</span></span><br><span class=\"line\">   <span class=\"comment\">// event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…</span></span><br><span class=\"line\"> container: $(<span class=\"string\">\"#container\"</span>),  <span class=\"comment\">// 对某容器中的图片实现效果</span></span><br><span class=\"line\">   <span class=\"comment\">// container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片</span></span><br><span class=\"line\"> failurelimit : <span class=\"number\">10</span> <span class=\"comment\">// 图片排序混乱时</span></span><br><span class=\"line\">    <span class=\"comment\">// failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在遇到单页面中有大量的图片的时候，会产生一系列的问题，比如</p>\n<blockquote>\n<ul>\n<li>网页加载速度变慢</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>消耗用户的大量流量</li>\n</ul>\n</blockquote>\n<p>因为用户有时候并不会浏览完全部的内容，但是一次性的加载，会导致用户体验的下降。</p>\n<p>这时候，这款基于jQuery的小插件<strong>lazyload</strong>就派上了用场。</p>","more":"<p>基本设计思路是：</p>\n<ul>\n<li>拥有一个统一的图片占位符，加快加载的时间</li>\n<li>当滚动高度到达图片的上面，或者到达图片高度的时候，将data-数据（储存着真实地址）的数据加载到src属性中。</li>\n</ul>\n<p>这样就实现了延时加载的效果</p>\n<p>基本使用方法</p>\n<blockquote>\n<ul>\n<li>首先将js文件引入</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在需要使用的标签加载插件</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">\"img\"</span>).lazyload(&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">effect : <span class=\"string\">\"fadeIn\"</span> </span></span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>API</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">placeholder : <span class=\"string\">\"img/grey.gif\"</span>, <span class=\"comment\">//用图片提前占位</span></span><br><span class=\"line\">   <span class=\"comment\">// placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏</span></span><br><span class=\"line\"> effect: <span class=\"string\">\"fadeIn\"</span>, <span class=\"comment\">// 载入使用何种效果</span></span><br><span class=\"line\">   <span class=\"comment\">// effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn</span></span><br><span class=\"line\"> threshold: <span class=\"number\">200</span>, <span class=\"comment\">// 提前开始加载</span></span><br><span class=\"line\">   <span class=\"comment\">// threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉</span></span><br><span class=\"line\"> event: <span class=\"string\">'click'</span>,  <span class=\"comment\">// 事件触发时才加载</span></span><br><span class=\"line\">   <span class=\"comment\">// event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…</span></span><br><span class=\"line\"> container: $(<span class=\"string\">\"#container\"</span>),  <span class=\"comment\">// 对某容器中的图片实现效果</span></span><br><span class=\"line\">   <span class=\"comment\">// container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片</span></span><br><span class=\"line\"> failurelimit : <span class=\"number\">10</span> <span class=\"comment\">// 图片排序混乱时</span></span><br><span class=\"line\">    <span class=\"comment\">// failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</span></span><br></pre></td></tr></table></figure>"},{"title":"使用字符串的split方法，对数组进行去重","date":"2016-07-04T22:48:13.000Z","_content":"在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。\n\n我在想这个问题的时候，参考了字符串的统计字符出现次数的思路\n\n`times = testString.split('char').length-1`\n\n<!-- more -->\n\n每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。\n\n```js\nfunction unique(arr) {\n  var newArr = [];\n  while (arr.length > 0) {\n    newArr.push(arr[0]);\n    arr = arr.join(\"\").split(newArr[newArr.length-1]).join(\"\").split(\"\");\n  }\n  return newArr;\n}\n```\n\n对生成的数组再次进行`.join(\"\").split(\"\")`操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。\n\n---\n\n同时还有其他的三种思路在下面作为参考\n\n1 . 第一种是比较常规的方法\n\n思路：\n\n* 构建一个新的数组存放结果\n* for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比\n* 若结果数组中没有该元素，则存到结果数组中\n\n```js\nArray.prototype.unique1 = function(){\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  var repeat = false;\n  for(var j = 0; j < res.length; j++){\n   if(this[i] == res[j]){\n    repeat = true;\n    break;\n   }\n  }\n  if(!repeat){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique1());\n```\n2 . 第二种方法比上面的方法效率要高\n思路：\n* 先将原数组进行排序\n* 检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置\n* 如果不相同，则将该元素存入结果数组中\n\n```js\nArray.prototype.unique2 = function(){\n this.sort(); //先排序\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  if(this[i] !== res[res.length - 1]){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique2());\n```\n> 第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。\n\n3 . **第三种方法（推荐使用）**\n思路：\n* 创建一个新的数组存放结果\n* 创建一个空对象\n* for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。\n说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。\n\n```js\nArray.prototype.unique3 = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\nalert(arr.unique3());\n```\n","source":"_posts/use-the-string-of-the-split-method-of-array-to-heavy.md","raw":"---\ntitle: 使用字符串的split方法，对数组进行去重\ndate: 2016-07-04 22:48:13\ntags: [javascript]\n---\n在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。\n\n我在想这个问题的时候，参考了字符串的统计字符出现次数的思路\n\n`times = testString.split('char').length-1`\n\n<!-- more -->\n\n每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。\n\n```js\nfunction unique(arr) {\n  var newArr = [];\n  while (arr.length > 0) {\n    newArr.push(arr[0]);\n    arr = arr.join(\"\").split(newArr[newArr.length-1]).join(\"\").split(\"\");\n  }\n  return newArr;\n}\n```\n\n对生成的数组再次进行`.join(\"\").split(\"\")`操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。\n\n---\n\n同时还有其他的三种思路在下面作为参考\n\n1 . 第一种是比较常规的方法\n\n思路：\n\n* 构建一个新的数组存放结果\n* for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比\n* 若结果数组中没有该元素，则存到结果数组中\n\n```js\nArray.prototype.unique1 = function(){\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  var repeat = false;\n  for(var j = 0; j < res.length; j++){\n   if(this[i] == res[j]){\n    repeat = true;\n    break;\n   }\n  }\n  if(!repeat){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique1());\n```\n2 . 第二种方法比上面的方法效率要高\n思路：\n* 先将原数组进行排序\n* 检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置\n* 如果不相同，则将该元素存入结果数组中\n\n```js\nArray.prototype.unique2 = function(){\n this.sort(); //先排序\n var res = [this[0]];\n for(var i = 1; i < this.length; i++){\n  if(this[i] !== res[res.length - 1]){\n   res.push(this[i]);\n  }\n }\n return res;\n}\nvar arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]\nalert(arr.unique2());\n```\n> 第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。\n\n3 . **第三种方法（推荐使用）**\n思路：\n* 创建一个新的数组存放结果\n* 创建一个空对象\n* for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。\n说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。\n\n```js\nArray.prototype.unique3 = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\nalert(arr.unique3());\n```\n","slug":"use-the-string-of-the-split-method-of-array-to-heavy","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbxb002i1h2u2ylxwpjn","content":"<p>在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。</p>\n<p>我在想这个问题的时候，参考了字符串的统计字符出现次数的思路</p>\n<p><code>times = testString.split(&#39;char&#39;).length-1</code></p>\n<a id=\"more\"></a>\n<p>每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    newArr.push(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    arr = arr.join(<span class=\"string\">\"\"</span>).split(newArr[newArr.length<span class=\"number\">-1</span>]).join(<span class=\"string\">\"\"</span>).split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对生成的数组再次进行<code>.join(&quot;&quot;).split(&quot;&quot;)</code>操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。</p>\n<hr>\n<p>同时还有其他的三种思路在下面作为参考</p>\n<p>1 . 第一种是比较常规的方法</p>\n<p>思路：</p>\n<ul>\n<li>构建一个新的数组存放结果</li>\n<li>for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li>\n<li>若结果数组中没有该元素，则存到结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> repeat = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; res.length; j++)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == res[j])&#123;</span><br><span class=\"line\">    repeat = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!repeat)&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">alert(arr.unique1());</span><br></pre></td></tr></table></figure>\n<p>2 . 第二种方法比上面的方法效率要高<br>思路：</p>\n<ul>\n<li>先将原数组进行排序</li>\n<li>检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置</li>\n<li>如果不相同，则将该元素存入结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.sort(); <span class=\"comment\">//先排序</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] !== res[res.length - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">alert(arr.unique2());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>\n</blockquote>\n<p>3 . <strong>第三种方法（推荐使用）</strong><br>思路：</p>\n<ul>\n<li>创建一个新的数组存放结果</li>\n<li>创建一个空对象</li>\n<li>for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。<br>说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</span><br><span class=\"line\">alert(arr.unique3());</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在解决数组的去重问题的时候，一般可以使用循环，将元素进行对比，如果不重复，那么就将元素存入到数组中去。</p>\n<p>我在想这个问题的时候，参考了字符串的统计字符出现次数的思路</p>\n<p><code>times = testString.split(&#39;char&#39;).length-1</code></p>","more":"<p>每次去数组的第一个字符，作为分割的字符，将字符从字符串中删除掉，以此循环，直到最后一组相同的字符被删除。就可以得到一个不重复的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    newArr.push(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    arr = arr.join(<span class=\"string\">\"\"</span>).split(newArr[newArr.length<span class=\"number\">-1</span>]).join(<span class=\"string\">\"\"</span>).split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对生成的数组再次进行<code>.join(&quot;&quot;).split(&quot;&quot;)</code>操作的原因是，分割的字符串可能会出现空字符存在于数组的情况，用这种方法删除多余的空字符。</p>\n<hr>\n<p>同时还有其他的三种思路在下面作为参考</p>\n<p>1 . 第一种是比较常规的方法</p>\n<p>思路：</p>\n<ul>\n<li>构建一个新的数组存放结果</li>\n<li>for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li>\n<li>若结果数组中没有该元素，则存到结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> repeat = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; res.length; j++)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == res[j])&#123;</span><br><span class=\"line\">    repeat = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!repeat)&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">alert(arr.unique1());</span><br></pre></td></tr></table></figure>\n<p>2 . 第二种方法比上面的方法效率要高<br>思路：</p>\n<ul>\n<li>先将原数组进行排序</li>\n<li>检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置</li>\n<li>如果不相同，则将该元素存入结果数组中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.sort(); <span class=\"comment\">//先排序</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] !== res[res.length - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'e'</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">alert(arr.unique2());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>\n</blockquote>\n<p>3 . <strong>第三种方法（推荐使用）</strong><br>思路：</p>\n<ul>\n<li>创建一个新的数组存放结果</li>\n<li>创建一个空对象</li>\n<li>for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。<br>说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</span><br><span class=\"line\">alert(arr.unique3());</span><br></pre></td></tr></table></figure>"},{"title":"使用jQuery的promise模式解决延迟数据处理问题","date":"2016-10-26T10:34:59.000Z","_content":"\n在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后\n再将处理后的数据进行返回\n\n{% plantuml %}\n    title 请求过程\n\n    == 调用方法 ==\n\n    fn1 -> fn2: 调用方法\n\n    == 数据请求 ==\n\n    fn2 -> 服务器: 请求数据\n\n    ... 异步请求 ...\n    服务器 --> fn2: 数据返回\n\n    fn2 -> fn2: 数据处理\n\n    == 返回数据 ==\n\n    fn2 -> fn1: 返回处理数据\n\n{% endplantuml %}\n\n<!--more-->\n如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，\n就返回了一个值null，这样自然不是我们想要的结果\n\n因此可以使用promise模式解决这个问题\n\n**获取数据并处理的方法**\n```js\n    function fun2(){\n        var deferred = $.Deferred();\n        $.get(\"url\", function (data) {\n            // 处理1\n        }).done(function (data) {\n             deferred.resolve(data);\n        })\n        return deferred.promise();\n    }\n\n```\n\n**调用的方法**\n\n```js\n    function fn1(){\n        $.when(fn2())\n        .done(function (data) {\n           //获取到处理后的data值\n        })\n    }\n```\n\n> 参考文档\n> \n> http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\n\n> http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\n\n","source":"_posts/using-j-querys-promise-to-solve-delay-data-processing-model.md","raw":"---\ntitle: 使用jQuery的promise模式解决延迟数据处理问题\ndate: 2016-10-26 10:34:59\ntags: [jQuery,promise]\n---\n\n在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后\n再将处理后的数据进行返回\n\n{% plantuml %}\n    title 请求过程\n\n    == 调用方法 ==\n\n    fn1 -> fn2: 调用方法\n\n    == 数据请求 ==\n\n    fn2 -> 服务器: 请求数据\n\n    ... 异步请求 ...\n    服务器 --> fn2: 数据返回\n\n    fn2 -> fn2: 数据处理\n\n    == 返回数据 ==\n\n    fn2 -> fn1: 返回处理数据\n\n{% endplantuml %}\n\n<!--more-->\n如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，\n就返回了一个值null，这样自然不是我们想要的结果\n\n因此可以使用promise模式解决这个问题\n\n**获取数据并处理的方法**\n```js\n    function fun2(){\n        var deferred = $.Deferred();\n        $.get(\"url\", function (data) {\n            // 处理1\n        }).done(function (data) {\n             deferred.resolve(data);\n        })\n        return deferred.promise();\n    }\n\n```\n\n**调用的方法**\n\n```js\n    function fn1(){\n        $.when(fn2())\n        .done(function (data) {\n           //获取到处理后的data值\n        })\n    }\n```\n\n> 参考文档\n> \n> http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\n\n> http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\n\n","slug":"using-j-querys-promise-to-solve-delay-data-processing-model","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbxc002k1h2ucsq0r32i","content":"<p>在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后<br>再将处理后的数据进行返回</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJI_sjpzVqSt5PMkhy693y_CfAvvDs_biyrG5MrikhhGyGmLTEuMqF2Ch54cmwcTJDpphNGSn1AhQ2AJwsPpUfrqBdyvSOGMr0QAGYqjFJq_XwPwcPskNGZK11RZWgXLqOJP13Tu_vUdiUN1JaMIUBcbvFg4DucAm8eWmiXk03hU2Ia9KGzq00000\">\n<a id=\"more\"></a>\n<p>如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，<br>就返回了一个值null，这样自然不是我们想要的结果</p>\n<p>因此可以使用promise模式解决这个问题</p>\n<p><strong>获取数据并处理的方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deferred = $.Deferred();</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(\"url\", function (data) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理1</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">         deferred.resolve(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deferred.promise();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>调用的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.when(fn2())</span><br><span class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//获取到处理后的data值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文档</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/jquery-deferred.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在使用jQuery进行开发的时候，有时候会遇到在某个方法里，需要通过$.ajax方法获取数据，在对数据处理完之后<br>再将处理后的数据进行返回</p>\n<img src=\"http://www.plantuml.com/plantuml/svg/AyaioKbLUB5--xEDJI_sjpzVqSt5PMkhy693y_CfAvvDs_biyrG5MrikhhGyGmLTEuMqF2Ch54cmwcTJDpphNGSn1AhQ2AJwsPpUfrqBdyvSOGMr0QAGYqjFJq_XwPwcPskNGZK11RZWgXLqOJP13Tu_vUdiUN1JaMIUBcbvFg4DucAm8eWmiXk03hU2Ia9KGzq00000\">","more":"<p>如果使用普通的方式进行数据返回，在还没有获取到服务器数据的时候，<br>就返回了一个值null，这样自然不是我们想要的结果</p>\n<p>因此可以使用promise模式解决这个问题</p>\n<p><strong>获取数据并处理的方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deferred = $.Deferred();</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(\"url\", function (data) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理1</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">         deferred.resolve(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deferred.promise();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>调用的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.when(fn2())</span><br><span class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//获取到处理后的data值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文档</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/lvdabao/p/jquery-deferred.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/jquery-deferred.html</a></p>\n</blockquote>"},{"title":"使用MiTM的方式进行无线抓包调试","date":"2018-04-07T22:03:51.000Z","_content":"\n[![](https://cdn.thisjs.com/img/20180405173639.png)](https://cdn.thisjs.com/img/20180405173639.png)\n\n## 背景介绍\n\n在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。\n\n*   在Windows平台上，常用的软件是 [<u>Fiddler</u>](https://www.telerik.com/fiddler)\n*   而在OS X系统中，要使用的软件则是 [<u>Wireshark</u>](https://www.wireshark.org/)\n*   在Android平台上，使用的则是 [<u>Packet Capture</u>](https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture)\n\n本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。\n<!--more-->\n\n比如在Windows上调试手机设备，我们可以在Fiddler中开启**允许其他设备远程连接**，然后在手机设备中设置VPN为电脑IP，这样手机的数据会通过电脑进行请求，这样我们就可以在Fiddler中抓取手机中的数据包了。\n\n这项操作其实还可以简化，那就是不需要手机进行任何设置，我们就可以直接直接获取手机上的数据包。这时候，我们就可以使用神奇的 **Ettercap** 了，该软件可以实现一个中间人攻击的思路，进行抓包分析。\n\n![](https://cdn.thisjs.com/img/mitmblogeng-1.png)\n\n> 中间人攻击是指**攻击**者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制\n\n基于此，我们便不需要通过手机端的设置或者允许，我们在这个环节中，扮演攻击者，就可以快速的开始对其抓包分析了。\n\n以下介绍在os X系统中进行中间人攻击抓包的方式。\n\n## 安装工具包\n\n我们需要的几个工具如下：\n\n*   nmap (_端口扫描器_)\n*   ettercap (_中间人攻击工具_)\n*   Wireshark (_包分析工具_)\n使用Homebrew安装这几个包非常方便。\n```\n$ brew install nmap\n```\n```\n$ brew install ettercap\n```\n\n在安装Ettercap的时候可以选择带GUI界面的，只需要在后面追加`--with-gtk+` 参数即可。\n\n```\n$ brew install wireshark --with-qt\n```\n\n##  具体操作\n\n### 1. 查看局域网IP信息\n\n首先，**电脑要与手机在同一个局域网中**。接下来，通过IP查看局域网使用的网段。在终端中，使用以下其中一个命令，查看IP地址。\n\n```\nipconfig getifaddr en0 # 使用无线网连接\nipconfig getifaddr en1 # 使用以太网连接\nipconfig getifaddr en3 # 使用其他适配器连接\n```\n\n### 2. 扫描同一局域网中的网络使用情况。\n\n接下来我们使用namp查看同一网段下，有哪些设备在连接。会得到类似以下结果。\n\n```\n$ nmap -sP  192.168.199.0/24\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2018-04-05 18:10 CST\nNmap scan report for Hiwifi.lan (192.168.199.1)\nHost is up (0.0030s latency).\nNmap scan report for android-5ea1fea3b816a66.lan (192.168.199.153)\nHost is up (0.031s latency).\nNmap scan report for zMBP.lan (192.168.199.169)\nHost is up (0.0021s latency).\nNmap scan report for RedmiNote4X-hongmish.lan (192.168.199.198)\nHost is up (0.035s latency).\nNmap scan report for iPad.lan (192.168.199.202)\nHost is up (0.037s latency).\nNmap scan report for iPhone-7.lan (192.168.199.234)\nHost is up (0.0068s latency).\nNmap done: 256 IP addresses (6 hosts up) scanned in 3.07 seconds\n\n```\n<del>当然，如果你通过手机的链接信息中，直接获取到手机IP的话，该步骤可以省略。</del>\n\n可以看到这里有多个设备在连接，而我本次需要测试的是`android…….lan (192.168.199.153)` 这一个IP。\n\n### 3. 开始Ettercap\n\n这里使用curses图形化界面启动，参数为`-C`，如果使用GUI界面的话，参数为`-G`\n\n```\nsudo ettercap -C\n```\n[![](https://cdn.thisjs.com/img/etttercap-index.png)](https://cdn.thisjs.com/img/etttercap-index.png)\n\n进入该界面后，依次选择`Sniff` -&gt; `Unified sniffing...U` -&gt; 输入网络类型值(_参考上面查询IP的参数，默认en0_) -&gt; `Hosts` -&gt; `Scan for hosts` -&gt; `Hosts list`\n\n[![](https://cdn.thisjs.com/img/ettercap-hosts-list.png)](https://cdn.thisjs.com/img/ettercap-hosts-list.png)\n\n这里可以看到扫描出来的同网段IP，在编写该文章的时候，有些其他设备已经离线了，因此本列表中扫描到的与使用namp扫描出来数量不同。但是如果记住了对应设备的IP，依旧可以使用。\n\n这里，`192.168.199.1` 为网关，本次中间人攻击就是要实现欺骗设备 `192.168.199.153` 与网关 `192.168.199.1`之间的通讯。\n\n接下来，需要将这两个IP分别加入嗅探的目标中，依次进入`Targets` -&gt; `Select TARGET(s) ` -&gt; 在TARGET1中输入/`192.168.199.153//`  TARGET1中输入/`192.168.199.1//`\n\n**备注：这里的Target格式为 `MAC/IPs/PORTs/`**\n\n这时，查看Current targets可以看到当前的目标列表。\n\n[![](https://cdn.thisjs.com/img/ettercap-current-targets.png)](https://cdn.thisjs.com/img/ettercap-current-targets.png)\n\n执行`MiTM` -&gt; `ARP poisoning...` -&gt; Parameters为空即可\n\n这时，已经通过ARP欺骗的方式，成功开始了中间人攻击。可以通过`View` -&gt; `Statistics`查看该设备的数据情况。\n\n[![](https://cdn.thisjs.com/img/ettercap-statistics-view.png)](https://cdn.thisjs.com/img/ettercap-statistics-view.png)\n\n### 4. 分析数据\n\n现在，我们已经成功监听了设备和网关之间数据。现在需要试着分析这些数据了。那么就要使用Wireshark了。\n\n```\nsudo wireshark\n```\n\n我们简单做一下筛选，只展示IP地址为192.168.199.153的POST请求。\n```\nip.addr == 192.168.199.153 &amp;&amp; http.request.method == \"POST\"\n```\n\n我在手机的一个非https网站(www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。\n\n[![](https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png)](https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png)\n\n可以看到登录的用户名密码都是以明文的方式传输的，非常方便的进行了数据抓包调试。\n\n### 4.2 延伸\n\n我们一直使用POST方式来获取该设备的登录信息，但是如果该设备已经登录过了，我们应该如何抓取到可以使用的信息呢？——当然是Cookie信息了。\n\n将过滤的请求方式改为GET，在随便找到一个HTML页面之后，会发现其中带有Cookie信息。\n\n[![](https://cdn.thisjs.com/img/wireshark-cookie-info.png)](https://cdn.thisjs.com/img/wireshark-cookie-info.png)\n\n将该Cookie信息，保存下来，在任意浏览器中导入该Cookie信息，即可实现『登录』的效果。\n\n[![](https://cdn.thisjs.com/img/wireshark-cookie-login.png)](https://cdn.thisjs.com/img/wireshark-cookie-login.png)\n\n## 小结\n\n至此，我们已经利用非常古老的的中间人攻击的方式，实现了不需要手机任何操作，就可以抓取手机数据包的功能。该方法在设置好之后，非常方便，可以快速切换设备，也可以多个设备同时抓包测试。\n\n当然，我们也发现了其中的问题，那就是如果使用该方式对其他人的手机进行渗入，是不是就会导致数据泄露呢？理论上是会出现这种情况的，但是前面也提到，这是比较古老的攻击方式，只要设备上安装了任意的『XX安全卫士』『xx管家』，不要随便连接公共的WIFI，都可以保证我们的设备安全。\n\n## 参考文档\n\n*   [同一局域网环境下的arp欺骗和中间人攻击（mac）](https://youyuejiajia.wordpress.com/2016/03/20/%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84arp%E6%AC%BA%E9%AA%97%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%EF%BC%88mac%EF%BC%89/)\n*   [wireshark怎么抓包 wireshark抓包详细图文教程](https://jingyan.baidu.com/article/c35dbcb0866b698916fcbc81.html)\n*   [Man In The Middle Attack! (ARP Poisoning) using ettercap to sniff login information](https://www.youtube.com/watch?v=0a7o9FKzWOc)\n*   [使用ettercap实现中间人攻击](http://blog.51cto.com/isnull/1738199)\n*   [如何用Ettercap实现“中间人攻击”](http://www.freebuf.com/sectool/125104.html)\n*   [Wireshark学习笔记——如何快速抓取HTTP数据包](https://blog.csdn.net/xukai871105/article/details/31008635)\n*   [Ettercap的arp攻击方法](http://blog.51cto.com/wxfplane/1749951)","source":"_posts/using-man-in-the-middle-for-capture.md","raw":"---\ntitle: 使用MiTM的方式进行无线抓包调试\ndate: 2018-04-07 22:03:51\ntags: [中间人, 开发, 抓包]\n---\n\n[![](https://cdn.thisjs.com/img/20180405173639.png)](https://cdn.thisjs.com/img/20180405173639.png)\n\n## 背景介绍\n\n在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。\n\n*   在Windows平台上，常用的软件是 [<u>Fiddler</u>](https://www.telerik.com/fiddler)\n*   而在OS X系统中，要使用的软件则是 [<u>Wireshark</u>](https://www.wireshark.org/)\n*   在Android平台上，使用的则是 [<u>Packet Capture</u>](https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture)\n\n本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。\n<!--more-->\n\n比如在Windows上调试手机设备，我们可以在Fiddler中开启**允许其他设备远程连接**，然后在手机设备中设置VPN为电脑IP，这样手机的数据会通过电脑进行请求，这样我们就可以在Fiddler中抓取手机中的数据包了。\n\n这项操作其实还可以简化，那就是不需要手机进行任何设置，我们就可以直接直接获取手机上的数据包。这时候，我们就可以使用神奇的 **Ettercap** 了，该软件可以实现一个中间人攻击的思路，进行抓包分析。\n\n![](https://cdn.thisjs.com/img/mitmblogeng-1.png)\n\n> 中间人攻击是指**攻击**者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制\n\n基于此，我们便不需要通过手机端的设置或者允许，我们在这个环节中，扮演攻击者，就可以快速的开始对其抓包分析了。\n\n以下介绍在os X系统中进行中间人攻击抓包的方式。\n\n## 安装工具包\n\n我们需要的几个工具如下：\n\n*   nmap (_端口扫描器_)\n*   ettercap (_中间人攻击工具_)\n*   Wireshark (_包分析工具_)\n使用Homebrew安装这几个包非常方便。\n```\n$ brew install nmap\n```\n```\n$ brew install ettercap\n```\n\n在安装Ettercap的时候可以选择带GUI界面的，只需要在后面追加`--with-gtk+` 参数即可。\n\n```\n$ brew install wireshark --with-qt\n```\n\n##  具体操作\n\n### 1. 查看局域网IP信息\n\n首先，**电脑要与手机在同一个局域网中**。接下来，通过IP查看局域网使用的网段。在终端中，使用以下其中一个命令，查看IP地址。\n\n```\nipconfig getifaddr en0 # 使用无线网连接\nipconfig getifaddr en1 # 使用以太网连接\nipconfig getifaddr en3 # 使用其他适配器连接\n```\n\n### 2. 扫描同一局域网中的网络使用情况。\n\n接下来我们使用namp查看同一网段下，有哪些设备在连接。会得到类似以下结果。\n\n```\n$ nmap -sP  192.168.199.0/24\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2018-04-05 18:10 CST\nNmap scan report for Hiwifi.lan (192.168.199.1)\nHost is up (0.0030s latency).\nNmap scan report for android-5ea1fea3b816a66.lan (192.168.199.153)\nHost is up (0.031s latency).\nNmap scan report for zMBP.lan (192.168.199.169)\nHost is up (0.0021s latency).\nNmap scan report for RedmiNote4X-hongmish.lan (192.168.199.198)\nHost is up (0.035s latency).\nNmap scan report for iPad.lan (192.168.199.202)\nHost is up (0.037s latency).\nNmap scan report for iPhone-7.lan (192.168.199.234)\nHost is up (0.0068s latency).\nNmap done: 256 IP addresses (6 hosts up) scanned in 3.07 seconds\n\n```\n<del>当然，如果你通过手机的链接信息中，直接获取到手机IP的话，该步骤可以省略。</del>\n\n可以看到这里有多个设备在连接，而我本次需要测试的是`android…….lan (192.168.199.153)` 这一个IP。\n\n### 3. 开始Ettercap\n\n这里使用curses图形化界面启动，参数为`-C`，如果使用GUI界面的话，参数为`-G`\n\n```\nsudo ettercap -C\n```\n[![](https://cdn.thisjs.com/img/etttercap-index.png)](https://cdn.thisjs.com/img/etttercap-index.png)\n\n进入该界面后，依次选择`Sniff` -&gt; `Unified sniffing...U` -&gt; 输入网络类型值(_参考上面查询IP的参数，默认en0_) -&gt; `Hosts` -&gt; `Scan for hosts` -&gt; `Hosts list`\n\n[![](https://cdn.thisjs.com/img/ettercap-hosts-list.png)](https://cdn.thisjs.com/img/ettercap-hosts-list.png)\n\n这里可以看到扫描出来的同网段IP，在编写该文章的时候，有些其他设备已经离线了，因此本列表中扫描到的与使用namp扫描出来数量不同。但是如果记住了对应设备的IP，依旧可以使用。\n\n这里，`192.168.199.1` 为网关，本次中间人攻击就是要实现欺骗设备 `192.168.199.153` 与网关 `192.168.199.1`之间的通讯。\n\n接下来，需要将这两个IP分别加入嗅探的目标中，依次进入`Targets` -&gt; `Select TARGET(s) ` -&gt; 在TARGET1中输入/`192.168.199.153//`  TARGET1中输入/`192.168.199.1//`\n\n**备注：这里的Target格式为 `MAC/IPs/PORTs/`**\n\n这时，查看Current targets可以看到当前的目标列表。\n\n[![](https://cdn.thisjs.com/img/ettercap-current-targets.png)](https://cdn.thisjs.com/img/ettercap-current-targets.png)\n\n执行`MiTM` -&gt; `ARP poisoning...` -&gt; Parameters为空即可\n\n这时，已经通过ARP欺骗的方式，成功开始了中间人攻击。可以通过`View` -&gt; `Statistics`查看该设备的数据情况。\n\n[![](https://cdn.thisjs.com/img/ettercap-statistics-view.png)](https://cdn.thisjs.com/img/ettercap-statistics-view.png)\n\n### 4. 分析数据\n\n现在，我们已经成功监听了设备和网关之间数据。现在需要试着分析这些数据了。那么就要使用Wireshark了。\n\n```\nsudo wireshark\n```\n\n我们简单做一下筛选，只展示IP地址为192.168.199.153的POST请求。\n```\nip.addr == 192.168.199.153 &amp;&amp; http.request.method == \"POST\"\n```\n\n我在手机的一个非https网站(www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。\n\n[![](https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png)](https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png)\n\n可以看到登录的用户名密码都是以明文的方式传输的，非常方便的进行了数据抓包调试。\n\n### 4.2 延伸\n\n我们一直使用POST方式来获取该设备的登录信息，但是如果该设备已经登录过了，我们应该如何抓取到可以使用的信息呢？——当然是Cookie信息了。\n\n将过滤的请求方式改为GET，在随便找到一个HTML页面之后，会发现其中带有Cookie信息。\n\n[![](https://cdn.thisjs.com/img/wireshark-cookie-info.png)](https://cdn.thisjs.com/img/wireshark-cookie-info.png)\n\n将该Cookie信息，保存下来，在任意浏览器中导入该Cookie信息，即可实现『登录』的效果。\n\n[![](https://cdn.thisjs.com/img/wireshark-cookie-login.png)](https://cdn.thisjs.com/img/wireshark-cookie-login.png)\n\n## 小结\n\n至此，我们已经利用非常古老的的中间人攻击的方式，实现了不需要手机任何操作，就可以抓取手机数据包的功能。该方法在设置好之后，非常方便，可以快速切换设备，也可以多个设备同时抓包测试。\n\n当然，我们也发现了其中的问题，那就是如果使用该方式对其他人的手机进行渗入，是不是就会导致数据泄露呢？理论上是会出现这种情况的，但是前面也提到，这是比较古老的攻击方式，只要设备上安装了任意的『XX安全卫士』『xx管家』，不要随便连接公共的WIFI，都可以保证我们的设备安全。\n\n## 参考文档\n\n*   [同一局域网环境下的arp欺骗和中间人攻击（mac）](https://youyuejiajia.wordpress.com/2016/03/20/%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84arp%E6%AC%BA%E9%AA%97%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%EF%BC%88mac%EF%BC%89/)\n*   [wireshark怎么抓包 wireshark抓包详细图文教程](https://jingyan.baidu.com/article/c35dbcb0866b698916fcbc81.html)\n*   [Man In The Middle Attack! (ARP Poisoning) using ettercap to sniff login information](https://www.youtube.com/watch?v=0a7o9FKzWOc)\n*   [使用ettercap实现中间人攻击](http://blog.51cto.com/isnull/1738199)\n*   [如何用Ettercap实现“中间人攻击”](http://www.freebuf.com/sectool/125104.html)\n*   [Wireshark学习笔记——如何快速抓取HTTP数据包](https://blog.csdn.net/xukai871105/article/details/31008635)\n*   [Ettercap的arp攻击方法](http://blog.51cto.com/wxfplane/1749951)","slug":"using-man-in-the-middle-for-capture","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbxd002m1h2u5cm0y4cl","content":"<p><a href=\"https://cdn.thisjs.com/img/20180405173639.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/20180405173639.png\" alt></a></p>\n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。</p>\n<ul>\n<li>在Windows平台上，常用的软件是 <a href=\"https://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\"><u>Fiddler</u></a></li>\n<li>而在OS X系统中，要使用的软件则是 <a href=\"https://www.wireshark.org/\" target=\"_blank\" rel=\"noopener\"><u>Wireshark</u></a></li>\n<li>在Android平台上，使用的则是 <a href=\"https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture\" target=\"_blank\" rel=\"noopener\"><u>Packet Capture</u></a></li>\n</ul>\n<p>本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。<br><a id=\"more\"></a></p>\n<p>比如在Windows上调试手机设备，我们可以在Fiddler中开启<strong>允许其他设备远程连接</strong>，然后在手机设备中设置VPN为电脑IP，这样手机的数据会通过电脑进行请求，这样我们就可以在Fiddler中抓取手机中的数据包了。</p>\n<p>这项操作其实还可以简化，那就是不需要手机进行任何设置，我们就可以直接直接获取手机上的数据包。这时候，我们就可以使用神奇的 <strong>Ettercap</strong> 了，该软件可以实现一个中间人攻击的思路，进行抓包分析。</p>\n<p><img src=\"https://cdn.thisjs.com/img/mitmblogeng-1.png\" alt></p>\n<blockquote>\n<p>中间人攻击是指<strong>攻击</strong>者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制</p>\n</blockquote>\n<p>基于此，我们便不需要通过手机端的设置或者允许，我们在这个环节中，扮演攻击者，就可以快速的开始对其抓包分析了。</p>\n<p>以下介绍在os X系统中进行中间人攻击抓包的方式。</p>\n<h2 id=\"安装工具包\"><a href=\"#安装工具包\" class=\"headerlink\" title=\"安装工具包\"></a>安装工具包</h2><p>我们需要的几个工具如下：</p>\n<ul>\n<li>nmap (<em>端口扫描器</em>)</li>\n<li>ettercap (<em>中间人攻击工具</em>)</li>\n<li>Wireshark (<em>包分析工具</em>)<br>使用Homebrew安装这几个包非常方便。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nmap</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ettercap</span><br></pre></td></tr></table></figure>\n<p>在安装Ettercap的时候可以选择带GUI界面的，只需要在后面追加<code>--with-gtk+</code> 参数即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install wireshark --with-qt</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h2><h3 id=\"1-查看局域网IP信息\"><a href=\"#1-查看局域网IP信息\" class=\"headerlink\" title=\"1. 查看局域网IP信息\"></a>1. 查看局域网IP信息</h3><p>首先，<strong>电脑要与手机在同一个局域网中</strong>。接下来，通过IP查看局域网使用的网段。在终端中，使用以下其中一个命令，查看IP地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig getifaddr en0 # 使用无线网连接</span><br><span class=\"line\">ipconfig getifaddr en1 # 使用以太网连接</span><br><span class=\"line\">ipconfig getifaddr en3 # 使用其他适配器连接</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-扫描同一局域网中的网络使用情况。\"><a href=\"#2-扫描同一局域网中的网络使用情况。\" class=\"headerlink\" title=\"2. 扫描同一局域网中的网络使用情况。\"></a>2. 扫描同一局域网中的网络使用情况。</h3><p>接下来我们使用namp查看同一网段下，有哪些设备在连接。会得到类似以下结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nmap -sP  192.168.199.0/24</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.60 ( https://nmap.org ) at 2018-04-05 18:10 CST</span><br><span class=\"line\">Nmap scan report for Hiwifi.lan (192.168.199.1)</span><br><span class=\"line\">Host is up (0.0030s latency).</span><br><span class=\"line\">Nmap scan report for android-5ea1fea3b816a66.lan (192.168.199.153)</span><br><span class=\"line\">Host is up (0.031s latency).</span><br><span class=\"line\">Nmap scan report for zMBP.lan (192.168.199.169)</span><br><span class=\"line\">Host is up (0.0021s latency).</span><br><span class=\"line\">Nmap scan report for RedmiNote4X-hongmish.lan (192.168.199.198)</span><br><span class=\"line\">Host is up (0.035s latency).</span><br><span class=\"line\">Nmap scan report for iPad.lan (192.168.199.202)</span><br><span class=\"line\">Host is up (0.037s latency).</span><br><span class=\"line\">Nmap scan report for iPhone-7.lan (192.168.199.234)</span><br><span class=\"line\">Host is up (0.0068s latency).</span><br><span class=\"line\">Nmap done: 256 IP addresses (6 hosts up) scanned in 3.07 seconds</span><br></pre></td></tr></table></figure>\n<p><del>当然，如果你通过手机的链接信息中，直接获取到手机IP的话，该步骤可以省略。</del></p>\n<p>可以看到这里有多个设备在连接，而我本次需要测试的是<code>android…….lan (192.168.199.153)</code> 这一个IP。</p>\n<h3 id=\"3-开始Ettercap\"><a href=\"#3-开始Ettercap\" class=\"headerlink\" title=\"3. 开始Ettercap\"></a>3. 开始Ettercap</h3><p>这里使用curses图形化界面启动，参数为<code>-C</code>，如果使用GUI界面的话，参数为<code>-G</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ettercap -C</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cdn.thisjs.com/img/etttercap-index.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/etttercap-index.png\" alt></a></p>\n<p>进入该界面后，依次选择<code>Sniff</code> -&gt; <code>Unified sniffing...U</code> -&gt; 输入网络类型值(<em>参考上面查询IP的参数，默认en0</em>) -&gt; <code>Hosts</code> -&gt; <code>Scan for hosts</code> -&gt; <code>Hosts list</code></p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-hosts-list.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-hosts-list.png\" alt></a></p>\n<p>这里可以看到扫描出来的同网段IP，在编写该文章的时候，有些其他设备已经离线了，因此本列表中扫描到的与使用namp扫描出来数量不同。但是如果记住了对应设备的IP，依旧可以使用。</p>\n<p>这里，<code>192.168.199.1</code> 为网关，本次中间人攻击就是要实现欺骗设备 <code>192.168.199.153</code> 与网关 <code>192.168.199.1</code>之间的通讯。</p>\n<p>接下来，需要将这两个IP分别加入嗅探的目标中，依次进入<code>Targets</code> -&gt; <code>Select TARGET(s)</code> -&gt; 在TARGET1中输入/<code>192.168.199.153//</code>  TARGET1中输入/<code>192.168.199.1//</code></p>\n<p><strong>备注：这里的Target格式为 <code>MAC/IPs/PORTs/</code></strong></p>\n<p>这时，查看Current targets可以看到当前的目标列表。</p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-current-targets.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-current-targets.png\" alt></a></p>\n<p>执行<code>MiTM</code> -&gt; <code>ARP poisoning...</code> -&gt; Parameters为空即可</p>\n<p>这时，已经通过ARP欺骗的方式，成功开始了中间人攻击。可以通过<code>View</code> -&gt; <code>Statistics</code>查看该设备的数据情况。</p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-statistics-view.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-statistics-view.png\" alt></a></p>\n<h3 id=\"4-分析数据\"><a href=\"#4-分析数据\" class=\"headerlink\" title=\"4. 分析数据\"></a>4. 分析数据</h3><p>现在，我们已经成功监听了设备和网关之间数据。现在需要试着分析这些数据了。那么就要使用Wireshark了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wireshark</span><br></pre></td></tr></table></figure>\n<p>我们简单做一下筛选，只展示IP地址为192.168.199.153的POST请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == 192.168.199.153 &amp;amp;&amp;amp; http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我在手机的一个非https网站(<a href=\"http://www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。\" target=\"_blank\" rel=\"noopener\">www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。</a></p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png\" alt></a></p>\n<p>可以看到登录的用户名密码都是以明文的方式传输的，非常方便的进行了数据抓包调试。</p>\n<h3 id=\"4-2-延伸\"><a href=\"#4-2-延伸\" class=\"headerlink\" title=\"4.2 延伸\"></a>4.2 延伸</h3><p>我们一直使用POST方式来获取该设备的登录信息，但是如果该设备已经登录过了，我们应该如何抓取到可以使用的信息呢？——当然是Cookie信息了。</p>\n<p>将过滤的请求方式改为GET，在随便找到一个HTML页面之后，会发现其中带有Cookie信息。</p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-cookie-info.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-cookie-info.png\" alt></a></p>\n<p>将该Cookie信息，保存下来，在任意浏览器中导入该Cookie信息，即可实现『登录』的效果。</p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-cookie-login.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-cookie-login.png\" alt></a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，我们已经利用非常古老的的中间人攻击的方式，实现了不需要手机任何操作，就可以抓取手机数据包的功能。该方法在设置好之后，非常方便，可以快速切换设备，也可以多个设备同时抓包测试。</p>\n<p>当然，我们也发现了其中的问题，那就是如果使用该方式对其他人的手机进行渗入，是不是就会导致数据泄露呢？理论上是会出现这种情况的，但是前面也提到，这是比较古老的攻击方式，只要设备上安装了任意的『XX安全卫士』『xx管家』，不要随便连接公共的WIFI，都可以保证我们的设备安全。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://youyuejiajia.wordpress.com/2016/03/20/%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84arp%E6%AC%BA%E9%AA%97%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%EF%BC%88mac%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">同一局域网环境下的arp欺骗和中间人攻击（mac）</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/c35dbcb0866b698916fcbc81.html\" target=\"_blank\" rel=\"noopener\">wireshark怎么抓包 wireshark抓包详细图文教程</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0a7o9FKzWOc\" target=\"_blank\" rel=\"noopener\">Man In The Middle Attack! (ARP Poisoning) using ettercap to sniff login information</a></li>\n<li><a href=\"http://blog.51cto.com/isnull/1738199\" target=\"_blank\" rel=\"noopener\">使用ettercap实现中间人攻击</a></li>\n<li><a href=\"http://www.freebuf.com/sectool/125104.html\" target=\"_blank\" rel=\"noopener\">如何用Ettercap实现“中间人攻击”</a></li>\n<li><a href=\"https://blog.csdn.net/xukai871105/article/details/31008635\" target=\"_blank\" rel=\"noopener\">Wireshark学习笔记——如何快速抓取HTTP数据包</a></li>\n<li><a href=\"http://blog.51cto.com/wxfplane/1749951\" target=\"_blank\" rel=\"noopener\">Ettercap的arp攻击方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://cdn.thisjs.com/img/20180405173639.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/20180405173639.png\" alt></a></p>\n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在开发的过程中，常常会遇到需要抓包，查看请求数据的情况。</p>\n<ul>\n<li>在Windows平台上，常用的软件是 <a href=\"https://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\"><u>Fiddler</u></a></li>\n<li>而在OS X系统中，要使用的软件则是 <a href=\"https://www.wireshark.org/\" target=\"_blank\" rel=\"noopener\"><u>Wireshark</u></a></li>\n<li>在Android平台上，使用的则是 <a href=\"https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture\" target=\"_blank\" rel=\"noopener\"><u>Packet Capture</u></a></li>\n</ul>\n<p>本来各自负责各自的平台，非常的和平。但是我们会遇到在一个平台上调试其他设备的数据请求情况。<br>","more":"</p>\n<p>比如在Windows上调试手机设备，我们可以在Fiddler中开启<strong>允许其他设备远程连接</strong>，然后在手机设备中设置VPN为电脑IP，这样手机的数据会通过电脑进行请求，这样我们就可以在Fiddler中抓取手机中的数据包了。</p>\n<p>这项操作其实还可以简化，那就是不需要手机进行任何设置，我们就可以直接直接获取手机上的数据包。这时候，我们就可以使用神奇的 <strong>Ettercap</strong> 了，该软件可以实现一个中间人攻击的思路，进行抓包分析。</p>\n<p><img src=\"https://cdn.thisjs.com/img/mitmblogeng-1.png\" alt></p>\n<blockquote>\n<p>中间人攻击是指<strong>攻击</strong>者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制</p>\n</blockquote>\n<p>基于此，我们便不需要通过手机端的设置或者允许，我们在这个环节中，扮演攻击者，就可以快速的开始对其抓包分析了。</p>\n<p>以下介绍在os X系统中进行中间人攻击抓包的方式。</p>\n<h2 id=\"安装工具包\"><a href=\"#安装工具包\" class=\"headerlink\" title=\"安装工具包\"></a>安装工具包</h2><p>我们需要的几个工具如下：</p>\n<ul>\n<li>nmap (<em>端口扫描器</em>)</li>\n<li>ettercap (<em>中间人攻击工具</em>)</li>\n<li>Wireshark (<em>包分析工具</em>)<br>使用Homebrew安装这几个包非常方便。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nmap</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ettercap</span><br></pre></td></tr></table></figure>\n<p>在安装Ettercap的时候可以选择带GUI界面的，只需要在后面追加<code>--with-gtk+</code> 参数即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install wireshark --with-qt</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h2><h3 id=\"1-查看局域网IP信息\"><a href=\"#1-查看局域网IP信息\" class=\"headerlink\" title=\"1. 查看局域网IP信息\"></a>1. 查看局域网IP信息</h3><p>首先，<strong>电脑要与手机在同一个局域网中</strong>。接下来，通过IP查看局域网使用的网段。在终端中，使用以下其中一个命令，查看IP地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig getifaddr en0 # 使用无线网连接</span><br><span class=\"line\">ipconfig getifaddr en1 # 使用以太网连接</span><br><span class=\"line\">ipconfig getifaddr en3 # 使用其他适配器连接</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-扫描同一局域网中的网络使用情况。\"><a href=\"#2-扫描同一局域网中的网络使用情况。\" class=\"headerlink\" title=\"2. 扫描同一局域网中的网络使用情况。\"></a>2. 扫描同一局域网中的网络使用情况。</h3><p>接下来我们使用namp查看同一网段下，有哪些设备在连接。会得到类似以下结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nmap -sP  192.168.199.0/24</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.60 ( https://nmap.org ) at 2018-04-05 18:10 CST</span><br><span class=\"line\">Nmap scan report for Hiwifi.lan (192.168.199.1)</span><br><span class=\"line\">Host is up (0.0030s latency).</span><br><span class=\"line\">Nmap scan report for android-5ea1fea3b816a66.lan (192.168.199.153)</span><br><span class=\"line\">Host is up (0.031s latency).</span><br><span class=\"line\">Nmap scan report for zMBP.lan (192.168.199.169)</span><br><span class=\"line\">Host is up (0.0021s latency).</span><br><span class=\"line\">Nmap scan report for RedmiNote4X-hongmish.lan (192.168.199.198)</span><br><span class=\"line\">Host is up (0.035s latency).</span><br><span class=\"line\">Nmap scan report for iPad.lan (192.168.199.202)</span><br><span class=\"line\">Host is up (0.037s latency).</span><br><span class=\"line\">Nmap scan report for iPhone-7.lan (192.168.199.234)</span><br><span class=\"line\">Host is up (0.0068s latency).</span><br><span class=\"line\">Nmap done: 256 IP addresses (6 hosts up) scanned in 3.07 seconds</span><br></pre></td></tr></table></figure>\n<p><del>当然，如果你通过手机的链接信息中，直接获取到手机IP的话，该步骤可以省略。</del></p>\n<p>可以看到这里有多个设备在连接，而我本次需要测试的是<code>android…….lan (192.168.199.153)</code> 这一个IP。</p>\n<h3 id=\"3-开始Ettercap\"><a href=\"#3-开始Ettercap\" class=\"headerlink\" title=\"3. 开始Ettercap\"></a>3. 开始Ettercap</h3><p>这里使用curses图形化界面启动，参数为<code>-C</code>，如果使用GUI界面的话，参数为<code>-G</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ettercap -C</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cdn.thisjs.com/img/etttercap-index.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/etttercap-index.png\" alt></a></p>\n<p>进入该界面后，依次选择<code>Sniff</code> -&gt; <code>Unified sniffing...U</code> -&gt; 输入网络类型值(<em>参考上面查询IP的参数，默认en0</em>) -&gt; <code>Hosts</code> -&gt; <code>Scan for hosts</code> -&gt; <code>Hosts list</code></p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-hosts-list.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-hosts-list.png\" alt></a></p>\n<p>这里可以看到扫描出来的同网段IP，在编写该文章的时候，有些其他设备已经离线了，因此本列表中扫描到的与使用namp扫描出来数量不同。但是如果记住了对应设备的IP，依旧可以使用。</p>\n<p>这里，<code>192.168.199.1</code> 为网关，本次中间人攻击就是要实现欺骗设备 <code>192.168.199.153</code> 与网关 <code>192.168.199.1</code>之间的通讯。</p>\n<p>接下来，需要将这两个IP分别加入嗅探的目标中，依次进入<code>Targets</code> -&gt; <code>Select TARGET(s)</code> -&gt; 在TARGET1中输入/<code>192.168.199.153//</code>  TARGET1中输入/<code>192.168.199.1//</code></p>\n<p><strong>备注：这里的Target格式为 <code>MAC/IPs/PORTs/</code></strong></p>\n<p>这时，查看Current targets可以看到当前的目标列表。</p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-current-targets.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-current-targets.png\" alt></a></p>\n<p>执行<code>MiTM</code> -&gt; <code>ARP poisoning...</code> -&gt; Parameters为空即可</p>\n<p>这时，已经通过ARP欺骗的方式，成功开始了中间人攻击。可以通过<code>View</code> -&gt; <code>Statistics</code>查看该设备的数据情况。</p>\n<p><a href=\"https://cdn.thisjs.com/img/ettercap-statistics-view.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/ettercap-statistics-view.png\" alt></a></p>\n<h3 id=\"4-分析数据\"><a href=\"#4-分析数据\" class=\"headerlink\" title=\"4. 分析数据\"></a>4. 分析数据</h3><p>现在，我们已经成功监听了设备和网关之间数据。现在需要试着分析这些数据了。那么就要使用Wireshark了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wireshark</span><br></pre></td></tr></table></figure>\n<p>我们简单做一下筛选，只展示IP地址为192.168.199.153的POST请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == 192.168.199.153 &amp;amp;&amp;amp; http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我在手机的一个非https网站(<a href=\"http://www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。\" target=\"_blank\" rel=\"noopener\">www.div.io)中进行了登录测试。可以在wireshark中获取到了POST的JSON数据信息。</a></p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-post-userinfo-data.png\" alt></a></p>\n<p>可以看到登录的用户名密码都是以明文的方式传输的，非常方便的进行了数据抓包调试。</p>\n<h3 id=\"4-2-延伸\"><a href=\"#4-2-延伸\" class=\"headerlink\" title=\"4.2 延伸\"></a>4.2 延伸</h3><p>我们一直使用POST方式来获取该设备的登录信息，但是如果该设备已经登录过了，我们应该如何抓取到可以使用的信息呢？——当然是Cookie信息了。</p>\n<p>将过滤的请求方式改为GET，在随便找到一个HTML页面之后，会发现其中带有Cookie信息。</p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-cookie-info.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-cookie-info.png\" alt></a></p>\n<p>将该Cookie信息，保存下来，在任意浏览器中导入该Cookie信息，即可实现『登录』的效果。</p>\n<p><a href=\"https://cdn.thisjs.com/img/wireshark-cookie-login.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.thisjs.com/img/wireshark-cookie-login.png\" alt></a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，我们已经利用非常古老的的中间人攻击的方式，实现了不需要手机任何操作，就可以抓取手机数据包的功能。该方法在设置好之后，非常方便，可以快速切换设备，也可以多个设备同时抓包测试。</p>\n<p>当然，我们也发现了其中的问题，那就是如果使用该方式对其他人的手机进行渗入，是不是就会导致数据泄露呢？理论上是会出现这种情况的，但是前面也提到，这是比较古老的攻击方式，只要设备上安装了任意的『XX安全卫士』『xx管家』，不要随便连接公共的WIFI，都可以保证我们的设备安全。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://youyuejiajia.wordpress.com/2016/03/20/%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84arp%E6%AC%BA%E9%AA%97%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%EF%BC%88mac%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">同一局域网环境下的arp欺骗和中间人攻击（mac）</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/c35dbcb0866b698916fcbc81.html\" target=\"_blank\" rel=\"noopener\">wireshark怎么抓包 wireshark抓包详细图文教程</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0a7o9FKzWOc\" target=\"_blank\" rel=\"noopener\">Man In The Middle Attack! (ARP Poisoning) using ettercap to sniff login information</a></li>\n<li><a href=\"http://blog.51cto.com/isnull/1738199\" target=\"_blank\" rel=\"noopener\">使用ettercap实现中间人攻击</a></li>\n<li><a href=\"http://www.freebuf.com/sectool/125104.html\" target=\"_blank\" rel=\"noopener\">如何用Ettercap实现“中间人攻击”</a></li>\n<li><a href=\"https://blog.csdn.net/xukai871105/article/details/31008635\" target=\"_blank\" rel=\"noopener\">Wireshark学习笔记——如何快速抓取HTTP数据包</a></li>\n<li><a href=\"http://blog.51cto.com/wxfplane/1749951\" target=\"_blank\" rel=\"noopener\">Ettercap的arp攻击方法</a></li>\n</ul>"},{"title":"前后端分离的身份认证(一)：JSON WEB TOKEN介绍","date":"2017-09-25T08:25:59.000Z","_content":"![安全](https://cdn.thisjs.com/blog/software-720x380.jpg)\n\n随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。\n\n<!--more-->\n\n这是一篇前导文章，之后会发布一系列关于JSON WEB TOKEN的项目实践。因此，这里将自己了解的相关知识和自己的一些观点汇集于此，以供查阅。\n\n# 传统验证方式的不足\n> 当然，传统验证方式并不是一文不值的，这里只是列出其中的不足，然后使用JSON WEB TOKEN来弥补其中的缺点。\n\n* **服务端性能消耗** 每次与用户建立会话之后，都会在服务端保存该信息，例如：PHP Session是保存在文件中，而Java Session则是保存在内存中，随着用户量的提升，会大量占用服务器的资源。\n* **限制了分布式部署** 当服务器处于分布式环境下，Session共享问题便随之而出，因此需要单独的服务器资源来解决Session共享问题。\n* **与Restful API的stateless冲突** Restful思想正在逐步推广，而Session则引入了新的“状态”，与Restful思想矛盾。\n* **不方便移动APP的开发** 使用Session验证方式，限制了原生Android，IOS APP的数据交互。\n* **XSS** Session的提交方式，是将Session信息存储在Cookie中，提交到服务器端，因此很容易被客户端注入的javascript代码，截获Cookie信息。\n* **XSRF**  基于Session的验证方式，有可能会被跨站请求伪造。\n\n# JSON WEB TOKEN\n\n## 简单介绍\nJWT包含3部分数据信息，使用\".\"分割，格式示例如下\n```\nhhhhhhh.pppppp.sssss\n```\n三部分信息分别为：\n\n`Signature`: 签名\n\n### Header 头信息\n\nHeader中一般包含Token类型和哈希算法，例如:\n```json\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}\n```\n\n### Payload 有效荷载\nPayload中包含声明信息，例如\n```js\n{\n    \"username\": \"admin\",\n    \"iat\":1506320911,  // 创建时间\n    \"exp\":1506324511  // 过期时间\n}\n```\n> **注意：** Payload和Header中的信息是BASE64编码，不是加密，因此不要再payload中添加敏感信息\n\n### Signature 签名\n签名用来校验JWT的发送方属实，以及确认消息在传递途中没有被更改。\n例如，使用HS256算法，签名将采用如下方式创建：\n```js\nHS256(\n    base64UrlEncode(header) + \".\" + \n    base64UrlEncode(payload), \n    secret)\n```\n这里对于jwt的介绍只是简单介绍，详细关于JWT的信息可以参阅[[2]][b],[[3]][c]这两篇文章。\n\n\n## JWT的优点\n* **可以实现跨域请求** 因为JWT不依赖于Cookie，它可以添加在请求的`Header`,`body`,`参数`中，因此只要服务器允许跨域请求，那么带有授权Token的客户端，可以任意访问不同服务器下的服务，因此，非常适合SSO单点登录系统。\n* **减少服务器消耗** 服务器在生成Token之后，就将Token返回给客户端，客户端保存Token用于下次请求。服务端不进行储存Token，只验证Token，减少了服务器的消耗。同时，带有Token的请求在请求不同服务时，不用考虑是与哪台服务器生成的Session问题，非常适用于云服务。\n* **通用性** 因为JSON的通用性，所以JWT可以在Nodejs，JAVA，PHP等不同平台使用。\n\n\n## JWT示意图\n{% plantuml %}\nactor 用户\n== 获取Token ==\n用户 -> 服务器: 登录\n服务器 -> 服务器: 验证登录信息\n用户 <- 服务器: 返回Token信息\nnote left: 保存Token\\n到本地\n== 使用Token ==\n用户 -> 服务器: 带上Token，请求API\n服务器 -> 服务器: 验证Token\n用户 <- 服务器: 返回数据\n{% endplantuml %}\n\n## 安全问题\n\n* Payload中的内容是BASE64编码，如果需要，可以在编码前，对内容进行加密\n* 生成签名的密钥除了妥善保存之外，可以使用**动态密钥**，在启动服务时生成密钥，这样就不会被轻易获取\n\n# 参考资料\n\n[1] [前后端分离之JWT用户认证](http://lion1ou.win/2017/01/18/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[2] [什么是 JWT -- JSON WEB TOKEN][b]\n\n[3] [适用于前后端分离的下一代认证机制 —— JSON Web Token][c]\n\n[4] [基于JSON Web Token的无状态账户系统的设计](http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&dbname=CJFDLAST2016&filename=XDJS201616018)\n\n[5] [JWT认证技术及其在WEB中的应用](http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&dbname=CJFDLAST2016&filename=SZJT201602087)\n\n[b]: http://www.jianshu.com/p/576dbf44b2ae\n[c]: https://github.com/smilingsun/blog/issues/1","source":"_posts/using-the-jwt-for-api-to-add-authentication.md","raw":"---\ntitle: 前后端分离的身份认证(一)：JSON WEB TOKEN介绍\ndate: 2017-09-25 08:25:59\ntags: [jwt, 前端]\n---\n![安全](https://cdn.thisjs.com/blog/software-720x380.jpg)\n\n随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。\n\n<!--more-->\n\n这是一篇前导文章，之后会发布一系列关于JSON WEB TOKEN的项目实践。因此，这里将自己了解的相关知识和自己的一些观点汇集于此，以供查阅。\n\n# 传统验证方式的不足\n> 当然，传统验证方式并不是一文不值的，这里只是列出其中的不足，然后使用JSON WEB TOKEN来弥补其中的缺点。\n\n* **服务端性能消耗** 每次与用户建立会话之后，都会在服务端保存该信息，例如：PHP Session是保存在文件中，而Java Session则是保存在内存中，随着用户量的提升，会大量占用服务器的资源。\n* **限制了分布式部署** 当服务器处于分布式环境下，Session共享问题便随之而出，因此需要单独的服务器资源来解决Session共享问题。\n* **与Restful API的stateless冲突** Restful思想正在逐步推广，而Session则引入了新的“状态”，与Restful思想矛盾。\n* **不方便移动APP的开发** 使用Session验证方式，限制了原生Android，IOS APP的数据交互。\n* **XSS** Session的提交方式，是将Session信息存储在Cookie中，提交到服务器端，因此很容易被客户端注入的javascript代码，截获Cookie信息。\n* **XSRF**  基于Session的验证方式，有可能会被跨站请求伪造。\n\n# JSON WEB TOKEN\n\n## 简单介绍\nJWT包含3部分数据信息，使用\".\"分割，格式示例如下\n```\nhhhhhhh.pppppp.sssss\n```\n三部分信息分别为：\n\n`Signature`: 签名\n\n### Header 头信息\n\nHeader中一般包含Token类型和哈希算法，例如:\n```json\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}\n```\n\n### Payload 有效荷载\nPayload中包含声明信息，例如\n```js\n{\n    \"username\": \"admin\",\n    \"iat\":1506320911,  // 创建时间\n    \"exp\":1506324511  // 过期时间\n}\n```\n> **注意：** Payload和Header中的信息是BASE64编码，不是加密，因此不要再payload中添加敏感信息\n\n### Signature 签名\n签名用来校验JWT的发送方属实，以及确认消息在传递途中没有被更改。\n例如，使用HS256算法，签名将采用如下方式创建：\n```js\nHS256(\n    base64UrlEncode(header) + \".\" + \n    base64UrlEncode(payload), \n    secret)\n```\n这里对于jwt的介绍只是简单介绍，详细关于JWT的信息可以参阅[[2]][b],[[3]][c]这两篇文章。\n\n\n## JWT的优点\n* **可以实现跨域请求** 因为JWT不依赖于Cookie，它可以添加在请求的`Header`,`body`,`参数`中，因此只要服务器允许跨域请求，那么带有授权Token的客户端，可以任意访问不同服务器下的服务，因此，非常适合SSO单点登录系统。\n* **减少服务器消耗** 服务器在生成Token之后，就将Token返回给客户端，客户端保存Token用于下次请求。服务端不进行储存Token，只验证Token，减少了服务器的消耗。同时，带有Token的请求在请求不同服务时，不用考虑是与哪台服务器生成的Session问题，非常适用于云服务。\n* **通用性** 因为JSON的通用性，所以JWT可以在Nodejs，JAVA，PHP等不同平台使用。\n\n\n## JWT示意图\n{% plantuml %}\nactor 用户\n== 获取Token ==\n用户 -> 服务器: 登录\n服务器 -> 服务器: 验证登录信息\n用户 <- 服务器: 返回Token信息\nnote left: 保存Token\\n到本地\n== 使用Token ==\n用户 -> 服务器: 带上Token，请求API\n服务器 -> 服务器: 验证Token\n用户 <- 服务器: 返回数据\n{% endplantuml %}\n\n## 安全问题\n\n* Payload中的内容是BASE64编码，如果需要，可以在编码前，对内容进行加密\n* 生成签名的密钥除了妥善保存之外，可以使用**动态密钥**，在启动服务时生成密钥，这样就不会被轻易获取\n\n# 参考资料\n\n[1] [前后端分离之JWT用户认证](http://lion1ou.win/2017/01/18/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[2] [什么是 JWT -- JSON WEB TOKEN][b]\n\n[3] [适用于前后端分离的下一代认证机制 —— JSON Web Token][c]\n\n[4] [基于JSON Web Token的无状态账户系统的设计](http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&dbname=CJFDLAST2016&filename=XDJS201616018)\n\n[5] [JWT认证技术及其在WEB中的应用](http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&dbname=CJFDLAST2016&filename=SZJT201602087)\n\n[b]: http://www.jianshu.com/p/576dbf44b2ae\n[c]: https://github.com/smilingsun/blog/issues/1","slug":"using-the-jwt-for-api-to-add-authentication","published":1,"updated":"2020-05-08T03:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xmnbxe002o1h2ulmkg88ym","content":"<p><img src=\"https://cdn.thisjs.com/blog/software-720x380.jpg\" alt=\"安全\"></p>\n<p>随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。</p>\n<a id=\"more\"></a>\n<p>这是一篇前导文章，之后会发布一系列关于JSON WEB TOKEN的项目实践。因此，这里将自己了解的相关知识和自己的一些观点汇集于此，以供查阅。</p>\n<h1 id=\"传统验证方式的不足\"><a href=\"#传统验证方式的不足\" class=\"headerlink\" title=\"传统验证方式的不足\"></a>传统验证方式的不足</h1><blockquote>\n<p>当然，传统验证方式并不是一文不值的，这里只是列出其中的不足，然后使用JSON WEB TOKEN来弥补其中的缺点。</p>\n</blockquote>\n<ul>\n<li><strong>服务端性能消耗</strong> 每次与用户建立会话之后，都会在服务端保存该信息，例如：PHP Session是保存在文件中，而Java Session则是保存在内存中，随着用户量的提升，会大量占用服务器的资源。</li>\n<li><strong>限制了分布式部署</strong> 当服务器处于分布式环境下，Session共享问题便随之而出，因此需要单独的服务器资源来解决Session共享问题。</li>\n<li><strong>与Restful API的stateless冲突</strong> Restful思想正在逐步推广，而Session则引入了新的“状态”，与Restful思想矛盾。</li>\n<li><strong>不方便移动APP的开发</strong> 使用Session验证方式，限制了原生Android，IOS APP的数据交互。</li>\n<li><strong>XSS</strong> Session的提交方式，是将Session信息存储在Cookie中，提交到服务器端，因此很容易被客户端注入的javascript代码，截获Cookie信息。</li>\n<li><strong>XSRF</strong>  基于Session的验证方式，有可能会被跨站请求伪造。</li>\n</ul>\n<h1 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON WEB TOKEN\"></a>JSON WEB TOKEN</h1><h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>JWT包含3部分数据信息，使用”.”分割，格式示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hhhhhhh.pppppp.sssss</span><br></pre></td></tr></table></figure></p>\n<p>三部分信息分别为：</p>\n<p><code>Signature</code>: 签名</p>\n<h3 id=\"Header-头信息\"><a href=\"#Header-头信息\" class=\"headerlink\" title=\"Header 头信息\"></a>Header 头信息</h3><p>Header中一般包含Token类型和哈希算法，例如:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"alg\"</span>:<span class=\"string\">\"HS256\"</span>,<span class=\"attr\">\"typ\"</span>:<span class=\"string\">\"JWT\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Payload-有效荷载\"><a href=\"#Payload-有效荷载\" class=\"headerlink\" title=\"Payload 有效荷载\"></a>Payload 有效荷载</h3><p>Payload中包含声明信息，例如<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"username\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"iat\"</span>:<span class=\"number\">1506320911</span>,  <span class=\"comment\">// 创建时间</span></span><br><span class=\"line\">    <span class=\"string\">\"exp\"</span>:<span class=\"number\">1506324511</span>  <span class=\"comment\">// 过期时间</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意：</strong> Payload和Header中的信息是BASE64编码，不是加密，因此不要再payload中添加敏感信息</p>\n</blockquote>\n<h3 id=\"Signature-签名\"><a href=\"#Signature-签名\" class=\"headerlink\" title=\"Signature 签名\"></a>Signature 签名</h3><p>签名用来校验JWT的发送方属实，以及确认消息在传递途中没有被更改。<br>例如，使用HS256算法，签名将采用如下方式创建：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HS256(</span><br><span class=\"line\">    base64UrlEncode(header) + <span class=\"string\">\".\"</span> + </span><br><span class=\"line\">    base64UrlEncode(payload), </span><br><span class=\"line\">    secret)</span><br></pre></td></tr></table></figure></p>\n<p>这里对于jwt的介绍只是简单介绍，详细关于JWT的信息可以参阅<a href=\"http://www.jianshu.com/p/576dbf44b2ae\" target=\"_blank\" rel=\"noopener\">[2]</a>,<a href=\"https://github.com/smilingsun/blog/issues/1\" target=\"_blank\" rel=\"noopener\">[3]</a>这两篇文章。</p>\n<h2 id=\"JWT的优点\"><a href=\"#JWT的优点\" class=\"headerlink\" title=\"JWT的优点\"></a>JWT的优点</h2><ul>\n<li><strong>可以实现跨域请求</strong> 因为JWT不依赖于Cookie，它可以添加在请求的<code>Header</code>,<code>body</code>,<code>参数</code>中，因此只要服务器允许跨域请求，那么带有授权Token的客户端，可以任意访问不同服务器下的服务，因此，非常适合SSO单点登录系统。</li>\n<li><strong>减少服务器消耗</strong> 服务器在生成Token之后，就将Token返回给客户端，客户端保存Token用于下次请求。服务端不进行储存Token，只验证Token，减少了服务器的消耗。同时，带有Token的请求在请求不同服务时，不用考虑是与哪台服务器生成的Session问题，非常适用于云服务。</li>\n<li><strong>通用性</strong> 因为JSON的通用性，所以JWT可以在Nodejs，JAVA，PHP等不同平台使用。</li>\n</ul>\n<h2 id=\"JWT示意图\"><a href=\"#JWT示意图\" class=\"headerlink\" title=\"JWT示意图\"></a>JWT示意图</h2><img src=\"http://www.plantuml.com/plantuml/svg/IqmkoIzIU3vbnREExLosjWel-hO_xPyMaf-TcgTWQyi5aL3GjLDuDgVtQTV2fpDNM2aydxdxwTwfN70HDEcNgtfUh6-4A7goV-6pnlKmOsnqaTMzs3_bwUnvOAkWolBoIr8LSbBJIgmKdkoV-tJj3B1aJDxJZWtFvgnvEcS3o8LFzku76eVVXKztB7koemkivlqUe6ksFzlOv1ZWIS39OFNutFfiwePdlUi0\">\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><ul>\n<li>Payload中的内容是BASE64编码，如果需要，可以在编码前，对内容进行加密</li>\n<li>生成签名的密钥除了妥善保存之外，可以使用<strong>动态密钥</strong>，在启动服务时生成密钥，这样就不会被轻易获取</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"http://lion1ou.win/2017/01/18/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">前后端分离之JWT用户认证</a></p>\n<p>[2] <a href=\"http://www.jianshu.com/p/576dbf44b2ae\" target=\"_blank\" rel=\"noopener\">什么是 JWT – JSON WEB TOKEN</a></p>\n<p>[3] <a href=\"https://github.com/smilingsun/blog/issues/1\" target=\"_blank\" rel=\"noopener\">适用于前后端分离的下一代认证机制 —— JSON Web Token</a></p>\n<p>[4] <a href=\"http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=XDJS201616018\" target=\"_blank\" rel=\"noopener\">基于JSON Web Token的无状态账户系统的设计</a></p>\n<p>[5] <a href=\"http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=SZJT201602087\" target=\"_blank\" rel=\"noopener\">JWT认证技术及其在WEB中的应用</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.thisjs.com/blog/software-720x380.jpg\" alt=\"安全\"></p>\n<p>随着前端单页面APP的发展，前后端分离成为了现在开发的一种趋势，用户身份认证，发生了一系列的变化。传统的Cookie, Session验证方式存在跨域、扩展性的限制，Token验证方式成为了一个很好的替代选择。</p>","more":"<p>这是一篇前导文章，之后会发布一系列关于JSON WEB TOKEN的项目实践。因此，这里将自己了解的相关知识和自己的一些观点汇集于此，以供查阅。</p>\n<h1 id=\"传统验证方式的不足\"><a href=\"#传统验证方式的不足\" class=\"headerlink\" title=\"传统验证方式的不足\"></a>传统验证方式的不足</h1><blockquote>\n<p>当然，传统验证方式并不是一文不值的，这里只是列出其中的不足，然后使用JSON WEB TOKEN来弥补其中的缺点。</p>\n</blockquote>\n<ul>\n<li><strong>服务端性能消耗</strong> 每次与用户建立会话之后，都会在服务端保存该信息，例如：PHP Session是保存在文件中，而Java Session则是保存在内存中，随着用户量的提升，会大量占用服务器的资源。</li>\n<li><strong>限制了分布式部署</strong> 当服务器处于分布式环境下，Session共享问题便随之而出，因此需要单独的服务器资源来解决Session共享问题。</li>\n<li><strong>与Restful API的stateless冲突</strong> Restful思想正在逐步推广，而Session则引入了新的“状态”，与Restful思想矛盾。</li>\n<li><strong>不方便移动APP的开发</strong> 使用Session验证方式，限制了原生Android，IOS APP的数据交互。</li>\n<li><strong>XSS</strong> Session的提交方式，是将Session信息存储在Cookie中，提交到服务器端，因此很容易被客户端注入的javascript代码，截获Cookie信息。</li>\n<li><strong>XSRF</strong>  基于Session的验证方式，有可能会被跨站请求伪造。</li>\n</ul>\n<h1 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON WEB TOKEN\"></a>JSON WEB TOKEN</h1><h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>JWT包含3部分数据信息，使用”.”分割，格式示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hhhhhhh.pppppp.sssss</span><br></pre></td></tr></table></figure></p>\n<p>三部分信息分别为：</p>\n<p><code>Signature</code>: 签名</p>\n<h3 id=\"Header-头信息\"><a href=\"#Header-头信息\" class=\"headerlink\" title=\"Header 头信息\"></a>Header 头信息</h3><p>Header中一般包含Token类型和哈希算法，例如:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"alg\"</span>:<span class=\"string\">\"HS256\"</span>,<span class=\"attr\">\"typ\"</span>:<span class=\"string\">\"JWT\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Payload-有效荷载\"><a href=\"#Payload-有效荷载\" class=\"headerlink\" title=\"Payload 有效荷载\"></a>Payload 有效荷载</h3><p>Payload中包含声明信息，例如<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"username\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"iat\"</span>:<span class=\"number\">1506320911</span>,  <span class=\"comment\">// 创建时间</span></span><br><span class=\"line\">    <span class=\"string\">\"exp\"</span>:<span class=\"number\">1506324511</span>  <span class=\"comment\">// 过期时间</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>注意：</strong> Payload和Header中的信息是BASE64编码，不是加密，因此不要再payload中添加敏感信息</p>\n</blockquote>\n<h3 id=\"Signature-签名\"><a href=\"#Signature-签名\" class=\"headerlink\" title=\"Signature 签名\"></a>Signature 签名</h3><p>签名用来校验JWT的发送方属实，以及确认消息在传递途中没有被更改。<br>例如，使用HS256算法，签名将采用如下方式创建：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HS256(</span><br><span class=\"line\">    base64UrlEncode(header) + <span class=\"string\">\".\"</span> + </span><br><span class=\"line\">    base64UrlEncode(payload), </span><br><span class=\"line\">    secret)</span><br></pre></td></tr></table></figure></p>\n<p>这里对于jwt的介绍只是简单介绍，详细关于JWT的信息可以参阅<a href=\"http://www.jianshu.com/p/576dbf44b2ae\" target=\"_blank\" rel=\"noopener\">[2]</a>,<a href=\"https://github.com/smilingsun/blog/issues/1\" target=\"_blank\" rel=\"noopener\">[3]</a>这两篇文章。</p>\n<h2 id=\"JWT的优点\"><a href=\"#JWT的优点\" class=\"headerlink\" title=\"JWT的优点\"></a>JWT的优点</h2><ul>\n<li><strong>可以实现跨域请求</strong> 因为JWT不依赖于Cookie，它可以添加在请求的<code>Header</code>,<code>body</code>,<code>参数</code>中，因此只要服务器允许跨域请求，那么带有授权Token的客户端，可以任意访问不同服务器下的服务，因此，非常适合SSO单点登录系统。</li>\n<li><strong>减少服务器消耗</strong> 服务器在生成Token之后，就将Token返回给客户端，客户端保存Token用于下次请求。服务端不进行储存Token，只验证Token，减少了服务器的消耗。同时，带有Token的请求在请求不同服务时，不用考虑是与哪台服务器生成的Session问题，非常适用于云服务。</li>\n<li><strong>通用性</strong> 因为JSON的通用性，所以JWT可以在Nodejs，JAVA，PHP等不同平台使用。</li>\n</ul>\n<h2 id=\"JWT示意图\"><a href=\"#JWT示意图\" class=\"headerlink\" title=\"JWT示意图\"></a>JWT示意图</h2><img src=\"http://www.plantuml.com/plantuml/svg/IqmkoIzIU3vbnREExLosjWel-hO_xPyMaf-TcgTWQyi5aL3GjLDuDgVtQTV2fpDNM2aydxdxwTwfN70HDEcNgtfUh6-4A7goV-6pnlKmOsnqaTMzs3_bwUnvOAkWolBoIr8LSbBJIgmKdkoV-tJj3B1aJDxJZWtFvgnvEcS3o8LFzku76eVVXKztB7koemkivlqUe6ksFzlOv1ZWIS39OFNutFfiwePdlUi0\">\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><ul>\n<li>Payload中的内容是BASE64编码，如果需要，可以在编码前，对内容进行加密</li>\n<li>生成签名的密钥除了妥善保存之外，可以使用<strong>动态密钥</strong>，在启动服务时生成密钥，这样就不会被轻易获取</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"http://lion1ou.win/2017/01/18/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">前后端分离之JWT用户认证</a></p>\n<p>[2] <a href=\"http://www.jianshu.com/p/576dbf44b2ae\" target=\"_blank\" rel=\"noopener\">什么是 JWT – JSON WEB TOKEN</a></p>\n<p>[3] <a href=\"https://github.com/smilingsun/blog/issues/1\" target=\"_blank\" rel=\"noopener\">适用于前后端分离的下一代认证机制 —— JSON Web Token</a></p>\n<p>[4] <a href=\"http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=XDJS201616018\" target=\"_blank\" rel=\"noopener\">基于JSON Web Token的无状态账户系统的设计</a></p>\n<p>[5] <a href=\"http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2016&amp;filename=SZJT201602087\" target=\"_blank\" rel=\"noopener\">JWT认证技术及其在WEB中的应用</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck9xmnbuq00001h2u41fn5eql","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbv900071h2u3tmtr3je"},{"post_id":"ck9xmnbuy00011h2uvdxron6r","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbvd000b1h2ulipbi4rv"},{"post_id":"ck9xmnbv300031h2uwjes5uwt","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbvn000f1h2um34wikjx"},{"post_id":"ck9xmnbv400041h2u2hjzmrk1","tag_id":"ck9xmnbvk000e1h2uw6q469e9","_id":"ck9xmnbvu000k1h2urptzo0h5"},{"post_id":"ck9xmnbv600051h2u88piq9ip","tag_id":"ck9xmnbvt000i1h2ujjlg59d8","_id":"ck9xmnbvy000o1h2uhdegg0xw"},{"post_id":"ck9xmnbv900081h2usbpuf4iw","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbw1000s1h2uv2msqkjn"},{"post_id":"ck9xmnbv900081h2usbpuf4iw","tag_id":"ck9xmnbvx000m1h2u3syhie9o","_id":"ck9xmnbw3000u1h2u86w48rqg"},{"post_id":"ck9xmnbw0000r1h2ugy702qll","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbw9000x1h2uzndygr9z"},{"post_id":"ck9xmnbvb00091h2u3pg3yfmo","tag_id":"ck9xmnbvx000m1h2u3syhie9o","_id":"ck9xmnbwa000z1h2u3c1ycy3w"},{"post_id":"ck9xmnbvb00091h2u3pg3yfmo","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbwc00121h2ufs923adc"},{"post_id":"ck9xmnbvd000c1h2u5uix7oub","tag_id":"ck9xmnbw3000v1h2u5mg0x009","_id":"ck9xmnbwd00141h2uzh6hgr1j"},{"post_id":"ck9xmnbvf000d1h2uhj8ubzal","tag_id":"ck9xmnbwb00111h2uh77x4r6c","_id":"ck9xmnbwf00181h2uwvxv0tgq"},{"post_id":"ck9xmnbvn000g1h2uy1j8y8hq","tag_id":"ck9xmnbwe00161h2urm09u06t","_id":"ck9xmnbwk001c1h2uaajvt01j"},{"post_id":"ck9xmnbwh001b1h2uc47a2n89","tag_id":"ck9xmnbvk000e1h2uw6q469e9","_id":"ck9xmnbwl001e1h2ukw6p3kxs"},{"post_id":"ck9xmnbwk001d1h2uusmbtgc0","tag_id":"ck9xmnbvk000e1h2uw6q469e9","_id":"ck9xmnbwn001h1h2urnllvurh"},{"post_id":"ck9xmnbvr000h1h2us1a806vi","tag_id":"ck9xmnbwh001a1h2uul8iz777","_id":"ck9xmnbwq001l1h2ulyvvevem"},{"post_id":"ck9xmnbvr000h1h2us1a806vi","tag_id":"ck9xmnbwl001f1h2uisk8x6ae","_id":"ck9xmnbwr001n1h2ug94fjaid"},{"post_id":"ck9xmnbvu000j1h2u50sv74b0","tag_id":"ck9xmnbwp001k1h2uhq0ehed8","_id":"ck9xmnbwt001r1h2udeiboyzv"},{"post_id":"ck9xmnbvw000l1h2ux5ngqw1s","tag_id":"ck9xmnbws001p1h2urmdxilzr","_id":"ck9xmnbww001v1h2uf9viz4xe"},{"post_id":"ck9xmnbvw000l1h2ux5ngqw1s","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbwy001x1h2uhgclt3fc"},{"post_id":"ck9xmnbvx000n1h2ue013iw5o","tag_id":"ck9xmnbwv001t1h2uav8e3n21","_id":"ck9xmnbx000201h2uspdq63xl"},{"post_id":"ck9xmnbwy001z1h2ue13tb0uv","tag_id":"ck9xmnbvx000m1h2u3syhie9o","_id":"ck9xmnbx200221h2upbxxalz3"},{"post_id":"ck9xmnbwy001z1h2ue13tb0uv","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbx400251h2ud6earsx1"},{"post_id":"ck9xmnbx100211h2ub0g08ych","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbx500271h2uvi5havff"},{"post_id":"ck9xmnbvz000p1h2uzrjj8gf5","tag_id":"ck9xmnbwy001y1h2u7ajimzsy","_id":"ck9xmnbx7002a1h2u6ix3gwk1"},{"post_id":"ck9xmnbvz000p1h2uzrjj8gf5","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbx8002c1h2ut69mmssj"},{"post_id":"ck9xmnbw2000t1h2ula3vbg8f","tag_id":"ck9xmnbx300241h2uj2us8e54","_id":"ck9xmnbx9002f1h2uob9uyl6w"},{"post_id":"ck9xmnbx8002d1h2uvingci6e","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbxa002h1h2uwfyqgclg"},{"post_id":"ck9xmnbw3000w1h2ufh635oux","tag_id":"ck9xmnbx600291h2u7ct81mqx","_id":"ck9xmnbxd002l1h2u3u1m9hn3"},{"post_id":"ck9xmnbw3000w1h2ufh635oux","tag_id":"ck9xmnbx9002e1h2us1whkmld","_id":"ck9xmnbxe002n1h2utz0ya4bp"},{"post_id":"ck9xmnbxb002i1h2u2ylxwpjn","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbxg002q1h2uhbre3ejz"},{"post_id":"ck9xmnbw9000y1h2ux2ab6fnp","tag_id":"ck9xmnbxc002j1h2uqj8m1b57","_id":"ck9xmnbxg002s1h2ucfz56nsu"},{"post_id":"ck9xmnbw9000y1h2ux2ab6fnp","tag_id":"ck9xmnbxf002p1h2uzap9hdet","_id":"ck9xmnbxh002t1h2u5lkmhcxf"},{"post_id":"ck9xmnbwa00101h2ul80u8j4m","tag_id":"ck9xmnbxg002r1h2uyajpvuzt","_id":"ck9xmnbxh002v1h2ula1ux025"},{"post_id":"ck9xmnbwc00131h2ux84myx3q","tag_id":"ck9xmnbxh002u1h2uuunol9a8","_id":"ck9xmnbxh002x1h2up109287h"},{"post_id":"ck9xmnbwd00151h2upxyvztmx","tag_id":"ck9xmnbxh002w1h2ukz92rl0d","_id":"ck9xmnbxi002z1h2u7m35spd6"},{"post_id":"ck9xmnbwf00171h2usc7mhxsf","tag_id":"ck9xmnbwp001k1h2uhq0ehed8","_id":"ck9xmnbxj00311h2upskwzoxv"},{"post_id":"ck9xmnbwf00171h2usc7mhxsf","tag_id":"ck9xmnbvt000i1h2ujjlg59d8","_id":"ck9xmnbxj00321h2uk3igeob0"},{"post_id":"ck9xmnbwg00191h2u64gph60x","tag_id":"ck9xmnbw3000v1h2u5mg0x009","_id":"ck9xmnbxo00341h2u1of0pt2t"},{"post_id":"ck9xmnbwg00191h2u64gph60x","tag_id":"ck9xmnbxi00301h2usx1kk8yw","_id":"ck9xmnbxp00351h2ueaqz5kc3"},{"post_id":"ck9xmnbwl001g1h2ujil2yprn","tag_id":"ck9xmnbxo00331h2ufirjwhxc","_id":"ck9xmnbxp00381h2uwd7nye57"},{"post_id":"ck9xmnbwl001g1h2ujil2yprn","tag_id":"ck9xmnbxp00361h2u7ah7my8w","_id":"ck9xmnbxp00391h2uc5j5vtiy"},{"post_id":"ck9xmnbwn001i1h2u6qiw87dj","tag_id":"ck9xmnbxp00371h2ukrmou545","_id":"ck9xmnbxq003b1h2u0qprtmt6"},{"post_id":"ck9xmnbwo001j1h2ui1vt00mb","tag_id":"ck9xmnbxq003a1h2uqei8qsxr","_id":"ck9xmnbxr003d1h2u7pqwwmup"},{"post_id":"ck9xmnbwq001m1h2unq5p9hi0","tag_id":"ck9xmnbws001p1h2urmdxilzr","_id":"ck9xmnbxr003f1h2uxi8ldfds"},{"post_id":"ck9xmnbwq001m1h2unq5p9hi0","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbxs003g1h2u72mtc8u4"},{"post_id":"ck9xmnbwr001o1h2usaku83nf","tag_id":"ck9xmnbxp00371h2ukrmou545","_id":"ck9xmnbxs003i1h2uvx6wdb00"},{"post_id":"ck9xmnbwt001q1h2ur8r81xr8","tag_id":"ck9xmnbxs003h1h2u9401074t","_id":"ck9xmnbxw003k1h2uu0x25rzi"},{"post_id":"ck9xmnbwu001s1h2u9bi92ylz","tag_id":"ck9xmnbxp00371h2ukrmou545","_id":"ck9xmnbxw003m1h2uv4qp9oor"},{"post_id":"ck9xmnbww001u1h2u5egm5dau","tag_id":"ck9xmnbw3000v1h2u5mg0x009","_id":"ck9xmnbxx003o1h2ui24vi1h2"},{"post_id":"ck9xmnbww001u1h2u5egm5dau","tag_id":"ck9xmnbxw003l1h2u4t4g3yv9","_id":"ck9xmnbxx003p1h2uurkdt3k5"},{"post_id":"ck9xmnbwx001w1h2ufeo3v7v0","tag_id":"ck9xmnbvx000m1h2u3syhie9o","_id":"ck9xmnbxy003r1h2uj5zyd4ao"},{"post_id":"ck9xmnbwx001w1h2ufeo3v7v0","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnbxy003s1h2uc6cx38kl"},{"post_id":"ck9xmnbwx001w1h2ufeo3v7v0","tag_id":"ck9xmnbxx003n1h2u3fea35fl","_id":"ck9xmnby0003u1h2uv9z5ew03"},{"post_id":"ck9xmnbx200231h2u58qia2sz","tag_id":"ck9xmnbxp00371h2ukrmou545","_id":"ck9xmnby0003v1h2unt3w9xvs"},{"post_id":"ck9xmnbx400261h2un53qhstl","tag_id":"ck9xmnbxy003t1h2u4jwqa4d0","_id":"ck9xmnby6003x1h2uzfcz7uh0"},{"post_id":"ck9xmnbx500281h2ue5lhjc9w","tag_id":"ck9xmnby5003w1h2uxloa2ep0","_id":"ck9xmnby7003z1h2u64ie2wue"},{"post_id":"ck9xmnbx7002b1h2uhx8os212","tag_id":"ck9xmnbxp00371h2ukrmou545","_id":"ck9xmnby700411h2uraz0i95q"},{"post_id":"ck9xmnbx9002g1h2uu0bxef32","tag_id":"ck9xmnbv000021h2ueopa1gej","_id":"ck9xmnby800441h2uxmbp7oiw"},{"post_id":"ck9xmnbx9002g1h2uu0bxef32","tag_id":"ck9xmnby700401h2u35t14cma","_id":"ck9xmnby800451h2uyrzwrymg"},{"post_id":"ck9xmnbx9002g1h2uu0bxef32","tag_id":"ck9xmnby700421h2ubox8xele","_id":"ck9xmnby800471h2urvvi40ns"},{"post_id":"ck9xmnbxc002k1h2ucsq0r32i","tag_id":"ck9xmnbwy001y1h2u7ajimzsy","_id":"ck9xmnby900481h2u78xinl1d"},{"post_id":"ck9xmnbxc002k1h2ucsq0r32i","tag_id":"ck9xmnby800431h2ukys3dmgo","_id":"ck9xmnby9004a1h2uag66s2le"},{"post_id":"ck9xmnbxd002m1h2u5cm0y4cl","tag_id":"ck9xmnby800461h2u2et0bk5k","_id":"ck9xmnbya004d1h2uwkyp7cer"},{"post_id":"ck9xmnbxd002m1h2u5cm0y4cl","tag_id":"ck9xmnby900491h2uaomox3fa","_id":"ck9xmnbya004e1h2u4dbzcab2"},{"post_id":"ck9xmnbxd002m1h2u5cm0y4cl","tag_id":"ck9xmnby9004b1h2uq2jispt6","_id":"ck9xmnbya004g1h2u7q5mvhfb"},{"post_id":"ck9xmnbxe002o1h2ulmkg88ym","tag_id":"ck9xmnby9004c1h2uy49oeyl6","_id":"ck9xmnbya004h1h2uvfdarwxb"},{"post_id":"ck9xmnbxe002o1h2ulmkg88ym","tag_id":"ck9xmnbya004f1h2uiexcdsm0","_id":"ck9xmnbya004i1h2u1xkk514y"}],"Tag":[{"name":"javascript","_id":"ck9xmnbv000021h2ueopa1gej"},{"name":"php","_id":"ck9xmnbvk000e1h2uw6q469e9"},{"name":"MySql","_id":"ck9xmnbvt000i1h2ujjlg59d8"},{"name":"angular","_id":"ck9xmnbvx000m1h2u3syhie9o"},{"name":"node","_id":"ck9xmnbw3000v1h2u5mg0x009"},{"name":"CSS3","_id":"ck9xmnbwb00111h2uh77x4r6c"},{"name":"C#","_id":"ck9xmnbwe00161h2urm09u06t"},{"name":"无头浏览器","_id":"ck9xmnbwh001a1h2uul8iz777"},{"name":"爬虫","_id":"ck9xmnbwl001f1h2uisk8x6ae"},{"name":"PHP","_id":"ck9xmnbwp001k1h2uhq0ehed8"},{"name":"gojs","_id":"ck9xmnbws001p1h2urmdxilzr"},{"name":"css","_id":"ck9xmnbwv001t1h2uav8e3n21"},{"name":"jQuery","_id":"ck9xmnbwy001y1h2u7ajimzsy"},{"name":"jsp","_id":"ck9xmnbx300241h2uj2us8e54"},{"name":"vs2015","_id":"ck9xmnbx600291h2u7ct81mqx"},{"name":"开发工具","_id":"ck9xmnbx9002e1h2us1whkmld"},{"name":"应用","_id":"ck9xmnbxc002j1h2uqj8m1b57"},{"name":"工具","_id":"ck9xmnbxf002p1h2uzap9hdet"},{"name":"css3","_id":"ck9xmnbxg002r1h2uyajpvuzt"},{"name":"MongoDB","_id":"ck9xmnbxh002u1h2uuunol9a8"},{"name":"Javascript","_id":"ck9xmnbxh002w1h2ukz92rl0d"},{"name":"osx","_id":"ck9xmnbxi00301h2usx1kk8yw"},{"name":"vue","_id":"ck9xmnbxo00331h2ufirjwhxc"},{"name":"lodash","_id":"ck9xmnbxp00361h2u7ah7my8w"},{"name":"操作系统","_id":"ck9xmnbxp00371h2ukrmou545"},{"name":"跨域","_id":"ck9xmnbxq003a1h2uqei8qsxr"},{"name":"API","_id":"ck9xmnbxs003h1h2u9401074t"},{"name":"git","_id":"ck9xmnbxw003l1h2u4t4g3yv9"},{"name":"material","_id":"ck9xmnbxx003n1h2u3fea35fl"},{"name":"centos","_id":"ck9xmnbxy003t1h2u4jwqa4d0"},{"name":"JavaScript","_id":"ck9xmnby5003w1h2uxloa2ep0"},{"name":"jquery","_id":"ck9xmnby700401h2u35t14cma"},{"name":"lazyload","_id":"ck9xmnby700421h2ubox8xele"},{"name":"promise","_id":"ck9xmnby800431h2ukys3dmgo"},{"name":"中间人","_id":"ck9xmnby800461h2u2et0bk5k"},{"name":"开发","_id":"ck9xmnby900491h2uaomox3fa"},{"name":"抓包","_id":"ck9xmnby9004b1h2uq2jispt6"},{"name":"jwt","_id":"ck9xmnby9004c1h2uy49oeyl6"},{"name":"前端","_id":"ck9xmnbya004f1h2uiexcdsm0"}]}}