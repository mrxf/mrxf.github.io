{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","isHovered","setIsHovered","containerRef","useRef","imgRef","tipsRef","onEnter","useCallback","throttledRequestAnimation","throttle","callback","requestAnimationFrame","onMouseMove","ev","overHorizontal","clientX","current","offsetLeft","clientWidth","overVertical","clientY","offsetTop","clientHeight","style","left","top","onMouseLeave","className","ref","onMouseEnter","src","alt","cls","entranceAnimation","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAqGeA,MAhGf,WAAgB,IAAD,EACuBC,oBAAkB,GADzC,mBACJC,EADI,KACOC,EADP,KAELC,EAAeC,iBAAuB,MACtCC,EAASD,iBAAyB,MAClCE,EAAUF,iBAA2B,MAGrCG,EAAUC,uBAAY,WACnBP,GACDC,GAAa,KAElB,CAACD,IAMEQ,EAA4BC,oBAAS,SAACC,GACxCC,sBAAsBD,KACvB,KAKGE,EAAcL,uBAAY,SAACM,GAAsD,IAAD,gBAE5EC,EACFD,EAAGE,SAAH,oBACCb,EAAac,eADd,aACC,EAAsBC,kBADvB,QACqC,IACrC,oBAACf,EAAac,eAAd,aAAC,EAAsBE,mBAAvB,QAAsC,GAAK,EACzCC,EACFN,EAAGO,SAAH,oBACClB,EAAac,eADd,aACC,EAAsBK,iBADvB,QACoC,IACpC,oBAACnB,EAAac,eAAd,aAAC,EAAsBM,oBAAvB,QAAuC,GAAK,EAehDd,GAZwB,WAEhBJ,EAAOY,UACPZ,EAAOY,QAAQO,MAAMC,KAArB,qBAA2D,GAAjBV,EAA1C,OACAV,EAAOY,QAAQO,MAAME,IAArB,qBAAwD,GAAfN,EAAzC,QAGAd,EAAQW,UACRX,EAAQW,QAAQO,MAAMC,KAAtB,UAAiD,IAAjBV,EAAhC,MACAT,EAAQW,QAAQO,MAAME,IAAtB,UAA8C,IAAfN,EAA/B,YAIT,IAKGO,EAAenB,uBAAY,WAW7BC,GAVwB,WAChBJ,EAAOY,UACPZ,EAAOY,QAAQO,MAAMC,KAAO,MAC5BpB,EAAOY,QAAQO,MAAME,IAAM,OAE3BpB,EAAQW,UACRX,EAAQW,QAAQO,MAAMC,KAAtB,UAAgC,EAAhC,OACAnB,EAAQW,QAAQO,MAAME,IAAtB,UAA+B,EAA/B,aAIT,IAEH,OACI,yBAAKE,UAAU,OACX,yBACIC,IAAK1B,EACLyB,UAAU,iBACVE,aAAcvB,EACdM,YAAaA,EACbc,aAAcA,GAEd,wBAAIC,UAAU,OAAOC,IAAKvB,GAA1B,uBAGA,yBAAKsB,UAAU,SACf,yBACIC,IAAKxB,EACLuB,UAAU,SACVG,IAAI,yEACJC,IAAI,6BAER,0BAAMJ,UAAWK,IAAI,UAAW,CAAEC,kBAAmBjC,KAArD,KACA,0BAAM2B,UAAWK,IAAI,UAAW,CAAEC,kBAAmBjC,KAArD,KACA,0BAAM2B,UAAWK,IAAI,UAAW,CAAEC,kBAAmBjC,KAArD,MAEJ,uBAAG2B,UAAU,OAAOO,KAAK,2BAAzB,0CCpFQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.83d78dca.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\nimport cls from \"classnames\";\nimport { throttle } from \"lodash\";\nimport \"./App.scss\";\n\nfunction App() {\n    const [isHovered, setIsHovered] = useState<boolean>(false);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const imgRef = useRef<HTMLImageElement>(null);\n    const tipsRef = useRef<HTMLHeadingElement>(null);\n\n    // 第一次进入页面不使用入场动画，鼠标划过一次之后，再增加该动画\n    const onEnter = useCallback(() => {\n        if (!isHovered) {\n            setIsHovered(true);\n        }\n    }, [isHovered]);\n\n    /**\n     * 节流的RFA\n     * 因为动画效果使用了transition，因此不需要实时的改动，只需要定时将结果发送即可\n     */\n    const throttledRequestAnimation = throttle((callback) => {\n        requestAnimationFrame(callback);\n    }, 100);\n\n    /**\n     * 鼠标在元素中移动时，内部的元素也跟着小范围移动\n     */\n    const onMouseMove = useCallback((ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        // 计算鼠标和元素位置的差值，再比对横向/纵向的区别，得到左右/上下的位置\n        const overHorizontal =\n            ev.clientX -\n            (containerRef.current?.offsetLeft ?? 0) -\n            (containerRef.current?.clientWidth ?? 0) / 2;\n        const overVertical =\n            ev.clientY -\n            (containerRef.current?.offsetTop ?? 0) -\n            (containerRef.current?.clientHeight ?? 0) / 2;\n\n        // 更新元素位置\n        const updateAnimation = () => {\n            // 稍微大范围的更新图片的位置\n            if (imgRef.current) {\n                imgRef.current.style.left = `calc(47% + ${overHorizontal * 0.1}px)`;\n                imgRef.current.style.top = `calc(50% + ${overVertical * 0.1}px)`;\n            }\n            // 稍微小范围的更新文字位置\n            if (tipsRef.current) {\n                tipsRef.current.style.left = `${overHorizontal * 0.05}px`;\n                tipsRef.current.style.top = `${overVertical * 0.05}px`;\n            }\n        };\n        throttledRequestAnimation(updateAnimation);\n    }, []);\n\n    /**\n     * 鼠标划走之后，移动的元素回归原来的位置\n     */\n    const onMouseLeave = useCallback(() => {\n        const updateAnimation = () => {\n            if (imgRef.current) {\n                imgRef.current.style.left = \"47%\";\n                imgRef.current.style.top = \"50%\";\n            }\n            if (tipsRef.current) {\n                tipsRef.current.style.left = `${0}px)`;\n                tipsRef.current.style.top = `${0}px)`;\n            }\n        };\n        throttledRequestAnimation(updateAnimation);\n    }, []);\n\n    return (\n        <div className='App'>\n            <div\n                ref={containerRef}\n                className='card-container'\n                onMouseEnter={onEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            >\n                <h3 className='tips' ref={tipsRef}>\n                    Next Week in XiaMen\n                </h3>\n                <div className='card' />\n                <img\n                    ref={imgRef}\n                    className='poster'\n                    src='https://tympanus.net/Development/GridLayoutScrollableContent/img/2.jpg'\n                    alt='图片地址'\n                />\n                <span className={cls(\"code _f\", { entranceAnimation: isHovered })}>A</span>\n                <span className={cls(\"code _s\", { entranceAnimation: isHovered })}>1</span>\n                <span className={cls(\"code _t\", { entranceAnimation: isHovered })}>2</span>\n            </div>\n            <a className=\"link\" href=\"https://www.thisjs.com/\" >回到博客首页</a>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}